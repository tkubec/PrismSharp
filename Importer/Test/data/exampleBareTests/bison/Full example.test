/* Mini Calculator */
/* calc.y */

%{
#include "heading.h"
int yyerror(char *s);
int yylex(void);
%}

%union{
  int		int_val;
  string*	op_val;
}

%start	input

%token	&lt;int_val>	INTEGER_LITERAL
%type	&lt;int_val>	exp
%left	PLUS
%left	MULT

%%

input:		/* empty */
		| exp	{ cout &lt;&lt; "Result: " &lt;&lt; $1 &lt;&lt; endl; }
		;

exp:		INTEGER_LITERAL	{ $$ = $1; }
		| exp PLUS exp	{ $$ = $1 + $3; }
		| exp MULT exp	{ $$ = $1 * $3; }
		;

%%

int yyerror(string s)
{
  extern int yylineno;	// defined and maintained in lex.c
  extern char *yytext;	// defined and maintained in lex.c

  cerr &lt;&lt; "ERROR: " &lt;&lt; s &lt;&lt; " at symbol \"" &lt;&lt; yytext;
  cerr &lt;&lt; "\" on line " &lt;&lt; yylineno &lt;&lt; endl;
  exit(1);
}

int yyerror(char *s)
{
  return yyerror(string(s));
}

--------------------------------------------------

