{
  "comment": "r:/--[^\\r\\n]*/",
  "string": "r:/\"(?:\"\"|[^\"\\r\\f\\n])*\"/",
  "number": [
    {
      "pattern": "r:/\\b\\d(?:_?\\d)*#[\\dA-F](?:_?[\\dA-F])*(?:\\.[\\dA-F](?:_?[\\dA-F])*)?#(?:E[+-]?\\d(?:_?\\d)*)?/i"
    },
    {
      "pattern": "r:/\\b\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:E[+-]?\\d(?:_?\\d)*)?\\b/i"
    }
  ],
  "attr-name": "r:/\\b'\\w+/",
  "keyword": "r:/\\b(?:abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|new|not|null|of|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|return|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\\b/i",
  "boolean": "r:/\\b(?:false|true)\\b/i",
  "operator": "r:/<[=>]?|>=?|=>?|:=|\\/=?|\\*\\*?|[&+-]/",
  "punctuation": "r:/\\.\\.?|[,;():]/",
  "char": "r:/'[^\\r\\n]'/",
  "variable": "r:/\\b[a-z](?:\\w)*\\b/i"
}