{
  "comment": [
    {
      "pattern": "r:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|(?:(?=\\r$)|$))/",
      "lookbehind": true,
      "greedy": true
    },
    {
      "pattern": "r:/(^|[^\\\\:])\\/\\/[^\\r\\n]*/",
      "lookbehind": true,
      "greedy": true
    }
  ],
  "string-interpolation": {
    "pattern": "r:/'(?:[^'\\\\]|\\\\[\\s\\S])*'/",
    "greedy": true,
    "inside": {
      "interpolation": {
        "pattern": "r:/(^|[^\\\\])\\$(?:\\w+|\\{[^{}]+\\})/",
        "lookbehind": true,
        "inside": {
          "interpolation-punctuation": {
            "pattern": "r:/^\\$\\{?|\\}(?:(?=\\r$)|$)/",
            "alias": "s:punctuation"
          },
          "expression": {
            "pattern": "r:/[\\s\\S]+/",
            "inside": "s:[Circular ~]"
          }
        }
      },
      "string": "r:/[\\s\\S]+/"
    }
  },
  "string": {
    "pattern": "r:/\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/",
    "greedy": true
  },
  "regex": {
    "pattern": "r:/~\\/(?:[^\\/\\\\\\r\\n]|\\\\[^\\r\\n])+\\/[a-z]*/",
    "greedy": true,
    "inside": {
      "regex-flags": "r:/\\b[a-z]+(?:(?=\\r$)|$)/",
      "regex-source": {
        "pattern": "r:/^(~\\/)[\\s\\S]+(?=\\/(?:(?=\\r$)|$))/",
        "lookbehind": true,
        "alias": "s:language-regex"
      },
      "regex-delimiter": "r:/^~\\/|\\/(?:(?=\\r$)|$)/"
    }
  },
  "class-name": [
    {
      "pattern": "r:/(\\b(?:abstract|class|enum|extends|implements|interface|new|typedef)\\s+)[A-Z_]\\w*/",
      "lookbehind": true
    },
    "r:/\\b[A-Z]\\w*/"
  ],
  "preprocessor": {
    "pattern": "r:/#(?:else|elseif|end|if)\\b[^\\r\\n]*/",
    "alias": "s:property"
  },
  "metadata": {
    "pattern": "r:/@:?[\\w.]+/",
    "alias": "s:symbol"
  },
  "reification": {
    "pattern": "r:/\\$(?:\\w+|(?=\\{))/",
    "alias": "s:important"
  },
  "keyword": "r:/\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|final|for|from|function|if|implements|import|in|inline|interface|macro|new|null|operator|overload|override|package|private|public|return|static|super|switch|throw|to|try|typedef|untyped|using|var|while)(?!\\.)\\b/",
  "boolean": "r:/\\b(?:false|true)\\b/",
  "function": {
    "pattern": "r:/\\b[a-z_]\\w*(?=\\s*(?:<[^<>]*>\\s*)?\\()/i",
    "greedy": true
  },
  "number": "r:/\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i",
  "operator": "r:/\\.{3}|\\+\\+|--|&&|\\|\\||->|=>|(?:<<?|>{1,3}|[-+*/%!=&|^])=?|[?:~]/",
  "punctuation": "r:/[{}[\\];(),.:]/"
}