{
  "comment": [
    {
      "pattern": "r:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|(?:(?=\\r$)|$))/",
      "lookbehind": true,
      "greedy": true
    },
    {
      "pattern": "r:/(^|[^\\\\:])\\/\\/[^\\r\\n]*/",
      "lookbehind": true,
      "greedy": true
    }
  ],
  "triple-quoted-string": {
    "pattern": "r:/\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\[^\\r\\n]|[^\"\\\\]))*\"\"\"/",
    "greedy": true,
    "alias": "s:string"
  },
  "char": {
    "pattern": "r:/'(?:\\\\[^\\r\\n]|[^'\\\\\\r\\n]){1,6}'/",
    "greedy": true
  },
  "string": {
    "pattern": "r:/(^|[^\\\\])\"(?:\\\\[^\\r\\n]|[^\"\\\\\\r\\n])*\"/",
    "lookbehind": true,
    "greedy": true
  },
  "annotation": {
    "pattern": "r:/(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/",
    "lookbehind": true,
    "alias": "s:punctuation"
  },
  "generics": {
    "pattern": "r:/<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/",
    "inside": {
      "class-name": {
        "pattern": "r:/(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/",
        "lookbehind": true,
        "inside": {
          "namespace": {
            "pattern": "r:/^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/",
            "inside": {
              "punctuation": "r:/\\./"
            }
          },
          "punctuation": "r:/\\./"
        }
      },
      "keyword": "r:/\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/",
      "punctuation": "r:/[<>(),.:]/",
      "operator": "r:/[?&|]/"
    }
  },
  "namespace": {
    "pattern": "r:/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/",
    "lookbehind": true,
    "inside": {
      "punctuation": "r:/\\./"
    }
  },
  "class-name": [
    {
      "pattern": "r:/(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/",
      "lookbehind": true,
      "inside": {
        "namespace": {
          "pattern": "r:/^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/",
          "inside": {
            "punctuation": "r:/\\./"
          }
        },
        "punctuation": "r:/\\./"
      }
    },
    {
      "pattern": "r:/(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/",
      "lookbehind": true,
      "inside": {
        "namespace": {
          "pattern": "r:/^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/",
          "inside": {
            "punctuation": "r:/\\./"
          }
        },
        "punctuation": "r:/\\./"
      }
    }
  ],
  "keyword": "r:/\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/",
  "boolean": "r:/\\b(?:false|true)\\b/",
  "function": [
    "r:/\\b\\w+(?=\\()/",
    {
      "pattern": "r:/(::\\s*)[a-z_]\\w*/",
      "lookbehind": true
    }
  ],
  "number": "r:/\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i",
  "operator": {
    "pattern": "r:/(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m",
    "lookbehind": true
  },
  "punctuation": "r:/[{}[\\];(),.:]/"
}