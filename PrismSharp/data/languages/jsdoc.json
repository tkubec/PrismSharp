{
  "parameter": {
    "pattern": "r:/(@(?:arg|argument|param|property)\\s+(?:\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})+\\}\\s+)?)(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?=\\s|(?:(?=\\r$)|$))/",
    "lookbehind": true,
    "inside": {
      "punctuation": "r:/\\./"
    }
  },
  "optional-parameter": {
    "pattern": "r:/(@(?:arg|argument|param|property)\\s+(?:\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})+\\}\\s+)?)\\[(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?:=[^[\\]]+)?\\](?=\\s|(?:(?=\\r$)|$))/",
    "lookbehind": true,
    "inside": {
      "parameter": {
        "pattern": "r:/(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/",
        "lookbehind": true,
        "inside": {
          "punctuation": "r:/\\./"
        }
      },
      "code": {
        "pattern": "r:/(=)[\\s\\S]*(?=\\](?:(?=\\r$)|$))/",
        "lookbehind": true,
        "inside": {
          "doc-comment": {
            "pattern": "r:/(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|(?:(?=\\r$)|$))/",
            "lookbehind": true,
            "alias": "s:comment",
            "inside": {
              "rest": "s:[Circular ~]"
            }
          },
          "comment": [
            {
              "pattern": "r:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|(?:(?=\\r$)|$))/",
              "lookbehind": true,
              "greedy": true
            },
            {
              "pattern": "r:/(^|[^\\\\:])\\/\\/[^\\r\\n]*/",
              "lookbehind": true,
              "greedy": true
            }
          ],
          "hashbang": {
            "pattern": "r:/^#![^\\r\\n]*/",
            "greedy": true,
            "alias": "s:comment"
          },
          "template-string": {
            "pattern": "r:/`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/",
            "greedy": true,
            "inside": {
              "template-punctuation": {
                "pattern": "r:/^`|`(?:(?=\\r$)|$)/",
                "alias": "s:string"
              },
              "interpolation": {
                "pattern": "r:/((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/",
                "lookbehind": true,
                "inside": {
                  "interpolation-punctuation": {
                    "pattern": "r:/^\\$\\{|\\}(?:(?=\\r$)|$)/",
                    "alias": "s:punctuation"
                  },
                  "rest": "s:[Circular ~.optional-parameter.inside.code.inside]"
                }
              },
              "string": "r:/[\\s\\S]+/"
            }
          },
          "string-property": {
            "pattern": "r:/((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m",
            "lookbehind": true,
            "greedy": true,
            "alias": "s:property"
          },
          "string": {
            "pattern": "r:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/",
            "greedy": true
          },
          "class-name": [
            {
              "pattern": "r:/(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/",
              "lookbehind": true,
              "inside": {
                "punctuation": "r:/[.\\\\]/"
              }
            },
            {
              "pattern": "r:/(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/",
              "lookbehind": true
            }
          ],
          "regex": {
            "pattern": "r:/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\[^\\r\\n])*\\]|\\\\[^\\r\\n]|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:(?:(?=\\r$)|$)|[\\r\\n,.;:})\\]]|\\/\\/))/",
            "lookbehind": true,
            "greedy": true,
            "inside": {
              "regex-source": {
                "pattern": "r:/^(\\/)[\\s\\S]+(?=\\/[a-z]*(?:(?=\\r$)|$))/",
                "lookbehind": true,
                "alias": "s:language-regex"
              },
              "regex-delimiter": "r:/^\\/|\\/(?:(?=\\r$)|$)/",
              "regex-flags": "r:/^[a-z]+(?:(?=\\r$)|$)/"
            }
          },
          "function-variable": {
            "pattern": "r:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/",
            "alias": "s:function"
          },
          "parameter": [
            {
              "pattern": "r:/(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/",
              "lookbehind": true,
              "inside": "s:[Circular ~.optional-parameter.inside.code.inside]"
            },
            {
              "pattern": "r:/(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i",
              "lookbehind": true,
              "inside": "s:[Circular ~.optional-parameter.inside.code.inside]"
            },
            {
              "pattern": "r:/(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/",
              "lookbehind": true,
              "inside": "s:[Circular ~.optional-parameter.inside.code.inside]"
            },
            {
              "pattern": "r:/((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/",
              "lookbehind": true,
              "inside": "s:[Circular ~.optional-parameter.inside.code.inside]"
            }
          ],
          "constant": "r:/\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/",
          "keyword": [
            {
              "pattern": "r:/((?:^|\\})\\s*)catch\\b/",
              "lookbehind": true
            },
            {
              "pattern": "r:/(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|(?:(?=\\r$)|$)))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|(?:(?=\\r$)|$)))|for|from(?=\\s*(?:['\"]|(?:(?=\\r$)|$)))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|(?:(?=\\r$)|$)))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/",
              "lookbehind": true
            }
          ],
          "boolean": "r:/\\b(?:false|true)\\b/",
          "function": "r:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/",
          "number": {
            "pattern": "r:/(^|[^\\w$])(?:NaN|Infinity|0[bB][01]+(?:_[01]+)*n?|0[oO][0-7]+(?:_[0-7]+)*n?|0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?|\\d+(?:_\\d+)*n|(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?)(?![\\w$])/",
            "lookbehind": true
          },
          "literal-property": {
            "pattern": "r:/((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m",
            "lookbehind": true,
            "alias": "s:property"
          },
          "operator": "r:/--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/",
          "punctuation": "r:/[{}[\\];(),.:]/"
        },
        "alias": "s:language-javascript"
      },
      "punctuation": "r:/[=[\\]]/"
    }
  },
  "class-name": [
    {
      "pattern": "r:/(@(?:augments|class|extends|interface|memberof!?|template|this|typedef)\\s+(?:\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})+\\}\\s+)?)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/",
      "lookbehind": true,
      "inside": {
        "punctuation": "r:/\\./"
      }
    },
    {
      "pattern": "r:/(@[a-z]+\\s+)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})+\\}/",
      "lookbehind": true,
      "inside": {
        "string": {
          "pattern": "r:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/",
          "greedy": true
        },
        "number": {
          "pattern": "r:/(^|[^\\w$])(?:NaN|Infinity|0[bB][01]+(?:_[01]+)*n?|0[oO][0-7]+(?:_[0-7]+)*n?|0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?|\\d+(?:_\\d+)*n|(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?)(?![\\w$])/",
          "lookbehind": true
        },
        "boolean": "r:/\\b(?:false|true)\\b/",
        "keyword": [
          {
            "pattern": "r:/((?:^|\\})\\s*)catch\\b/",
            "lookbehind": true
          },
          {
            "pattern": "r:/(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|(?:(?=\\r$)|$)))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|(?:(?=\\r$)|$)))|for|from(?=\\s*(?:['\"]|(?:(?=\\r$)|$)))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|(?:(?=\\r$)|$)))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/",
            "lookbehind": true
          },
          "r:/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/",
          "r:/\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|(?:(?=\\r$)|$)))/",
          "r:/\\btype\\b(?=\\s*(?:[\\{*]|(?:(?=\\r$)|$)))/"
        ],
        "operator": "r:/=>|\\.\\.\\.|[&|?:*]/",
        "punctuation": "r:/[.,;=<>{}()[\\]]/"
      }
    }
  ],
  "example": {
    "pattern": "r:/(@example\\s+(?!\\s))(?:[^@\\s]|\\s+(?!\\s))+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/",
    "lookbehind": true,
    "inside": {
      "code": {
        "pattern": "r:/^([\\t ]*(?:\\*\\s*)?)\\S[^\\r\\n]*(?:(?=\\r$)|$)/m",
        "lookbehind": true,
        "inside": {
          "doc-comment": {
            "pattern": "r:/(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|(?:(?=\\r$)|$))/",
            "lookbehind": true,
            "alias": "s:comment",
            "inside": {
              "rest": "s:[Circular ~]"
            }
          },
          "comment": [
            {
              "pattern": "r:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|(?:(?=\\r$)|$))/",
              "lookbehind": true,
              "greedy": true
            },
            {
              "pattern": "r:/(^|[^\\\\:])\\/\\/[^\\r\\n]*/",
              "lookbehind": true,
              "greedy": true
            }
          ],
          "hashbang": {
            "pattern": "r:/^#![^\\r\\n]*/",
            "greedy": true,
            "alias": "s:comment"
          },
          "template-string": {
            "pattern": "r:/`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/",
            "greedy": true,
            "inside": {
              "template-punctuation": {
                "pattern": "r:/^`|`(?:(?=\\r$)|$)/",
                "alias": "s:string"
              },
              "interpolation": {
                "pattern": "r:/((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/",
                "lookbehind": true,
                "inside": {
                  "interpolation-punctuation": {
                    "pattern": "r:/^\\$\\{|\\}(?:(?=\\r$)|$)/",
                    "alias": "s:punctuation"
                  },
                  "rest": "s:[Circular ~.example.inside.code.inside]"
                }
              },
              "string": "r:/[\\s\\S]+/"
            }
          },
          "string-property": {
            "pattern": "r:/((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m",
            "lookbehind": true,
            "greedy": true,
            "alias": "s:property"
          },
          "string": {
            "pattern": "r:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/",
            "greedy": true
          },
          "class-name": [
            {
              "pattern": "r:/(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/",
              "lookbehind": true,
              "inside": {
                "punctuation": "r:/[.\\\\]/"
              }
            },
            {
              "pattern": "r:/(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/",
              "lookbehind": true
            }
          ],
          "regex": {
            "pattern": "r:/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\[^\\r\\n])*\\]|\\\\[^\\r\\n]|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:(?:(?=\\r$)|$)|[\\r\\n,.;:})\\]]|\\/\\/))/",
            "lookbehind": true,
            "greedy": true,
            "inside": {
              "regex-source": {
                "pattern": "r:/^(\\/)[\\s\\S]+(?=\\/[a-z]*(?:(?=\\r$)|$))/",
                "lookbehind": true,
                "alias": "s:language-regex"
              },
              "regex-delimiter": "r:/^\\/|\\/(?:(?=\\r$)|$)/",
              "regex-flags": "r:/^[a-z]+(?:(?=\\r$)|$)/"
            }
          },
          "function-variable": {
            "pattern": "r:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/",
            "alias": "s:function"
          },
          "parameter": [
            {
              "pattern": "r:/(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/",
              "lookbehind": true,
              "inside": "s:[Circular ~.example.inside.code.inside]"
            },
            {
              "pattern": "r:/(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i",
              "lookbehind": true,
              "inside": "s:[Circular ~.example.inside.code.inside]"
            },
            {
              "pattern": "r:/(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/",
              "lookbehind": true,
              "inside": "s:[Circular ~.example.inside.code.inside]"
            },
            {
              "pattern": "r:/((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/",
              "lookbehind": true,
              "inside": "s:[Circular ~.example.inside.code.inside]"
            }
          ],
          "constant": "r:/\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/",
          "keyword": [
            {
              "pattern": "r:/((?:^|\\})\\s*)catch\\b/",
              "lookbehind": true
            },
            {
              "pattern": "r:/(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|(?:(?=\\r$)|$)))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|(?:(?=\\r$)|$)))|for|from(?=\\s*(?:['\"]|(?:(?=\\r$)|$)))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|(?:(?=\\r$)|$)))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/",
              "lookbehind": true
            }
          ],
          "boolean": "r:/\\b(?:false|true)\\b/",
          "function": "r:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/",
          "number": {
            "pattern": "r:/(^|[^\\w$])(?:NaN|Infinity|0[bB][01]+(?:_[01]+)*n?|0[oO][0-7]+(?:_[0-7]+)*n?|0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?|\\d+(?:_\\d+)*n|(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?)(?![\\w$])/",
            "lookbehind": true
          },
          "literal-property": {
            "pattern": "r:/((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m",
            "lookbehind": true,
            "alias": "s:property"
          },
          "operator": "r:/--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/",
          "punctuation": "r:/[{}[\\];(),.:]/"
        },
        "alias": "s:language-javascript"
      }
    }
  },
  "keyword": {
    "pattern": "r:/(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m",
    "lookbehind": true
  },
  "punctuation": "r:/[{}]/"
}