{
  "comment": {
    "pattern": "r:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#)[^\\r\\n]*)/",
    "lookbehind": true
  },
  "string": {
    "pattern": "r:/(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/",
    "greedy": true
  },
  "class-name": {
    "pattern": "r:/(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/",
    "lookbehind": true,
    "inside": {
      "punctuation": "r:/[.\\\\]/"
    }
  },
  "keyword": "r:/\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:bool|date|float|int|list|number|string)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/",
  "boolean": "r:/\\b(?:false|true)\\b/i",
  "function": "r:/\\$?\\b(?!\\d)\\w+(?=\\()/",
  "number": "r:/\\b(?:0b[01]+|0x(?:[\\da-f]*\\.)?[\\da-fp\\-]+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e\\d+)?[df]|(?:\\d+(?:\\.\\d+)?|\\.\\d+))\\b/i",
  "operator": {
    "pattern": "r:/(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/",
    "lookbehind": true
  },
  "punctuation": "r:/[{}[\\];(),.:]/",
  "variable": "r:/\\$(?!\\d)\\w+\\b/"
}