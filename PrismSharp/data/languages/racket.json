{
  "comment": "r:/;[^\\r\\n]*|#;\\s*(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\[(?:[^\\[\\]]|\\[[^\\[\\]]*\\])*\\])|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/",
  "lang": {
    "pattern": "r:/^#lang[^\\r\\n]+/m",
    "greedy": true,
    "alias": "s:keyword"
  },
  "string": {
    "pattern": "r:/\"(?:[^\"\\\\]|\\\\[^\\r\\n])*\"/",
    "greedy": true
  },
  "symbol": {
    "pattern": "r:/'[^()\\[\\]#'\\s]+/",
    "greedy": true
  },
  "char": {
    "pattern": "r:/#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\S)/",
    "greedy": true
  },
  "lambda-parameter": {
    "pattern": "r:/([(\\[]lambda\\s+[(\\[])[^()\\[\\]'\\s]+/",
    "lookbehind": true
  },
  "keyword": {
    "pattern": "r:/((?:^|[^'`#])[(\\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|except|export|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\[\\]\\s]|(?:(?=\\r$)|$))/",
    "lookbehind": true
  },
  "builtin": {
    "pattern": "r:/((?:^|[^'`#])[(\\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\[\\]\\s]|(?:(?=\\r$)|$))/",
    "lookbehind": true
  },
  "operator": {
    "pattern": "r:/((?:^|[^'`#])[(\\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\\[\\]\\s]|(?:(?=\\r$)|$))/",
    "lookbehind": true
  },
  "number": {
    "pattern": "r:/(^|[()\\[\\]\\s])(?:(?:(?:#d(?:#[ei])?|#[ei](?:#d)?)?(?:(?:[+-]?(?:\\d+(?:\\/\\d+)|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[esfdl][+-]?\\d+)?)|[+-](?:inf|nan)\\.0)(?:@(?:[+-]?(?:\\d+(?:\\/\\d+)|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[esfdl][+-]?\\d+)?)|[+-](?:inf|nan)\\.0)|(?:[+-](?:(?:\\d+(?:\\/\\d+)|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[esfdl][+-]?\\d+)?)|(?:inf|nan)\\.0)?i))?|(?:[+-](?:(?:\\d+(?:\\/\\d+)|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[esfdl][+-]?\\d+)?)|(?:inf|nan)\\.0)?i)))|(?:#[box](?:#[ei])?|(?:#[ei])?#[box](?:(?:[+-]?(?:[0-9a-f]+(?:\\/[0-9a-f]+)?)|[+-](?:inf|nan)\\.0)(?:@(?:[+-]?(?:[0-9a-f]+(?:\\/[0-9a-f]+)?)|[+-](?:inf|nan)\\.0)|(?:[+-](?:(?:[0-9a-f]+(?:\\/[0-9a-f]+)?)|(?:inf|nan)\\.0)?i))?|(?:[+-](?:(?:[0-9a-f]+(?:\\/[0-9a-f]+)?)|(?:inf|nan)\\.0)?i))))(?=[()\\[\\]\\s]|(?:(?=\\r$)|$))/i",
    "lookbehind": true
  },
  "boolean": {
    "pattern": "r:/(^|[()\\[\\]\\s])#(?:[ft]|false|true)(?=[()\\[\\]\\s]|(?:(?=\\r$)|$))/",
    "lookbehind": true
  },
  "function": {
    "pattern": "r:/((?:^|[^'`#])[(\\[])(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\[^\\r\\n])*\\|)(?=[()\\[\\]\\s]|(?:(?=\\r$)|$))/",
    "lookbehind": true
  },
  "identifier": {
    "pattern": "r:/(^|[()\\[\\]\\s])\\|(?:[^\\\\|]|\\\\[^\\r\\n])*\\|(?=[()\\[\\]\\s]|(?:(?=\\r$)|$))/",
    "lookbehind": true,
    "greedy": true
  },
  "punctuation": "r:/[()\\[\\]']/"
}