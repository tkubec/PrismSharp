{
  "comment": {
    "pattern": "r:/(^|[^\\\\:])(?:\\/\\/[^\\r\\n]*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/",
    "lookbehind": true,
    "greedy": true
  },
  "string-literal": [
    {
      "pattern": "r:/(^|[^\"#])(?:\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"|\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\")(?![\"#])/",
      "lookbehind": true,
      "greedy": true,
      "inside": {
        "interpolation": {
          "pattern": "r:/(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/",
          "lookbehind": true,
          "inside": "s:[Circular ~]"
        },
        "interpolation-punctuation": {
          "pattern": "r:/^\\)|\\\\\\((?:(?=\\r$)|$)/",
          "alias": "s:punctuation"
        },
        "punctuation": "r:/\\\\(?=[\\r\\n])/",
        "string": "r:/[\\s\\S]+/"
      }
    },
    {
      "pattern": "r:/(^|[^\"#])(#+)(?:\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"|\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\")\\2/",
      "lookbehind": true,
      "greedy": true,
      "inside": {
        "interpolation": {
          "pattern": "r:/(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/",
          "lookbehind": true,
          "inside": "s:[Circular ~]"
        },
        "interpolation-punctuation": {
          "pattern": "r:/^\\)|\\\\#+\\((?:(?=\\r$)|$)/",
          "alias": "s:punctuation"
        },
        "string": "r:/[\\s\\S]+/"
      }
    }
  ],
  "directive": {
    "pattern": "r:/#(?:(?:elseif|if)\\b(?:[ \t]*(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?)+|(?:else|endif)\\b)/",
    "alias": "s:property",
    "inside": {
      "directive-name": "r:/^#\\w+/",
      "boolean": "r:/\\b(?:false|true)\\b/",
      "number": "r:/\\b\\d+(?:\\.\\d+)*\\b/",
      "operator": "r:/!|&&|\\|\\||[<>]=?/",
      "punctuation": "r:/[(),]/"
    }
  },
  "literal": {
    "pattern": "r:/#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/",
    "alias": "s:constant"
  },
  "other-directive": {
    "pattern": "r:/#\\w+\\b/",
    "alias": "s:property"
  },
  "attribute": {
    "pattern": "r:/@\\w+/",
    "alias": "s:atrule"
  },
  "function-definition": {
    "pattern": "r:/(\\bfunc\\s+)\\w+/",
    "lookbehind": true,
    "alias": "s:function"
  },
  "label": {
    "pattern": "r:/\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/",
    "lookbehind": true,
    "alias": "s:important"
  },
  "keyword": "r:/\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/",
  "boolean": "r:/\\b(?:false|true)\\b/",
  "nil": {
    "pattern": "r:/\\bnil\\b/",
    "alias": "s:constant"
  },
  "short-argument": "r:/\\$\\d+\\b/",
  "omit": {
    "pattern": "r:/\\b_\\b/",
    "alias": "s:keyword"
  },
  "number": "r:/\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i",
  "class-name": "r:/\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/",
  "function": "r:/\\b[a-z_]\\w*(?=\\s*\\()/i",
  "constant": "r:/\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/",
  "operator": "r:/[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/",
  "punctuation": "r:/[{}[\\]();,.:\\\\]/"
}