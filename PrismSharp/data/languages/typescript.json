{
  "comment": [
    {
      "pattern": "r:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|(?:(?=\\r$)|$))/",
      "lookbehind": true,
      "greedy": true
    },
    {
      "pattern": "r:/(^|[^\\\\:])\\/\\/[^\\r\\n]*/",
      "lookbehind": true,
      "greedy": true
    }
  ],
  "hashbang": {
    "pattern": "r:/^#![^\\r\\n]*/",
    "greedy": true,
    "alias": "s:comment"
  },
  "template-string": {
    "pattern": "r:/`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/",
    "greedy": true,
    "inside": {
      "template-punctuation": {
        "pattern": "r:/^`|`(?:(?=\\r$)|$)/",
        "alias": "s:string"
      },
      "interpolation": {
        "pattern": "r:/((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/",
        "lookbehind": true,
        "inside": {
          "interpolation-punctuation": {
            "pattern": "r:/^\\$\\{|\\}(?:(?=\\r$)|$)/",
            "alias": "s:punctuation"
          },
          "rest": "s:[Circular ~]"
        }
      },
      "string": "r:/[\\s\\S]+/"
    }
  },
  "string-property": {
    "pattern": "r:/((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m",
    "lookbehind": true,
    "greedy": true,
    "alias": "s:property"
  },
  "string": {
    "pattern": "r:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/",
    "greedy": true
  },
  "class-name": {
    "pattern": "r:/(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/",
    "lookbehind": true,
    "greedy": true,
    "inside": {
      "comment": [
        {
          "pattern": "r:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|(?:(?=\\r$)|$))/",
          "lookbehind": true,
          "greedy": true
        },
        {
          "pattern": "r:/(^|[^\\\\:])\\/\\/[^\\r\\n]*/",
          "lookbehind": true,
          "greedy": true
        }
      ],
      "hashbang": {
        "pattern": "r:/^#![^\\r\\n]*/",
        "greedy": true,
        "alias": "s:comment"
      },
      "template-string": {
        "pattern": "r:/`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/",
        "greedy": true,
        "inside": {
          "template-punctuation": {
            "pattern": "r:/^`|`(?:(?=\\r$)|$)/",
            "alias": "s:string"
          },
          "interpolation": {
            "pattern": "r:/((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/",
            "lookbehind": true,
            "inside": {
              "interpolation-punctuation": {
                "pattern": "r:/^\\$\\{|\\}(?:(?=\\r$)|$)/",
                "alias": "s:punctuation"
              },
              "rest": "s:[Circular ~.class-name.inside]"
            }
          },
          "string": "r:/[\\s\\S]+/"
        }
      },
      "string-property": {
        "pattern": "r:/((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m",
        "lookbehind": true,
        "greedy": true,
        "alias": "s:property"
      },
      "string": {
        "pattern": "r:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/",
        "greedy": true
      },
      "regex": {
        "pattern": "r:/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\[^\\r\\n])*\\]|\\\\[^\\r\\n]|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:(?:(?=\\r$)|$)|[\\r\\n,.;:})\\]]|\\/\\/))/",
        "lookbehind": true,
        "greedy": true,
        "inside": {
          "regex-source": {
            "pattern": "r:/^(\\/)[\\s\\S]+(?=\\/[a-z]*(?:(?=\\r$)|$))/",
            "lookbehind": true,
            "alias": "s:language-regex"
          },
          "regex-delimiter": "r:/^\\/|\\/(?:(?=\\r$)|$)/",
          "regex-flags": "r:/^[a-z]+(?:(?=\\r$)|$)/"
        }
      },
      "function-variable": {
        "pattern": "r:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/",
        "alias": "s:function"
      },
      "constant": "r:/\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/",
      "keyword": [
        {
          "pattern": "r:/((?:^|\\})\\s*)catch\\b/",
          "lookbehind": true
        },
        {
          "pattern": "r:/(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|(?:(?=\\r$)|$)))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|(?:(?=\\r$)|$)))|for|from(?=\\s*(?:['\"]|(?:(?=\\r$)|$)))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|(?:(?=\\r$)|$)))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/",
          "lookbehind": true
        },
        "r:/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/",
        "r:/\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|(?:(?=\\r$)|$)))/",
        "r:/\\btype\\b(?=\\s*(?:[\\{*]|(?:(?=\\r$)|$)))/"
      ],
      "boolean": "r:/\\b(?:false|true)\\b/",
      "function": "r:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/",
      "number": {
        "pattern": "r:/(^|[^\\w$])(?:NaN|Infinity|0[bB][01]+(?:_[01]+)*n?|0[oO][0-7]+(?:_[0-7]+)*n?|0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?|\\d+(?:_\\d+)*n|(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?)(?![\\w$])/",
        "lookbehind": true
      },
      "operator": "r:/--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/",
      "punctuation": "r:/[{}[\\];(),.:]/",
      "builtin": "r:/\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/"
    }
  },
  "regex": {
    "pattern": "r:/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\[^\\r\\n])*\\]|\\\\[^\\r\\n]|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:(?:(?=\\r$)|$)|[\\r\\n,.;:})\\]]|\\/\\/))/",
    "lookbehind": true,
    "greedy": true,
    "inside": {
      "regex-source": {
        "pattern": "r:/^(\\/)[\\s\\S]+(?=\\/[a-z]*(?:(?=\\r$)|$))/",
        "lookbehind": true,
        "alias": "s:language-regex"
      },
      "regex-delimiter": "r:/^\\/|\\/(?:(?=\\r$)|$)/",
      "regex-flags": "r:/^[a-z]+(?:(?=\\r$)|$)/"
    }
  },
  "function-variable": {
    "pattern": "r:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/",
    "alias": "s:function"
  },
  "constant": "r:/\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/",
  "keyword": [
    {
      "pattern": "r:/((?:^|\\})\\s*)catch\\b/",
      "lookbehind": true
    },
    {
      "pattern": "r:/(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|(?:(?=\\r$)|$)))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|(?:(?=\\r$)|$)))|for|from(?=\\s*(?:['\"]|(?:(?=\\r$)|$)))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|(?:(?=\\r$)|$)))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/",
      "lookbehind": true
    },
    "r:/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/",
    "r:/\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|(?:(?=\\r$)|$)))/",
    "r:/\\btype\\b(?=\\s*(?:[\\{*]|(?:(?=\\r$)|$)))/"
  ],
  "boolean": "r:/\\b(?:false|true)\\b/",
  "decorator": {
    "pattern": "r:/@[$\\w\\xA0-\\uFFFF]+/",
    "inside": {
      "at": {
        "pattern": "r:/^@/",
        "alias": "s:operator"
      },
      "function": "r:/^[\\s\\S]+/"
    }
  },
  "generic-function": {
    "pattern": "r:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/",
    "greedy": true,
    "inside": {
      "function": "r:/^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/",
      "generic": {
        "pattern": "r:/<[\\s\\S]+/",
        "alias": "s:class-name",
        "inside": {
          "comment": [
            {
              "pattern": "r:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|(?:(?=\\r$)|$))/",
              "lookbehind": true,
              "greedy": true
            },
            {
              "pattern": "r:/(^|[^\\\\:])\\/\\/[^\\r\\n]*/",
              "lookbehind": true,
              "greedy": true
            }
          ],
          "hashbang": {
            "pattern": "r:/^#![^\\r\\n]*/",
            "greedy": true,
            "alias": "s:comment"
          },
          "template-string": {
            "pattern": "r:/`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/",
            "greedy": true,
            "inside": {
              "template-punctuation": {
                "pattern": "r:/^`|`(?:(?=\\r$)|$)/",
                "alias": "s:string"
              },
              "interpolation": {
                "pattern": "r:/((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/",
                "lookbehind": true,
                "inside": {
                  "interpolation-punctuation": {
                    "pattern": "r:/^\\$\\{|\\}(?:(?=\\r$)|$)/",
                    "alias": "s:punctuation"
                  },
                  "rest": "s:[Circular ~.generic-function.inside.generic.inside]"
                }
              },
              "string": "r:/[\\s\\S]+/"
            }
          },
          "string-property": {
            "pattern": "r:/((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m",
            "lookbehind": true,
            "greedy": true,
            "alias": "s:property"
          },
          "string": {
            "pattern": "r:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/",
            "greedy": true
          },
          "regex": {
            "pattern": "r:/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\[^\\r\\n])*\\]|\\\\[^\\r\\n]|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:(?:(?=\\r$)|$)|[\\r\\n,.;:})\\]]|\\/\\/))/",
            "lookbehind": true,
            "greedy": true,
            "inside": {
              "regex-source": {
                "pattern": "r:/^(\\/)[\\s\\S]+(?=\\/[a-z]*(?:(?=\\r$)|$))/",
                "lookbehind": true,
                "alias": "s:language-regex"
              },
              "regex-delimiter": "r:/^\\/|\\/(?:(?=\\r$)|$)/",
              "regex-flags": "r:/^[a-z]+(?:(?=\\r$)|$)/"
            }
          },
          "function-variable": {
            "pattern": "r:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/",
            "alias": "s:function"
          },
          "constant": "r:/\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/",
          "keyword": [
            {
              "pattern": "r:/((?:^|\\})\\s*)catch\\b/",
              "lookbehind": true
            },
            {
              "pattern": "r:/(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|(?:(?=\\r$)|$)))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|(?:(?=\\r$)|$)))|for|from(?=\\s*(?:['\"]|(?:(?=\\r$)|$)))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|(?:(?=\\r$)|$)))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/",
              "lookbehind": true
            },
            "r:/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/",
            "r:/\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|(?:(?=\\r$)|$)))/",
            "r:/\\btype\\b(?=\\s*(?:[\\{*]|(?:(?=\\r$)|$)))/"
          ],
          "boolean": "r:/\\b(?:false|true)\\b/",
          "function": "r:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/",
          "number": {
            "pattern": "r:/(^|[^\\w$])(?:NaN|Infinity|0[bB][01]+(?:_[01]+)*n?|0[oO][0-7]+(?:_[0-7]+)*n?|0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?|\\d+(?:_\\d+)*n|(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?)(?![\\w$])/",
            "lookbehind": true
          },
          "operator": "r:/--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/",
          "punctuation": "r:/[{}[\\];(),.:]/",
          "builtin": "r:/\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/"
        }
      }
    }
  },
  "function": "r:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/",
  "number": {
    "pattern": "r:/(^|[^\\w$])(?:NaN|Infinity|0[bB][01]+(?:_[01]+)*n?|0[oO][0-7]+(?:_[0-7]+)*n?|0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?|\\d+(?:_\\d+)*n|(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?)(?![\\w$])/",
    "lookbehind": true
  },
  "operator": "r:/--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/",
  "punctuation": "r:/[{}[\\];(),.:]/",
  "builtin": "r:/\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/"
}