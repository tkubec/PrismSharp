`include "internal_defines.vh"

//*****************************************************************************
// memory_decoder: a custom module used to handle memory transactions
//*****************************************************************************
//
// out_mem (output) - The output to memory
// out_reg (output) - The output to the register file
// mem_we  (output) - Which byte in the word to write too
// mem_in  (input)  - The input from memory
// addr_in (input)  - The lowest 2 bits of byte offset to store in memory
// data_in (input)  - The input from the register file to be stored
// l_bit   (input)  - The load bit signal (control)
// b_bit   (input)  - The byte bit signal (control)
//
module memory_decoder(out_mem, out_reg, mem_in, data_in, l_bit, b_bit, addr_in,
                      mem_we);

  output reg  [31:0]  out_mem, out_reg;
  output reg  [3:0]   mem_we;
  input       [31:0]  mem_in, data_in;
  input       [1:0]   addr_in;
  input               l_bit, b_bit;

  always_comb begin
    mem_we = 4'b0000;     // dont write memory by default
    if (l_bit == 1) begin // ldr and ldrb
      out_mem = mem_in;   // dont change memory!
      if (b_bit == 1) begin
        /* figure out which byte to load from memory */
        case (addr_in)
          2'b00: out_reg = {24'b00, mem_in[7:0]};
          2'b01: out_reg = {24'b00, mem_in[15:8]};
          2'b10: out_reg = {24'b00, mem_in[23:16]};
          2'b11: out_reg = {24'b00, mem_in[31:24]};
        endcase
      end
      else begin
        out_reg = mem_in;
      end
    end
    else begin            // str and strb
      out_reg = `UNKNOWN; // We are not reading from mem
      if (b_bit == 1) begin
        /* figure out which byte to write to in memory */
        out_mem = {4{data_in[7:0]}};
        case (addr_in)
          2'b00: mem_we = 4'b1000;
          2'b01: mem_we = 4'b0100;
          2'b10: mem_we = 4'b0010;
          2'b11: mem_we = 4'b0001;
        endcase
      end
      else begin
        mem_we = 4'b1111; // write to all channels
        out_mem = data_in;
      end
    end
  end

endmodule