alignas
alignof
asm
auto
bool
break
case
catch
char
char8_t
char16_t
char32_t
class;
compl
concept
const
consteval
constexpr
constinit
const_cast
continue
co_await
co_return
co_yield
decltype
default
delete
do
double
dynamic_cast
else
enum;
explicit
export
extern
final
float
for
friend
goto
if
import;
inline
int
long
module;
mutable
namespace
new
noexcept
nullptr
operator
override
private
protected
public
register
reinterpret_cast
requires
return
short
signed
sizeof
static
static_assert
static_cast
struct;
switch
template
this
thread_local
throw
try
typedef
typeid
typename
union
unsigned
using
virtual
void
volatile
wchar_t
while
int8_t
int16_t
int32_t
int64_t
uint8_t
uint16_t
uint32_t
uint64_t
----------------------------------------------------
<span class="token keyword">alignas</span>
<span class="token keyword">alignof</span>
<span class="token keyword">asm</span>
<span class="token keyword">auto</span>
<span class="token keyword">bool</span>
<span class="token keyword">break</span>
<span class="token keyword">case</span>
<span class="token keyword">catch</span>
<span class="token keyword">char</span>
<span class="token keyword">char8_t</span>
<span class="token keyword">char16_t</span>
<span class="token keyword">char32_t</span>
<span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token keyword">compl</span>
<span class="token keyword">concept</span>
<span class="token keyword">const</span>
<span class="token keyword">consteval</span>
<span class="token keyword">constexpr</span>
<span class="token keyword">constinit</span>
<span class="token keyword">const_cast</span>
<span class="token keyword">continue</span>
<span class="token keyword">co_await</span>
<span class="token keyword">co_return</span>
<span class="token keyword">co_yield</span>
<span class="token keyword">decltype</span>
<span class="token keyword">default</span>
<span class="token keyword">delete</span>
<span class="token keyword">do</span>
<span class="token keyword">double</span>
<span class="token keyword">dynamic_cast</span>
<span class="token keyword">else</span>
<span class="token keyword">enum</span><span class="token punctuation">;</span>
<span class="token keyword">explicit</span>
<span class="token keyword">export</span>
<span class="token keyword">extern</span>
<span class="token keyword">final</span>
<span class="token keyword">float</span>
<span class="token keyword">for</span>
<span class="token keyword">friend</span>
<span class="token keyword">goto</span>
<span class="token keyword">if</span>
<span class="token keyword">import</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span>
<span class="token keyword">int</span>
<span class="token keyword">long</span>
<span class="token keyword">module</span><span class="token punctuation">;</span>
<span class="token keyword">mutable</span>
<span class="token keyword">namespace</span>
<span class="token keyword">new</span>
<span class="token keyword">noexcept</span>
<span class="token keyword">nullptr</span>
<span class="token keyword">operator</span>
<span class="token keyword">override</span>
<span class="token keyword">private</span>
<span class="token keyword">protected</span>
<span class="token keyword">public</span>
<span class="token keyword">register</span>
<span class="token keyword">reinterpret_cast</span>
<span class="token keyword">requires</span>
<span class="token keyword">return</span>
<span class="token keyword">short</span>
<span class="token keyword">signed</span>
<span class="token keyword">sizeof</span>
<span class="token keyword">static</span>
<span class="token keyword">static_assert</span>
<span class="token keyword">static_cast</span>
<span class="token keyword">struct</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span>
<span class="token keyword">template</span>
<span class="token keyword">this</span>
<span class="token keyword">thread_local</span>
<span class="token keyword">throw</span>
<span class="token keyword">try</span>
<span class="token keyword">typedef</span>
<span class="token keyword">typeid</span>
<span class="token keyword">typename</span>
<span class="token keyword">union</span>
<span class="token keyword">unsigned</span>
<span class="token keyword">using</span>
<span class="token keyword">virtual</span>
<span class="token keyword">void</span>
<span class="token keyword">volatile</span>
<span class="token keyword">wchar_t</span>
<span class="token keyword">while</span>
<span class="token keyword">int8_t</span>
<span class="token keyword">int16_t</span>
<span class="token keyword">int32_t</span>
<span class="token keyword">int64_t</span>
<span class="token keyword">uint8_t</span>
<span class="token keyword">uint16_t</span>
<span class="token keyword">uint32_t</span>
<span class="token keyword">uint64_t</span>

----------------------------------------------------