abstract
add
alias
and
as
ascending
async
await
base
bool
break
by
byte
case
catch
char
checked
class;
const
continue
decimal
default
delegate
descending
do
double
dynamic
else
enum;
event
explicit
extern
finally
fixed
float
for
foreach
from foo;
get
global
goto
group
if
implicit
in
init;
int;
interface;
internal
into
is
join
let
lock
long
nameof
namespace;
new;
not
notnull
null
object
on
operator
or
orderby
out
override
params
partial
private
protected
public
readonly
record;
ref
remove
return
sbyte
sealed
select
set
short
sizeof
stackalloc
static
string;
struct;
switch
this
throw
try
typeof
uint
ulong
unchecked
unmanaged
unsafe
ushort
using
value
var
virtual
void
volatile
when
where;
while
yield

// very contextual keywords:
Person person2 = person1 with { FirstName = "John" };
----------------------------------------------------
<span class="token keyword">abstract</span>
<span class="token keyword">add</span>
<span class="token keyword">alias</span>
<span class="token keyword">and</span>
<span class="token keyword">as</span>
<span class="token keyword">ascending</span>
<span class="token keyword">async</span>
<span class="token keyword">await</span>
<span class="token keyword">base</span>
<span class="token keyword">bool</span>
<span class="token keyword">break</span>
<span class="token keyword">by</span>
<span class="token keyword">byte</span>
<span class="token keyword">case</span>
<span class="token keyword">catch</span>
<span class="token keyword">char</span>
<span class="token keyword">checked</span>
<span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token keyword">const</span>
<span class="token keyword">continue</span>
<span class="token keyword">decimal</span>
<span class="token keyword">default</span>
<span class="token keyword">delegate</span>
<span class="token keyword">descending</span>
<span class="token keyword">do</span>
<span class="token keyword">double</span>
<span class="token keyword">dynamic</span>
<span class="token keyword">else</span>
<span class="token keyword">enum</span><span class="token punctuation">;</span>
<span class="token keyword">event</span>
<span class="token keyword">explicit</span>
<span class="token keyword">extern</span>
<span class="token keyword">finally</span>
<span class="token keyword">fixed</span>
<span class="token keyword">float</span>
<span class="token keyword">for</span>
<span class="token keyword">foreach</span>
<span class="token keyword">from</span> foo<span class="token punctuation">;</span>
<span class="token keyword">get</span>
<span class="token keyword">global</span>
<span class="token keyword">goto</span>
<span class="token keyword">group</span>
<span class="token keyword">if</span>
<span class="token keyword">implicit</span>
<span class="token keyword">in</span>
<span class="token keyword">init</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span><span class="token punctuation">;</span>
<span class="token keyword">internal</span>
<span class="token keyword">into</span>
<span class="token keyword">is</span>
<span class="token keyword">join</span>
<span class="token keyword">let</span>
<span class="token keyword">lock</span>
<span class="token keyword">long</span>
<span class="token keyword">nameof</span>
<span class="token keyword">namespace</span><span class="token punctuation">;</span>
<span class="token keyword">new</span><span class="token punctuation">;</span>
<span class="token keyword">not</span>
<span class="token keyword">notnull</span>
<span class="token keyword">null</span>
<span class="token keyword">object</span>
<span class="token keyword">on</span>
<span class="token keyword">operator</span>
<span class="token keyword">or</span>
<span class="token keyword">orderby</span>
<span class="token keyword">out</span>
<span class="token keyword">override</span>
<span class="token keyword">params</span>
<span class="token keyword">partial</span>
<span class="token keyword">private</span>
<span class="token keyword">protected</span>
<span class="token keyword">public</span>
<span class="token keyword">readonly</span>
<span class="token keyword">record</span><span class="token punctuation">;</span>
<span class="token keyword">ref</span>
<span class="token keyword">remove</span>
<span class="token keyword">return</span>
<span class="token keyword">sbyte</span>
<span class="token keyword">sealed</span>
<span class="token keyword">select</span>
<span class="token keyword">set</span>
<span class="token keyword">short</span>
<span class="token keyword">sizeof</span>
<span class="token keyword">stackalloc</span>
<span class="token keyword">static</span>
<span class="token keyword">string</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span>
<span class="token keyword">this</span>
<span class="token keyword">throw</span>
<span class="token keyword">try</span>
<span class="token keyword">typeof</span>
<span class="token keyword">uint</span>
<span class="token keyword">ulong</span>
<span class="token keyword">unchecked</span>
<span class="token keyword">unmanaged</span>
<span class="token keyword">unsafe</span>
<span class="token keyword">ushort</span>
<span class="token keyword">using</span>
<span class="token keyword">value</span>
<span class="token keyword">var</span>
<span class="token keyword">virtual</span>
<span class="token keyword">void</span>
<span class="token keyword">volatile</span>
<span class="token keyword">when</span>
<span class="token keyword">where</span><span class="token punctuation">;</span>
<span class="token keyword">while</span>
<span class="token keyword">yield</span>

<span class="token comment">// very contextual keywords:</span>
<span class="token class-name">Person</span> person2 <span class="token operator">=</span> person1 <span class="token keyword">with</span> <span class="token punctuation">{</span> FirstName <span class="token operator">=</span> <span class="token string">"John"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

----------------------------------------------------