case class data deriving
do else if in infixl
infixr instance let
module newtype of
primitive then type where
----------------------------------------------------
<span class="token keyword">case</span> <span class="token keyword">class</span> <span class="token keyword">data</span> <span class="token keyword">deriving</span>
<span class="token keyword">do</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">in</span> <span class="token keyword">infixl</span>
<span class="token keyword">infixr</span> <span class="token keyword">instance</span> <span class="token keyword">let</span>
<span class="token keyword">module</span> <span class="token keyword">newtype</span> <span class="token keyword">of</span>
<span class="token keyword">primitive</span> <span class="token keyword">then</span> <span class="token keyword">type</span> <span class="token keyword">where</span>

----------------------------------------------------