any
Array
boolean
break
case
catch
class;
const
constructor
continue
debugger
declare
default
delete
do
else
enum
export
extends;
false
finally
for
from
function
get
if
implements;
import
in
instanceof;
interface;
let
module
new;
null
number
package
private
protected
public
return
set
static
string
super
switch
this
throw
true
try
typeof
var
void
while
with
yield
----------------------------------------------------
<span class="token keyword">any</span>
<span class="token keyword">Array</span>
<span class="token keyword">boolean</span>
<span class="token keyword">break</span>
<span class="token keyword">case</span>
<span class="token keyword">catch</span>
<span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token keyword">const</span>
<span class="token keyword">constructor</span>
<span class="token keyword">continue</span>
<span class="token keyword">debugger</span>
<span class="token keyword">declare</span>
<span class="token keyword">default</span>
<span class="token keyword">delete</span>
<span class="token keyword">do</span>
<span class="token keyword">else</span>
<span class="token keyword">enum</span>
<span class="token keyword">export</span>
<span class="token keyword">extends</span><span class="token punctuation">;</span>
<span class="token keyword">false</span>
<span class="token keyword">finally</span>
<span class="token keyword">for</span>
<span class="token keyword">from</span>
<span class="token keyword">function</span>
<span class="token keyword">get</span>
<span class="token keyword">if</span>
<span class="token keyword">implements</span><span class="token punctuation">;</span>
<span class="token keyword">import</span>
<span class="token keyword">in</span>
<span class="token keyword">instanceof</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span><span class="token punctuation">;</span>
<span class="token keyword">let</span>
<span class="token keyword">module</span>
<span class="token keyword">new</span><span class="token punctuation">;</span>
<span class="token keyword">null</span>
<span class="token keyword">number</span>
<span class="token keyword">package</span>
<span class="token keyword">private</span>
<span class="token keyword">protected</span>
<span class="token keyword">public</span>
<span class="token keyword">return</span>
<span class="token keyword">set</span>
<span class="token keyword">static</span>
<span class="token keyword">string</span>
<span class="token keyword">super</span>
<span class="token keyword">switch</span>
<span class="token keyword">this</span>
<span class="token keyword">throw</span>
<span class="token keyword">true</span>
<span class="token keyword">try</span>
<span class="token keyword">typeof</span>
<span class="token keyword">var</span>
<span class="token keyword">void</span>
<span class="token keyword">while</span>
<span class="token keyword">with</span>
<span class="token keyword">yield</span>

----------------------------------------------------