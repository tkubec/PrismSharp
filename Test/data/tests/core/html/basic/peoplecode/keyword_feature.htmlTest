abstract
alias
as;
catch;
class;
component;
constant;
create;
declare
else
end-class
end-evaluate
end-for
end-function
end-get
end-if
end-method
end-set
end-try
end-while
evaluate
extends;
for
function
get
global;
implements;
import
instance;
if
library
local;
method
null
of;
out
peopleCode
private
program
property;
protected
readonly
ref
repeat
return
returns;
set
step
then
throw
to
try
until
value
when
when-other
while
----------------------------------------------------
<span class="token keyword">abstract</span>
<span class="token keyword">alias</span>
<span class="token keyword">as</span><span class="token punctuation">;</span>
<span class="token keyword">catch</span><span class="token punctuation">;</span>
<span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token keyword">component</span><span class="token punctuation">;</span>
<span class="token keyword">constant</span><span class="token punctuation">;</span>
<span class="token keyword">create</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span>
<span class="token keyword">else</span>
<span class="token keyword">end-class</span>
<span class="token keyword">end-evaluate</span>
<span class="token keyword">end-for</span>
<span class="token keyword">end-function</span>
<span class="token keyword">end-get</span>
<span class="token keyword">end-if</span>
<span class="token keyword">end-method</span>
<span class="token keyword">end-set</span>
<span class="token keyword">end-try</span>
<span class="token keyword">end-while</span>
<span class="token keyword">evaluate</span>
<span class="token keyword">extends</span><span class="token punctuation">;</span>
<span class="token keyword">for</span>
<span class="token keyword">function</span>
<span class="token function-definition function">get</span>
<span class="token keyword">global</span><span class="token punctuation">;</span>
<span class="token keyword">implements</span><span class="token punctuation">;</span>
<span class="token keyword">import</span>
<span class="token keyword">instance</span><span class="token punctuation">;</span>
<span class="token keyword">if</span>
<span class="token keyword">library</span>
<span class="token keyword">local</span><span class="token punctuation">;</span>
<span class="token keyword">method</span>
<span class="token function-definition function">null</span>
<span class="token keyword">of</span><span class="token punctuation">;</span>
<span class="token keyword">out</span>
<span class="token keyword">peopleCode</span>
<span class="token keyword">private</span>
<span class="token keyword">program</span>
<span class="token keyword">property</span><span class="token punctuation">;</span>
<span class="token keyword">protected</span>
<span class="token keyword">readonly</span>
<span class="token keyword">ref</span>
<span class="token keyword">repeat</span>
<span class="token keyword">return</span>
<span class="token keyword">returns</span><span class="token punctuation">;</span>
<span class="token keyword">set</span>
<span class="token keyword">step</span>
<span class="token keyword">then</span>
<span class="token keyword">throw</span>
<span class="token keyword">to</span>
<span class="token keyword">try</span>
<span class="token keyword">until</span>
<span class="token keyword">value</span>
<span class="token keyword">when</span>
<span class="token keyword">when-other</span>
<span class="token keyword">while</span>

----------------------------------------------------