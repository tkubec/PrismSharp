as assert async await
break class;
continue def;
del elif else
except exec finally
for from global if
import in is lambda
pass print raise return
try while with yield
nonlocal
and not or
match case _:
----------------------------------------------------
<span class="token keyword">as</span> <span class="token keyword">assert</span> <span class="token keyword">async</span> <span class="token keyword">await</span>
<span class="token keyword">break</span> <span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token keyword">continue</span> <span class="token keyword">def</span><span class="token punctuation">;</span>
<span class="token keyword">del</span> <span class="token keyword">elif</span> <span class="token keyword">else</span>
<span class="token keyword">except</span> <span class="token keyword">exec</span> <span class="token keyword">finally</span>
<span class="token keyword">for</span> <span class="token keyword">from</span> <span class="token keyword">global</span> <span class="token keyword">if</span>
<span class="token keyword">import</span> <span class="token keyword">in</span> <span class="token keyword">is</span> <span class="token keyword">lambda</span>
<span class="token keyword">pass</span> <span class="token keyword">print</span> <span class="token keyword">raise</span> <span class="token keyword">return</span>
<span class="token keyword">try</span> <span class="token keyword">while</span> <span class="token keyword">with</span> <span class="token keyword">yield</span>
<span class="token keyword">nonlocal</span>
<span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token keyword">or</span>
<span class="token keyword">match</span> <span class="token keyword">case</span> <span class="token keyword">_</span><span class="token punctuation">:</span>

----------------------------------------------------