<- =>

abstract case catch
class def do else
extends final finally
for forSome if
implicit import; lazy
match new null object
override package private
protected return sealed
self super this throw
trait try type val
var while with yield
----------------------------------------------------
<span class="token keyword">&lt;-</span> <span class="token keyword">=></span>

<span class="token keyword">abstract</span> <span class="token keyword">case</span> <span class="token keyword">catch</span>
<span class="token keyword">class</span> <span class="token keyword">def</span> <span class="token keyword">do</span> <span class="token keyword">else</span>
<span class="token keyword">extends</span> <span class="token keyword">final</span> <span class="token keyword">finally</span>
<span class="token keyword">for</span> <span class="token keyword">forSome</span> <span class="token keyword">if</span>
<span class="token keyword">implicit</span> <span class="token keyword">import</span><span class="token punctuation">;</span> <span class="token keyword">lazy</span>
<span class="token keyword">match</span> <span class="token keyword">new</span> <span class="token keyword">null</span> <span class="token keyword">object</span>
<span class="token keyword">override</span> <span class="token keyword">package</span> <span class="token keyword">private</span>
<span class="token keyword">protected</span> <span class="token keyword">return</span> <span class="token keyword">sealed</span>
<span class="token keyword">self</span> <span class="token keyword">super</span> <span class="token keyword">this</span> <span class="token keyword">throw</span>
<span class="token keyword">trait</span> <span class="token keyword">try</span> <span class="token keyword">type</span> <span class="token keyword">val</span>
<span class="token keyword">var</span> <span class="token keyword">while</span> <span class="token keyword">with</span> <span class="token keyword">yield</span>

----------------------------------------------------