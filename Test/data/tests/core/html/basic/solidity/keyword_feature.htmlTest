_
anonymous
as
assembly
assert
break
calldata
case
constant
constructor
continue
contract;
default
delete
do
else
emit
enum;
event
external
for
from
function
if
import
indexed
inherited
interface;
internal
is
let
library;
mapping
memory
modifier
new;
payable
pragma
private
public
pure
require
return
returns
revert
selfdestruct
solidity
storage
struct;
suicide
switch
this
throw
using;
view
while
----------------------------------------------------
<span class="token keyword">_</span>
<span class="token keyword">anonymous</span>
<span class="token keyword">as</span>
<span class="token keyword">assembly</span>
<span class="token keyword">assert</span>
<span class="token keyword">break</span>
<span class="token keyword">calldata</span>
<span class="token keyword">case</span>
<span class="token keyword">constant</span>
<span class="token keyword">constructor</span>
<span class="token keyword">continue</span>
<span class="token keyword">contract</span><span class="token punctuation">;</span>
<span class="token keyword">default</span>
<span class="token keyword">delete</span>
<span class="token keyword">do</span>
<span class="token keyword">else</span>
<span class="token keyword">emit</span>
<span class="token keyword">enum</span><span class="token punctuation">;</span>
<span class="token keyword">event</span>
<span class="token keyword">external</span>
<span class="token keyword">for</span>
<span class="token keyword">from</span>
<span class="token keyword">function</span>
<span class="token keyword">if</span>
<span class="token keyword">import</span>
<span class="token keyword">indexed</span>
<span class="token keyword">inherited</span>
<span class="token keyword">interface</span><span class="token punctuation">;</span>
<span class="token keyword">internal</span>
<span class="token keyword">is</span>
<span class="token keyword">let</span>
<span class="token keyword">library</span><span class="token punctuation">;</span>
<span class="token keyword">mapping</span>
<span class="token keyword">memory</span>
<span class="token keyword">modifier</span>
<span class="token keyword">new</span><span class="token punctuation">;</span>
<span class="token keyword">payable</span>
<span class="token keyword">pragma</span>
<span class="token keyword">private</span>
<span class="token keyword">public</span>
<span class="token keyword">pure</span>
<span class="token keyword">require</span>
<span class="token keyword">return</span>
<span class="token keyword">returns</span>
<span class="token keyword">revert</span>
<span class="token keyword">selfdestruct</span>
<span class="token keyword">solidity</span>
<span class="token keyword">storage</span>
<span class="token keyword">struct</span><span class="token punctuation">;</span>
<span class="token keyword">suicide</span>
<span class="token keyword">switch</span>
<span class="token keyword">this</span>
<span class="token keyword">throw</span>
<span class="token keyword">using</span><span class="token punctuation">;</span>
<span class="token keyword">view</span>
<span class="token keyword">while</span>

----------------------------------------------------