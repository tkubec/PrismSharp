Any
Protocol
Self
Type
actor
as
assignment
associatedtype
associativity
async
await
break;
case
catch
class;
continue;
convenience
default
defer
deinit
didSet
do
dynamic
else
enum
extension
fallthrough
fileprivate
final
for
func;
get
guard
higherThan
if
import
in
indirect
infix
init
inout
internal
is
isolated
lazy
left
let
lowerThan
mutating
none
nonisolated
nonmutating
open
operator
optional
override
postfix
precedencegroup
prefix
private
protocol
public
repeat
required
rethrows
return
right
safe
self
set
some
static
struct
subscript
super
switch
throw
throws
try
typealias
unowned
unsafe
var
weak
where
while
willSet
----------------------------------------------------
<span class="token keyword">Any</span>
<span class="token keyword">Protocol</span>
<span class="token keyword">Self</span>
<span class="token keyword">Type</span>
<span class="token keyword">actor</span>
<span class="token keyword">as</span>
<span class="token keyword">assignment</span>
<span class="token keyword">associatedtype</span>
<span class="token keyword">associativity</span>
<span class="token keyword">async</span>
<span class="token keyword">await</span>
<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">case</span>
<span class="token keyword">catch</span>
<span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token keyword">convenience</span>
<span class="token keyword">default</span>
<span class="token keyword">defer</span>
<span class="token keyword">deinit</span>
<span class="token keyword">didSet</span>
<span class="token keyword">do</span>
<span class="token keyword">dynamic</span>
<span class="token keyword">else</span>
<span class="token keyword">enum</span>
<span class="token keyword">extension</span>
<span class="token keyword">fallthrough</span>
<span class="token keyword">fileprivate</span>
<span class="token keyword">final</span>
<span class="token keyword">for</span>
<span class="token keyword">func</span><span class="token punctuation">;</span>
<span class="token keyword">get</span>
<span class="token keyword">guard</span>
<span class="token keyword">higherThan</span>
<span class="token keyword">if</span>
<span class="token keyword">import</span>
<span class="token keyword">in</span>
<span class="token keyword">indirect</span>
<span class="token keyword">infix</span>
<span class="token keyword">init</span>
<span class="token keyword">inout</span>
<span class="token keyword">internal</span>
<span class="token keyword">is</span>
<span class="token keyword">isolated</span>
<span class="token keyword">lazy</span>
<span class="token keyword">left</span>
<span class="token keyword">let</span>
<span class="token keyword">lowerThan</span>
<span class="token keyword">mutating</span>
<span class="token keyword">none</span>
<span class="token keyword">nonisolated</span>
<span class="token keyword">nonmutating</span>
<span class="token keyword">open</span>
<span class="token keyword">operator</span>
<span class="token keyword">optional</span>
<span class="token keyword">override</span>
<span class="token keyword">postfix</span>
<span class="token keyword">precedencegroup</span>
<span class="token keyword">prefix</span>
<span class="token keyword">private</span>
<span class="token keyword">protocol</span>
<span class="token keyword">public</span>
<span class="token keyword">repeat</span>
<span class="token keyword">required</span>
<span class="token keyword">rethrows</span>
<span class="token keyword">return</span>
<span class="token keyword">right</span>
<span class="token keyword">safe</span>
<span class="token keyword">self</span>
<span class="token keyword">set</span>
<span class="token keyword">some</span>
<span class="token keyword">static</span>
<span class="token keyword">struct</span>
<span class="token keyword">subscript</span>
<span class="token keyword">super</span>
<span class="token keyword">switch</span>
<span class="token keyword">throw</span>
<span class="token keyword">throws</span>
<span class="token keyword">try</span>
<span class="token keyword">typealias</span>
<span class="token keyword">unowned</span>
<span class="token keyword">unsafe</span>
<span class="token keyword">var</span>
<span class="token keyword">weak</span>
<span class="token keyword">where</span>
<span class="token keyword">while</span>
<span class="token keyword">willSet</span>

----------------------------------------------------