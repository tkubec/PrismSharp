as;
await;
break;
case;
class;
const;
continue;
debugger;
default;
delete;
do;
else;
enum;
export;
extends;
for;
if;
implements;
import;
in;
instanceof;
interface;
let;
new;
null;
of;
package;
private;
protected;
public;
return;
static;
super;
switch;
this;
throw;
try;
typeof;
undefined;
var;
void;
while;
with;
yield;

// contextual keywords

try {} catch {} finally {}
try {} catch (e) {} finally {}
async function (){}
async a => {}
async (a,b,c) => {}
import {} from "foo"
import {} from 'foo'
class { get foo(){} set baz(){} get [value](){} }

// variables, not keywords

const { async, from, to } = bar;
promise.catch(foo).finally(bar);

// TypeScript keywords

abstract;
as;
declare;
implements;
is;
keyof;
readonly;
require;

// contextual keywords

asserts foo;
infer foo;
interface foo;
module foo;
namespace foo;
type foo;

import type { Component } from "react";
import type *, {}
----------------------------------------------------
<span class="token keyword">as</span><span class="token punctuation">;</span>
<span class="token keyword">await</span><span class="token punctuation">;</span>
<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">case</span><span class="token punctuation">;</span>
<span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token keyword">debugger</span><span class="token punctuation">;</span>
<span class="token keyword">default</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span><span class="token punctuation">;</span>
<span class="token keyword">do</span><span class="token punctuation">;</span>
<span class="token keyword">else</span><span class="token punctuation">;</span>
<span class="token keyword">enum</span><span class="token punctuation">;</span>
<span class="token keyword">export</span><span class="token punctuation">;</span>
<span class="token keyword">extends</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">;</span>
<span class="token keyword">implements</span><span class="token punctuation">;</span>
<span class="token keyword">import</span><span class="token punctuation">;</span>
<span class="token keyword">in</span><span class="token punctuation">;</span>
<span class="token keyword">instanceof</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span><span class="token punctuation">;</span>
<span class="token keyword">let</span><span class="token punctuation">;</span>
<span class="token keyword">new</span><span class="token punctuation">;</span>
<span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">of</span><span class="token punctuation">;</span>
<span class="token keyword">package</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token punctuation">;</span>
<span class="token keyword">protected</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token punctuation">;</span>
<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token keyword">static</span><span class="token punctuation">;</span>
<span class="token keyword">super</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token keyword">throw</span><span class="token punctuation">;</span>
<span class="token keyword">try</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span><span class="token punctuation">;</span>
<span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token keyword">var</span><span class="token punctuation">;</span>
<span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">;</span>
<span class="token keyword">with</span><span class="token punctuation">;</span>
<span class="token keyword">yield</span><span class="token punctuation">;</span>

<span class="token comment">// contextual keywords</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">async</span> a <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"foo"</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'foo'</span>
<span class="token keyword">class</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">set</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">get</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>

<span class="token comment">// variables, not keywords</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> async<span class="token punctuation">,</span> from<span class="token punctuation">,</span> to <span class="token punctuation">}</span> <span class="token operator">=</span> bar<span class="token punctuation">;</span>
promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// TypeScript keywords</span>

<span class="token keyword">abstract</span><span class="token punctuation">;</span>
<span class="token keyword">as</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span><span class="token punctuation">;</span>
<span class="token keyword">implements</span><span class="token punctuation">;</span>
<span class="token keyword">is</span><span class="token punctuation">;</span>
<span class="token keyword">keyof</span><span class="token punctuation">;</span>
<span class="token keyword">readonly</span><span class="token punctuation">;</span>
<span class="token keyword">require</span><span class="token punctuation">;</span>

<span class="token comment">// contextual keywords</span>

<span class="token keyword">asserts</span> foo<span class="token punctuation">;</span>
<span class="token keyword">infer</span> foo<span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">foo</span><span class="token punctuation">;</span>
<span class="token keyword">module</span> foo<span class="token punctuation">;</span>
<span class="token keyword">namespace</span> foo<span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">foo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

----------------------------------------------------