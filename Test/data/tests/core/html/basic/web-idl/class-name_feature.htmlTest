// names
interface interface_identifier { /* interface_members... */ };
partial interface interface_identifier { /* interface_members... */ };
dictionary dictionary_identifier { /* dictionary_members... */ };
partial dictionary dictionary_identifier { /* dictionary_members... */ };
enum enumeration_identifier { "enum", "values" /* , ... */ };
callback callback_identifier = return_type (/* arguments... */);
callback interface callback_interface_identifier { /* interface_members... */ };

// interfaces

interface interface_identifier {
  return_type identifier([extended_attributes] type identifier, [extended_attributes] type identifier);
};
interface interface_identifier {
  return_type identifier(type... identifier);
  return_type identifier(type identifier, type... identifier);
};
interface SolidColor : Paint {
  constructor(double radius);
  attribute double red;
  readonly attribute unsigned long width;
  undefined drawText(double x, double y, DOMString text);
  getter DOMString (DOMString keyName);
  getter DOMString foo(DOMString keyName);
  boolean hasAddressForName(USVString name, optional LookupOptions options = {});
  const unsigned long BIT_MASK = 0x0000fc00;
  iterable<DOMString, Session>;
};

// dictionary

dictionary identifier {
  type identifier;
};
dictionary identifier {
  type identifier = "value";
};
dictionary identifier {
  required type identifier;
};
dictionary B : A {
  long b;
  long a;
};

// callback

callback AsyncOperationCallback = undefined (DOMString status);

// enum

enum MealType { "rice", "noodles", "other" };

// typedef

typedef sequence<Point> Points;

// includes and implements
Foo includes Bar;
Foo implements Bar;
----------------------------------------------------
<span class="token comment">// names</span>
<span class="token keyword">interface</span> <span class="token class-name">interface_identifier</span> <span class="token punctuation">{</span> <span class="token comment">/* interface_members... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">partial</span> <span class="token keyword">interface</span> <span class="token class-name">interface_identifier</span> <span class="token punctuation">{</span> <span class="token comment">/* interface_members... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">dictionary</span> <span class="token class-name">dictionary_identifier</span> <span class="token punctuation">{</span> <span class="token comment">/* dictionary_members... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">partial</span> <span class="token keyword">dictionary</span> <span class="token class-name">dictionary_identifier</span> <span class="token punctuation">{</span> <span class="token comment">/* dictionary_members... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">enum</span> <span class="token class-name">enumeration_identifier</span> <span class="token punctuation">{</span> <span class="token string">"enum"</span><span class="token punctuation">,</span> <span class="token string">"values"</span> <span class="token comment">/* , ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">callback</span> <span class="token class-name">callback_identifier</span> <span class="token operator">=</span> <span class="token class-name">return_type</span> <span class="token punctuation">(</span><span class="token comment">/* arguments... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">callback</span> <span class="token keyword">interface</span> <span class="token class-name">callback_interface_identifier</span> <span class="token punctuation">{</span> <span class="token comment">/* interface_members... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// interfaces</span>

<span class="token keyword">interface</span> <span class="token class-name">interface_identifier</span> <span class="token punctuation">{</span>
  <span class="token class-name">return_type</span> identifier<span class="token punctuation">(</span><span class="token punctuation">[</span>extended_attributes<span class="token punctuation">]</span> <span class="token class-name">type</span> identifier<span class="token punctuation">,</span> <span class="token punctuation">[</span>extended_attributes<span class="token punctuation">]</span> <span class="token class-name">type</span> identifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">interface_identifier</span> <span class="token punctuation">{</span>
  <span class="token class-name">return_type</span> identifier<span class="token punctuation">(</span><span class="token class-name">type</span><span class="token operator">...</span> identifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">return_type</span> identifier<span class="token punctuation">(</span><span class="token class-name">type</span> identifier<span class="token punctuation">,</span> <span class="token class-name">type</span><span class="token operator">...</span> identifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">SolidColor</span> <span class="token operator">:</span> <span class="token class-name">Paint</span> <span class="token punctuation">{</span>
  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">attribute</span> <span class="token class-name"><span class="token keyword">double</span></span> red<span class="token punctuation">;</span>
  <span class="token keyword">readonly</span> <span class="token keyword">attribute</span> <span class="token class-name"><span class="token keyword">unsigned</span> <span class="token keyword">long</span></span> width<span class="token punctuation">;</span>
  <span class="token class-name"><span class="token keyword">undefined</span></span> drawText<span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> y<span class="token punctuation">,</span> <span class="token class-name"><span class="token builtin">DOMString</span></span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">getter</span> <span class="token class-name"><span class="token builtin">DOMString</span></span> <span class="token punctuation">(</span><span class="token class-name"><span class="token builtin">DOMString</span></span> keyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">getter</span> <span class="token class-name"><span class="token builtin">DOMString</span></span> foo<span class="token punctuation">(</span><span class="token class-name"><span class="token builtin">DOMString</span></span> keyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name"><span class="token keyword">boolean</span></span> hasAddressForName<span class="token punctuation">(</span><span class="token class-name"><span class="token builtin">USVString</span></span> name<span class="token punctuation">,</span> <span class="token keyword">optional</span> <span class="token class-name">LookupOptions</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">unsigned</span> <span class="token keyword">long</span></span> BIT_MASK <span class="token operator">=</span> <span class="token number">0x0000fc00</span><span class="token punctuation">;</span>
  <span class="token class-name"><span class="token keyword">iterable</span><span class="token operator">&lt;</span><span class="token builtin">DOMString</span><span class="token punctuation">,</span> Session<span class="token operator">></span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// dictionary</span>

<span class="token keyword">dictionary</span> <span class="token class-name">identifier</span> <span class="token punctuation">{</span>
  <span class="token class-name">type</span> identifier<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">dictionary</span> <span class="token class-name">identifier</span> <span class="token punctuation">{</span>
  <span class="token class-name">type</span> identifier <span class="token operator">=</span> <span class="token string">"value"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">dictionary</span> <span class="token class-name">identifier</span> <span class="token punctuation">{</span>
  <span class="token keyword">required</span> <span class="token class-name">type</span> identifier<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">dictionary</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">long</span></span> b<span class="token punctuation">;</span>
  <span class="token class-name"><span class="token keyword">long</span></span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// callback</span>

<span class="token keyword">callback</span> <span class="token class-name">AsyncOperationCallback</span> <span class="token operator">=</span> <span class="token class-name"><span class="token keyword">undefined</span></span> <span class="token punctuation">(</span><span class="token class-name"><span class="token builtin">DOMString</span></span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// enum</span>

<span class="token keyword">enum</span> <span class="token class-name">MealType</span> <span class="token punctuation">{</span> <span class="token string">"rice"</span><span class="token punctuation">,</span> <span class="token string">"noodles"</span><span class="token punctuation">,</span> <span class="token string">"other"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// typedef</span>

<span class="token keyword">typedef</span> <span class="token class-name"><span class="token keyword">sequence</span><span class="token operator">&lt;</span>Point<span class="token operator">></span></span> Points<span class="token punctuation">;</span>

<span class="token comment">// includes and implements</span>
<span class="token class-name">Foo</span> <span class="token keyword">includes</span> <span class="token class-name">Bar</span><span class="token punctuation">;</span>
<span class="token class-name">Foo</span> <span class="token keyword">implements</span> <span class="token class-name">Bar</span><span class="token punctuation">;</span>

----------------------------------------------------