// source: https://ziglang.org/documentation/master/#String-Literals-and-Character-Literals

const expect = @import("std").testing.expect;
const mem = @import("std").mem;

test "string literals" {
    const bytes = "hello";
    expect(@TypeOf(bytes) == *const [5:0]u8);
    expect(bytes.len == 5);
    expect(bytes[1] == 'e');
    expect(bytes[5] == 0);
    expect('e' == '\x65');
    expect('\u{1f4a9}' == 128169);
    expect('ðŸ’¯' == 128175);
    expect(mem.eql(u8, "hello", "h\x65llo"));
}

const hello_world_in_c =
    \\#include <stdio.h>
    \\
    \\int main(int argc, char **argv) {
    \\    printf("hello world\n");
    \\    return 0;
    \\}
;
----------------------------------------------------
<span class="token comment">// source: https://ziglang.org/documentation/master/#String-Literals-and-Character-Literals</span>

<span class="token keyword">const</span> expect <span class="token operator">=</span> <span class="token builtin">@import</span><span class="token punctuation">(</span><span class="token string">"std"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>testing<span class="token punctuation">.</span>expect<span class="token punctuation">;</span>
<span class="token keyword">const</span> mem <span class="token operator">=</span> <span class="token builtin">@import</span><span class="token punctuation">(</span><span class="token string">"std"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mem<span class="token punctuation">;</span>

<span class="token keyword">test</span> <span class="token string">"string literals"</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> bytes <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token builtin">@TypeOf</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token builtin-type keyword">u8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>len <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'e'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token char">'e'</span> <span class="token operator">==</span> <span class="token char">'\x65'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token char">'\u{1f4a9}'</span> <span class="token operator">==</span> <span class="token number">128169</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token char">'ðŸ’¯'</span> <span class="token operator">==</span> <span class="token number">128175</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>mem<span class="token punctuation">.</span><span class="token function">eql</span><span class="token punctuation">(</span><span class="token builtin-type keyword">u8</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"h\x65llo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> hello_world_in_c <span class="token operator">=</span>
<span class="token string">    \\#include &lt;stdio.h>
    \\
    \\int main(int argc, char **argv) {
    \\    printf("hello world\n");
    \\    return 0;
    \\}</span>
<span class="token punctuation">;</span>

----------------------------------------------------