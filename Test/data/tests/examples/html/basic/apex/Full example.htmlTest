// source: https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_shopping_cart_example_code.htm

trigger calculate on Item__c (after insert, after update, after delete) {

// Use a map because it doesn't allow duplicate values

Map<ID, Shipping_Invoice__C> updateMap = new Map<ID, Shipping_Invoice__C>();

// Set this integer to -1 if we are deleting
Integer subtract ;

// Populate the list of items based on trigger type
List<Item__c> itemList;
	if(trigger.isInsert || trigger.isUpdate){
		itemList = Trigger.new;
		subtract = 1;
	}
	else if(trigger.isDelete)
	{
		// Note -- there is no trigger.new in delete
		itemList = trigger.old;
		subtract = -1;
	}

// Access all the information we need in a single query
// rather than querying when we need it.
// This is a best practice for bulkifying requests

set<Id> AllItems = new set<id>();

for(item__c i :itemList){
// Assert numbers are not negative.
// None of the fields would make sense with a negative value

System.assert(i.quantity__c > 0, 'Quantity must be positive');
System.assert(i.weight__c >= 0, 'Weight must be non-negative');
System.assert(i.price__c >= 0, 'Price must be non-negative');

// If there is a duplicate Id, it won't get added to a set
AllItems.add(i.Shipping_Invoice__C);
}

// Accessing all shipping invoices associated with the items in the trigger
List<Shipping_Invoice__C> AllShippingInvoices = [SELECT Id, ShippingDiscount__c,
                   SubTotal__c, TotalWeight__c, Tax__c, GrandTotal__c
                   FROM Shipping_Invoice__C WHERE Id IN :AllItems];

// Take the list we just populated and put it into a Map.
// This will make it easier to look up a shipping invoice
// because you must iterate a list, but you can use lookup for a map,
Map<ID, Shipping_Invoice__C> SIMap = new Map<ID, Shipping_Invoice__C>();

for(Shipping_Invoice__C sc : AllShippingInvoices)
{
	SIMap.put(sc.id, sc);
}

// Process the list of items
	if(Trigger.isUpdate)
	{
		// Treat updates like a removal of the old item and addition of the
		// revised item rather than figuring out the differences of each field
		// and acting accordingly.
		// Note updates have both trigger.new and trigger.old
		for(Integer x = 0; x < Trigger.old.size(); x++)
		{
			Shipping_Invoice__C myOrder;
			myOrder = SIMap.get(trigger.old[x].Shipping_Invoice__C);

			// Decrement the previous value from the subtotal and weight.
			myOrder.SubTotal__c -= (trigger.old[x].price__c *
			                        trigger.old[x].quantity__c);
			myOrder.TotalWeight__c -= (trigger.old[x].weight__c *
			                           trigger.old[x].quantity__c);

			// Increment the new subtotal and weight.
			myOrder.SubTotal__c += (trigger.new[x].price__c *
			                        trigger.new[x].quantity__c);
			myOrder.TotalWeight__c += (trigger.new[x].weight__c *
			                           trigger.new[x].quantity__c);
		}

		for(Shipping_Invoice__C myOrder : AllShippingInvoices)
		{

			// Set tax rate to 9.25%  Please note, this is a simple example.
			// Generally, you would never hard code values.
			// Leveraging Custom Settings for tax rates is a best practice.
			// See Custom Settings in the Apex Developer Guide
			// for more information.
			myOrder.Tax__c = myOrder.Subtotal__c * .0925;

			// Reset the shipping discount
			myOrder.ShippingDiscount__c = 0;

			// Set shipping rate to 75 cents per pound.
			// Generally, you would never hard code values.
			// Leveraging Custom Settings for the shipping rate is a best practice.
			// See Custom Settings in the Apex Developer Guide
			// for more information.
			myOrder.Shipping__c = (myOrder.totalWeight__c * .75);
			myOrder.GrandTotal__c = myOrder.SubTotal__c + myOrder.tax__c +
			                        myOrder.Shipping__c;
			updateMap.put(myOrder.id, myOrder);
		}
	}
	else
	{
		for(Item__c itemToProcess : itemList)
		{
			Shipping_Invoice__C myOrder;

			// Look up the correct shipping invoice from the ones we got earlier
			myOrder = SIMap.get(itemToProcess.Shipping_Invoice__C);
			myOrder.SubTotal__c += (itemToProcess.price__c *
			                        itemToProcess.quantity__c * subtract);
			myOrder.TotalWeight__c += (itemToProcess.weight__c *
			                           itemToProcess.quantity__c * subtract);
		}

		for(Shipping_Invoice__C myOrder : AllShippingInvoices)
		{

			// Set tax rate to 9.25%  Please note, this is a simple example.
			// Generally, you would never hard code values.
			// Leveraging Custom Settings for tax rates is a best practice.
			// See Custom Settings in the Apex Developer Guide
			// for more information.
			myOrder.Tax__c = myOrder.Subtotal__c * .0925;

			// Reset shipping discount
			myOrder.ShippingDiscount__c = 0;

			// Set shipping rate to 75 cents per pound.
			// Generally, you would never hard code values.
			// Leveraging Custom Settings for the shipping rate is a best practice.
			// See Custom Settings in the Apex Developer Guide
			// for more information.
			myOrder.Shipping__c = (myOrder.totalWeight__c * .75);
			myOrder.GrandTotal__c = myOrder.SubTotal__c + myOrder.tax__c +
			                        myOrder.Shipping__c;

			updateMap.put(myOrder.id, myOrder);

		}
	}

	// Only use one DML update at the end.
	// This minimizes the number of DML requests generated from this trigger.
	update updateMap.values();
}
----------------------------------------------------
<span class="token comment">// source: https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_shopping_cart_example_code.htm</span>

<span class="token keyword">trigger</span> <span class="token trigger class-name">calculate</span> <span class="token keyword">on</span> <span class="token class-name">Item__c</span> <span class="token punctuation">(</span><span class="token keyword">after</span> <span class="token keyword">insert</span><span class="token punctuation">,</span> <span class="token keyword">after</span> <span class="token keyword">update</span><span class="token punctuation">,</span> <span class="token keyword">after</span> <span class="token keyword">delete</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token comment">// Use a map because it doesn't allow duplicate values</span>

<span class="token class-name"><span class="token keyword">Map</span><span class="token punctuation">&lt;</span>ID<span class="token punctuation">,</span> Shipping_Invoice__C<span class="token punctuation">></span></span> updateMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token keyword">Map</span><span class="token punctuation">&lt;</span>ID<span class="token punctuation">,</span> Shipping_Invoice__C<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Set this integer to -1 if we are deleting</span>
<span class="token keyword">Integer</span> subtract <span class="token punctuation">;</span>

<span class="token comment">// Populate the list of items based on trigger type</span>
<span class="token class-name"><span class="token keyword">List</span><span class="token punctuation">&lt;</span>Item__c<span class="token punctuation">></span></span> itemList<span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">trigger</span><span class="token punctuation">.</span>isInsert <span class="token operator">||</span> <span class="token keyword">trigger</span><span class="token punctuation">.</span>isUpdate<span class="token punctuation">)</span><span class="token punctuation">{</span>
		itemList <span class="token operator">=</span> <span class="token keyword">Trigger</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">;</span>
		subtract <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">trigger</span><span class="token punctuation">.</span>isDelete<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// Note -- there is no trigger.new in delete</span>
		itemList <span class="token operator">=</span> <span class="token keyword">trigger</span><span class="token punctuation">.</span>old<span class="token punctuation">;</span>
		subtract <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token comment">// Access all the information we need in a single query</span>
<span class="token comment">// rather than querying when we need it.</span>
<span class="token comment">// This is a best practice for bulkifying requests</span>

<span class="token class-name"><span class="token keyword">set</span><span class="token punctuation">&lt;</span>Id<span class="token punctuation">></span></span> AllItems <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token keyword">set</span><span class="token punctuation">&lt;</span>id<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">item__c</span> i <span class="token operator">:</span>itemList<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">// Assert numbers are not negative.</span>
<span class="token comment">// None of the fields would make sense with a negative value</span>

<span class="token keyword">System</span><span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>quantity__c <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Quantity must be positive'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">System</span><span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>weight__c <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Weight must be non-negative'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">System</span><span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>price__c <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Price must be non-negative'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// If there is a duplicate Id, it won't get added to a set</span>
AllItems<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>Shipping_Invoice__C<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Accessing all shipping invoices associated with the items in the trigger</span>
<span class="token class-name"><span class="token keyword">List</span><span class="token punctuation">&lt;</span>Shipping_Invoice__C<span class="token punctuation">></span></span> AllShippingInvoices <span class="token operator">=</span> <span class="token sql language-sql"><span class="token punctuation">[</span><span class="token keyword">SELECT</span> Id<span class="token punctuation">,</span> ShippingDiscount__c<span class="token punctuation">,</span>
                   SubTotal__c<span class="token punctuation">,</span> TotalWeight__c<span class="token punctuation">,</span> Tax__c<span class="token punctuation">,</span> GrandTotal__c
                   <span class="token keyword">FROM</span> Shipping_Invoice__C <span class="token keyword">WHERE</span> Id <span class="token operator">IN</span> :AllItems<span class="token punctuation">]</span></span><span class="token punctuation">;</span>

<span class="token comment">// Take the list we just populated and put it into a Map.</span>
<span class="token comment">// This will make it easier to look up a shipping invoice</span>
<span class="token comment">// because you must iterate a list, but you can use lookup for a map,</span>
<span class="token class-name"><span class="token keyword">Map</span><span class="token punctuation">&lt;</span>ID<span class="token punctuation">,</span> Shipping_Invoice__C<span class="token punctuation">></span></span> SIMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token keyword">Map</span><span class="token punctuation">&lt;</span>ID<span class="token punctuation">,</span> Shipping_Invoice__C<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Shipping_Invoice__C</span> sc <span class="token operator">:</span> AllShippingInvoices<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	SIMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span>id<span class="token punctuation">,</span> sc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Process the list of items</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">Trigger</span><span class="token punctuation">.</span>isUpdate<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// Treat updates like a removal of the old item and addition of the</span>
		<span class="token comment">// revised item rather than figuring out the differences of each field</span>
		<span class="token comment">// and acting accordingly.</span>
		<span class="token comment">// Note updates have both trigger.new and trigger.old</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">Integer</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token keyword">Trigger</span><span class="token punctuation">.</span>old<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token class-name">Shipping_Invoice__C</span> myOrder<span class="token punctuation">;</span>
			myOrder <span class="token operator">=</span> SIMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">trigger</span><span class="token punctuation">.</span>old<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>Shipping_Invoice__C<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">// Decrement the previous value from the subtotal and weight.</span>
			myOrder<span class="token punctuation">.</span>SubTotal__c <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token keyword">trigger</span><span class="token punctuation">.</span>old<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>price__c <span class="token operator">*</span>
			                        <span class="token keyword">trigger</span><span class="token punctuation">.</span>old<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>quantity__c<span class="token punctuation">)</span><span class="token punctuation">;</span>
			myOrder<span class="token punctuation">.</span>TotalWeight__c <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token keyword">trigger</span><span class="token punctuation">.</span>old<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>weight__c <span class="token operator">*</span>
			                           <span class="token keyword">trigger</span><span class="token punctuation">.</span>old<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>quantity__c<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">// Increment the new subtotal and weight.</span>
			myOrder<span class="token punctuation">.</span>SubTotal__c <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">trigger</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>price__c <span class="token operator">*</span>
			                        <span class="token keyword">trigger</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>quantity__c<span class="token punctuation">)</span><span class="token punctuation">;</span>
			myOrder<span class="token punctuation">.</span>TotalWeight__c <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">trigger</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>weight__c <span class="token operator">*</span>
			                           <span class="token keyword">trigger</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>quantity__c<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Shipping_Invoice__C</span> myOrder <span class="token operator">:</span> AllShippingInvoices<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>

			<span class="token comment">// Set tax rate to 9.25%  Please note, this is a simple example.</span>
			<span class="token comment">// Generally, you would never hard code values.</span>
			<span class="token comment">// Leveraging Custom Settings for tax rates is a best practice.</span>
			<span class="token comment">// See Custom Settings in the Apex Developer Guide</span>
			<span class="token comment">// for more information.</span>
			myOrder<span class="token punctuation">.</span>Tax__c <span class="token operator">=</span> myOrder<span class="token punctuation">.</span>Subtotal__c <span class="token operator">*</span> <span class="token number">.0925</span><span class="token punctuation">;</span>

			<span class="token comment">// Reset the shipping discount</span>
			myOrder<span class="token punctuation">.</span>ShippingDiscount__c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">// Set shipping rate to 75 cents per pound.</span>
			<span class="token comment">// Generally, you would never hard code values.</span>
			<span class="token comment">// Leveraging Custom Settings for the shipping rate is a best practice.</span>
			<span class="token comment">// See Custom Settings in the Apex Developer Guide</span>
			<span class="token comment">// for more information.</span>
			myOrder<span class="token punctuation">.</span>Shipping__c <span class="token operator">=</span> <span class="token punctuation">(</span>myOrder<span class="token punctuation">.</span>totalWeight__c <span class="token operator">*</span> <span class="token number">.75</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			myOrder<span class="token punctuation">.</span>GrandTotal__c <span class="token operator">=</span> myOrder<span class="token punctuation">.</span>SubTotal__c <span class="token operator">+</span> myOrder<span class="token punctuation">.</span>tax__c <span class="token operator">+</span>
			                        myOrder<span class="token punctuation">.</span>Shipping__c<span class="token punctuation">;</span>
			updateMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>myOrder<span class="token punctuation">.</span>id<span class="token punctuation">,</span> myOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Item__c</span> itemToProcess <span class="token operator">:</span> itemList<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token class-name">Shipping_Invoice__C</span> myOrder<span class="token punctuation">;</span>

			<span class="token comment">// Look up the correct shipping invoice from the ones we got earlier</span>
			myOrder <span class="token operator">=</span> SIMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>itemToProcess<span class="token punctuation">.</span>Shipping_Invoice__C<span class="token punctuation">)</span><span class="token punctuation">;</span>
			myOrder<span class="token punctuation">.</span>SubTotal__c <span class="token operator">+=</span> <span class="token punctuation">(</span>itemToProcess<span class="token punctuation">.</span>price__c <span class="token operator">*</span>
			                        itemToProcess<span class="token punctuation">.</span>quantity__c <span class="token operator">*</span> subtract<span class="token punctuation">)</span><span class="token punctuation">;</span>
			myOrder<span class="token punctuation">.</span>TotalWeight__c <span class="token operator">+=</span> <span class="token punctuation">(</span>itemToProcess<span class="token punctuation">.</span>weight__c <span class="token operator">*</span>
			                           itemToProcess<span class="token punctuation">.</span>quantity__c <span class="token operator">*</span> subtract<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Shipping_Invoice__C</span> myOrder <span class="token operator">:</span> AllShippingInvoices<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>

			<span class="token comment">// Set tax rate to 9.25%  Please note, this is a simple example.</span>
			<span class="token comment">// Generally, you would never hard code values.</span>
			<span class="token comment">// Leveraging Custom Settings for tax rates is a best practice.</span>
			<span class="token comment">// See Custom Settings in the Apex Developer Guide</span>
			<span class="token comment">// for more information.</span>
			myOrder<span class="token punctuation">.</span>Tax__c <span class="token operator">=</span> myOrder<span class="token punctuation">.</span>Subtotal__c <span class="token operator">*</span> <span class="token number">.0925</span><span class="token punctuation">;</span>

			<span class="token comment">// Reset shipping discount</span>
			myOrder<span class="token punctuation">.</span>ShippingDiscount__c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">// Set shipping rate to 75 cents per pound.</span>
			<span class="token comment">// Generally, you would never hard code values.</span>
			<span class="token comment">// Leveraging Custom Settings for the shipping rate is a best practice.</span>
			<span class="token comment">// See Custom Settings in the Apex Developer Guide</span>
			<span class="token comment">// for more information.</span>
			myOrder<span class="token punctuation">.</span>Shipping__c <span class="token operator">=</span> <span class="token punctuation">(</span>myOrder<span class="token punctuation">.</span>totalWeight__c <span class="token operator">*</span> <span class="token number">.75</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			myOrder<span class="token punctuation">.</span>GrandTotal__c <span class="token operator">=</span> myOrder<span class="token punctuation">.</span>SubTotal__c <span class="token operator">+</span> myOrder<span class="token punctuation">.</span>tax__c <span class="token operator">+</span>
			                        myOrder<span class="token punctuation">.</span>Shipping__c<span class="token punctuation">;</span>

			updateMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>myOrder<span class="token punctuation">.</span>id<span class="token punctuation">,</span> myOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Only use one DML update at the end.</span>
	<span class="token comment">// This minimizes the number of DML requests generated from this trigger.</span>
	<span class="token keyword">update</span> updateMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

----------------------------------------------------