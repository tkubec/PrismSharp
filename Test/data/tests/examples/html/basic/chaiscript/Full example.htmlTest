// http://chaiscript.com/examples.html#ChaiScript_Language_Examples
// Source: https://gist.github.com/lefticus/cf058f2927fef68d58e0#file-chaiscript_overview-chai

// ChaiScript supports the normal kind of control blocks you've come to expect from
// C++ and JavaScript


if (5 > 2) {
  print("Yup, 5 > 2");
} else if (2 > 5) {
  // never gonna happen
} else {
  // really not going to happen
}

var x = true;

while (x)
{
  print("x was true")
  x = false;
}

for (var i = 1; i < 10; ++i)
{
  print(i); // prints 1 through 9
}


// function definition

def myFunc(x) {
  print(x);
}

// function definition with function guards
def myFunc(x) : x > 2 && x < 5 {
  print(to_string(x) + " is between 2 and 5")
}

def myFunc(x) : x >= 5 {
  print(t_string(x) + " is greater than or equal to 5")
}

myFunc(3)

// ChaiScript also supports in string evaluation, which C++ does not

print("${3 + 5} is 8");

// And dynamic code evaluation

var value = eval("4 + 2 + 12");

// value is equal to 18
----------------------------------------------------
<span class="token comment">// http://chaiscript.com/examples.html#ChaiScript_Language_Examples</span>
<span class="token comment">// Source: https://gist.github.com/lefticus/cf058f2927fef68d58e0#file-chaiscript_overview-chai</span>

<span class="token comment">// ChaiScript supports the normal kind of control blocks you've come to expect from</span>
<span class="token comment">// C++ and JavaScript</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">"Yup, 5 > 2"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// never gonna happen</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// really not going to happen</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">"x was true"</span></span><span class="token punctuation">)</span>
  x <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prints 1 through 9</span>
<span class="token punctuation">}</span>


<span class="token comment">// function definition</span>

<span class="token keyword">def</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// function definition with function guards</span>
<span class="token keyword">def</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> x <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">" is between 2 and 5"</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">def</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> x <span class="token operator">>=</span> <span class="token number">5</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">t_string</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">" is greater than or equal to 5"</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment">// ChaiScript also supports in string evaluation, which C++ does not</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token interpolation-expression"><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">5</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is 8"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// And dynamic code evaluation</span>

<span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">"4 + 2 + 12"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// value is equal to 18</span>

----------------------------------------------------