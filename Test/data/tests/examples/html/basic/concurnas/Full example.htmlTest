//an overloaded function
def adder(a int, b int) => a + b
def adder(a int, b float) => adder(a, b as int)
def adder(a int) => adder(a, 10)

//a default value
def powerPlus(a int, raiseTo = 2, c int) => a ** raiseTo + c

//call our function with a default value
res1 = powerPlus(4, 10)//second argument defaults to '2'
res2 = powerPlus(4, 3, 10)//second argument provided

//calling a function with named parameters:
def powerAdder(a int, raiseATo = 2, b int, raiseBTo = 2) => a**raiseATo + b**raiseBTo
res3 = powerAdder(2, 4, raiseATo=3)//equivalent to: powerAdder(2, 3, 4, 2)

//varargs:
def sum(elms int...) int {
  res = 0
  for(elm in elms){
    res += elm
  }
  res
}

//call our function with a vararg
thesum = sum(1, 2, 3, 4, 5)

//partially defined typedef
typedef NameMap<X> = java.util.ArrayList<java.util.HashMap<String, java.util.HashSet<X>>>

//using typedefs...
nm NameMap<String>= new NameMap<String>()

@Annotation
class MyClass(a int, b int, c String){
  override toString() => 'MyClass({a}, {b}, "{c}")'
}

mc1 = MyClass(12, 14, "hi there")
mc2 = mc1@ //copy mc1

assert mc1 == mc2//same values!
assert mc1 &<> mc2//different objects!

mc3 = mc1@(a = 100)//copy mc1 but overwrite value of a
assert 'MyClass(100, 14, "hi there")' == mc3.toString()

mc4 = mc1@(<a, b>)//copy mc1 but exclude a and b
assert 'MyClass(0, 0, "hi there")' == mc3.toString()
----------------------------------------------------
<span class="token comment">//an overloaded function</span>
<span class="token keyword">def</span> <span class="token function">adder</span><span class="token punctuation">(</span>a <span class="token keyword">int</span><span class="token punctuation">,</span> b <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b
<span class="token keyword">def</span> <span class="token function">adder</span><span class="token punctuation">(</span>a <span class="token keyword">int</span><span class="token punctuation">,</span> b <span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">=></span> adder<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">as</span> <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">adder</span><span class="token punctuation">(</span>a <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=></span> adder<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

<span class="token comment">//a default value</span>
<span class="token keyword">def</span> <span class="token function">powerPlus</span><span class="token punctuation">(</span>a <span class="token keyword">int</span><span class="token punctuation">,</span> raiseTo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">*</span><span class="token operator">*</span> raiseTo <span class="token operator">+</span> c

<span class="token comment">//call our function with a default value</span>
res1 <span class="token operator">=</span> powerPlus<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//second argument defaults to '2'</span>
res2 <span class="token operator">=</span> powerPlus<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//second argument provided</span>

<span class="token comment">//calling a function with named parameters:</span>
<span class="token keyword">def</span> <span class="token function">powerAdder</span><span class="token punctuation">(</span>a <span class="token keyword">int</span><span class="token punctuation">,</span> raiseATo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> b <span class="token keyword">int</span><span class="token punctuation">,</span> raiseBTo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token operator">*</span><span class="token operator">*</span>raiseATo <span class="token operator">+</span> b<span class="token operator">*</span><span class="token operator">*</span>raiseBTo
res3 <span class="token operator">=</span> powerAdder<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> raiseATo<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//equivalent to: powerAdder(2, 3, 4, 2)</span>

<span class="token comment">//varargs:</span>
<span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>elms <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token punctuation">{</span>
  res <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>elm <span class="token keyword">in</span> elms<span class="token punctuation">)</span><span class="token punctuation">{</span>
    res <span class="token operator">+=</span> elm
  <span class="token punctuation">}</span>
  res
<span class="token punctuation">}</span>

<span class="token comment">//call our function with a vararg</span>
thesum <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>

<span class="token comment">//partially defined typedef</span>
<span class="token keyword">typedef</span> NameMap<span class="token operator">&lt;</span>X<span class="token operator">></span> <span class="token operator">=</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token operator">&lt;</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token operator">&lt;</span>X<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>

<span class="token comment">//using typedefs...</span>
nm NameMap<span class="token operator">&lt;</span>String<span class="token operator">>=</span> <span class="token keyword">new</span> NameMap<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token annotation builtin">@Annotation</span>
<span class="token keyword">class</span> MyClass<span class="token punctuation">(</span>a <span class="token keyword">int</span><span class="token punctuation">,</span> b <span class="token keyword">int</span><span class="token punctuation">,</span> c String<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">override</span> toString<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string-literal"><span class="token string">'MyClass(</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">, "</span><span class="token interpolation"><span class="token punctuation">{</span>c<span class="token punctuation">}</span></span><span class="token string">")'</span></span>
<span class="token punctuation">}</span>

mc1 <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"hi there"</span></span><span class="token punctuation">)</span>
mc2 <span class="token operator">=</span> mc1<span class="token annotation builtin">@</span> <span class="token comment">//copy mc1</span>

<span class="token keyword">assert</span> mc1 <span class="token operator">==</span> mc2<span class="token comment">//same values!</span>
<span class="token keyword">assert</span> mc1 <span class="token operator">&amp;&lt;></span> mc2<span class="token comment">//different objects!</span>

mc3 <span class="token operator">=</span> mc1<span class="token annotation builtin">@</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">//copy mc1 but overwrite value of a</span>
<span class="token keyword">assert</span> <span class="token string-literal"><span class="token string">'MyClass(100, 14, "hi there")'</span></span> <span class="token operator">==</span> mc3<span class="token punctuation">.</span>toString<span class="token punctuation">(</span><span class="token punctuation">)</span>

mc4 <span class="token operator">=</span> mc1<span class="token annotation builtin">@</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>a<span class="token punctuation">,</span> b<span class="token operator">></span><span class="token punctuation">)</span><span class="token comment">//copy mc1 but exclude a and b</span>
<span class="token keyword">assert</span> <span class="token string-literal"><span class="token string">'MyClass(0, 0, "hi there")'</span></span> <span class="token operator">==</span> mc3<span class="token punctuation">.</span>toString<span class="token punctuation">(</span><span class="token punctuation">)</span>

----------------------------------------------------