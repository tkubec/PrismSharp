// The declaration creates a constructor that takes two values, name and age.
type Person(name:string, age:int) =
    // A Person object's age can be changed. The mutable keyword in the
    // declaration makes that possible.
    let mutable internalAge = age

    // Declare a second constructor that takes only one argument, a name.
    // This constructor calls the constructor that requires two arguments,
    // sending 0 as the value for age.
    new(name:string) = Person(name, 0)

    // A read-only property.
    member this.Name = name
    // A read/write property.
    member this.Age
        with get() = internalAge
        and set(value) = internalAge <- value

    // Instance methods.
    // Increment the person's age.
    member this.HasABirthday () = internalAge <- internalAge + 1

    // Check current age against some threshold.
    member this.IsOfAge targetAge = internalAge >= targetAge

    // Display the person's name and age.
    override this.ToString () =
        "Name:  " + name + "\n" + "Age:   " + (string)internalAge
----------------------------------------------------
<span class="token comment">// The declaration creates a constructor that takes two values, name and age.</span>
<span class="token keyword">type</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token class-name">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token class-name">int</span><span class="token punctuation">)</span> <span class="token operator">=</span>
    <span class="token comment">// A Person object's age can be changed. The mutable keyword in the</span>
    <span class="token comment">// declaration makes that possible.</span>
    <span class="token keyword">let</span> <span class="token keyword">mutable</span> internalAge <span class="token operator">=</span> age

    <span class="token comment">// Declare a second constructor that takes only one argument, a name.</span>
    <span class="token comment">// This constructor calls the constructor that requires two arguments,</span>
    <span class="token comment">// sending 0 as the value for age.</span>
    <span class="token keyword">new</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token class-name">string</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token comment">// A read-only property.</span>
    <span class="token keyword">member</span> this<span class="token punctuation">.</span>Name <span class="token operator">=</span> name
    <span class="token comment">// A read/write property.</span>
    <span class="token keyword">member</span> this<span class="token punctuation">.</span>Age
        <span class="token keyword">with</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> internalAge
        <span class="token keyword">and</span> <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span> internalAge <span class="token operator">&lt;-</span> value

    <span class="token comment">// Instance methods.</span>
    <span class="token comment">// Increment the person's age.</span>
    <span class="token keyword">member</span> this<span class="token punctuation">.</span>HasABirthday <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> internalAge <span class="token operator">&lt;-</span> internalAge <span class="token operator">+</span> <span class="token number">1</span>

    <span class="token comment">// Check current age against some threshold.</span>
    <span class="token keyword">member</span> this<span class="token punctuation">.</span>IsOfAge targetAge <span class="token operator">=</span> internalAge <span class="token operator">>=</span> targetAge

    <span class="token comment">// Display the person's name and age.</span>
    <span class="token keyword">override</span> this<span class="token punctuation">.</span>ToString <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span>
        <span class="token string">"Name:  "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"Age:   "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span>internalAge

----------------------------------------------------