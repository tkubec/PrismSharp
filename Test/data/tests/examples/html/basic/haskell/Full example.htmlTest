hGetLine h =
  wantReadableHandle_ "Data.ByteString.hGetLine" h $
    \ h_@Handle__{haByteBuffer} -> do
      flushCharReadBuffer h_
      buf <- readIORef haByteBuffer
      if isEmptyBuffer buf
         then fill h_ buf 0 []
         else haveBuf h_ buf 0 []
 where

  fill h_@Handle__{haByteBuffer,haDevice} buf len xss =
    len `seq` do
    (r,buf') <- Buffered.fillReadBuffer haDevice buf
    if r == 0
       then do writeIORef haByteBuffer buf{ bufR=0, bufL=0 }
               if len > 0
                  then mkBigPS len xss
                  else ioe_EOF
       else haveBuf h_ buf' len xss

  haveBuf h_@Handle__{haByteBuffer}
          buf@Buffer{ bufRaw=raw, bufR=w, bufL=r }
          len xss =
    do
        off <- findEOL r w raw
        let new_len = len + off - r
        xs <- mkPS raw r off

      -- if eol == True, then off is the offset of the '\n'
      -- otherwise off == w and the buffer is now empty.
        if off /= w
            then do if (w == off + 1)
                            then writeIORef haByteBuffer buf{ bufL=0, bufR=0 }
                            else writeIORef haByteBuffer buf{ bufL = off + 1 }
                    mkBigPS new_len (xs:xss)
            else do
                 fill h_ buf{ bufL=0, bufR=0 } new_len (xs:xss)

  -- find the end-of-line character, if there is one
  findEOL r w raw
        | r == w = return w
        | otherwise =  do
            c <- readWord8Buf raw r
            if c == fromIntegral (ord '\n')
                then return r -- NB. not r+1: don't include the '\n'
                else findEOL (r+1) w raw

mkPS :: RawBuffer Word8 -> Int -> Int -> IO ByteString
mkPS buf start end =
 create len $ \p ->
   withRawBuffer buf $ \pbuf -> do
   copyBytes p (pbuf `plusPtr` start) len
 where
   len = end - start
----------------------------------------------------
<span class="token hvariable">hGetLine</span> <span class="token hvariable">h</span> <span class="token operator">=</span>
  <span class="token hvariable">wantReadableHandle_</span> <span class="token string">"Data.ByteString.hGetLine"</span> <span class="token hvariable">h</span> <span class="token operator">$</span>
    <span class="token operator">\</span> <span class="token hvariable">h_</span><span class="token operator">@</span><span class="token constant">Handle__</span><span class="token punctuation">{</span><span class="token hvariable">haByteBuffer</span><span class="token punctuation">}</span> <span class="token operator">-></span> <span class="token keyword">do</span>
      <span class="token hvariable">flushCharReadBuffer</span> <span class="token hvariable">h_</span>
      <span class="token hvariable">buf</span> <span class="token operator">&lt;-</span> <span class="token hvariable">readIORef</span> <span class="token hvariable">haByteBuffer</span>
      <span class="token keyword">if</span> <span class="token hvariable">isEmptyBuffer</span> <span class="token hvariable">buf</span>
         <span class="token keyword">then</span> <span class="token hvariable">fill</span> <span class="token hvariable">h_</span> <span class="token hvariable">buf</span> <span class="token number">0</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
         <span class="token keyword">else</span> <span class="token hvariable">haveBuf</span> <span class="token hvariable">h_</span> <span class="token hvariable">buf</span> <span class="token number">0</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
 <span class="token keyword">where</span>

  <span class="token hvariable">fill</span> <span class="token hvariable">h_</span><span class="token operator">@</span><span class="token constant">Handle__</span><span class="token punctuation">{</span><span class="token hvariable">haByteBuffer</span><span class="token punctuation">,</span><span class="token hvariable">haDevice</span><span class="token punctuation">}</span> <span class="token hvariable">buf</span> <span class="token hvariable">len</span> <span class="token hvariable">xss</span> <span class="token operator">=</span>
    <span class="token hvariable">len</span> <span class="token operator">`seq`</span> <span class="token keyword">do</span>
    <span class="token punctuation">(</span><span class="token hvariable">r</span><span class="token punctuation">,</span><span class="token hvariable">buf'</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span> <span class="token hvariable">Buffered<span class="token punctuation">.</span>fillReadBuffer</span> <span class="token hvariable">haDevice</span> <span class="token hvariable">buf</span>
    <span class="token keyword">if</span> <span class="token hvariable">r</span> <span class="token operator">==</span> <span class="token number">0</span>
       <span class="token keyword">then</span> <span class="token keyword">do</span> <span class="token hvariable">writeIORef</span> <span class="token hvariable">haByteBuffer</span> <span class="token hvariable">buf</span><span class="token punctuation">{</span> <span class="token hvariable">bufR</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token hvariable">bufL</span><span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">}</span>
               <span class="token keyword">if</span> <span class="token hvariable">len</span> <span class="token operator">></span> <span class="token number">0</span>
                  <span class="token keyword">then</span> <span class="token hvariable">mkBigPS</span> <span class="token hvariable">len</span> <span class="token hvariable">xss</span>
                  <span class="token keyword">else</span> <span class="token hvariable">ioe_EOF</span>
       <span class="token keyword">else</span> <span class="token hvariable">haveBuf</span> <span class="token hvariable">h_</span> <span class="token hvariable">buf'</span> <span class="token hvariable">len</span> <span class="token hvariable">xss</span>

  <span class="token hvariable">haveBuf</span> <span class="token hvariable">h_</span><span class="token operator">@</span><span class="token constant">Handle__</span><span class="token punctuation">{</span><span class="token hvariable">haByteBuffer</span><span class="token punctuation">}</span>
          <span class="token hvariable">buf</span><span class="token operator">@</span><span class="token constant">Buffer</span><span class="token punctuation">{</span> <span class="token hvariable">bufRaw</span><span class="token operator">=</span><span class="token hvariable">raw</span><span class="token punctuation">,</span> <span class="token hvariable">bufR</span><span class="token operator">=</span><span class="token hvariable">w</span><span class="token punctuation">,</span> <span class="token hvariable">bufL</span><span class="token operator">=</span><span class="token hvariable">r</span> <span class="token punctuation">}</span>
          <span class="token hvariable">len</span> <span class="token hvariable">xss</span> <span class="token operator">=</span>
    <span class="token keyword">do</span>
        <span class="token hvariable">off</span> <span class="token operator">&lt;-</span> <span class="token hvariable">findEOL</span> <span class="token hvariable">r</span> <span class="token hvariable">w</span> <span class="token hvariable">raw</span>
        <span class="token keyword">let</span> <span class="token hvariable">new_len</span> <span class="token operator">=</span> <span class="token hvariable">len</span> <span class="token operator">+</span> <span class="token hvariable">off</span> <span class="token operator">-</span> <span class="token hvariable">r</span>
        <span class="token hvariable">xs</span> <span class="token operator">&lt;-</span> <span class="token hvariable">mkPS</span> <span class="token hvariable">raw</span> <span class="token hvariable">r</span> <span class="token hvariable">off</span>

      <span class="token comment">-- if eol == True, then off is the offset of the '\n'</span>
      <span class="token comment">-- otherwise off == w and the buffer is now empty.</span>
        <span class="token keyword">if</span> <span class="token hvariable">off</span> <span class="token operator">/=</span> <span class="token hvariable">w</span>
            <span class="token keyword">then</span> <span class="token keyword">do</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token hvariable">w</span> <span class="token operator">==</span> <span class="token hvariable">off</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
                            <span class="token keyword">then</span> <span class="token hvariable">writeIORef</span> <span class="token hvariable">haByteBuffer</span> <span class="token hvariable">buf</span><span class="token punctuation">{</span> <span class="token hvariable">bufL</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token hvariable">bufR</span><span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">}</span>
                            <span class="token keyword">else</span> <span class="token hvariable">writeIORef</span> <span class="token hvariable">haByteBuffer</span> <span class="token hvariable">buf</span><span class="token punctuation">{</span> <span class="token hvariable">bufL</span> <span class="token operator">=</span> <span class="token hvariable">off</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span>
                    <span class="token hvariable">mkBigPS</span> <span class="token hvariable">new_len</span> <span class="token punctuation">(</span><span class="token hvariable">xs</span><span class="token operator">:</span><span class="token hvariable">xss</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span> <span class="token keyword">do</span>
                 <span class="token hvariable">fill</span> <span class="token hvariable">h_</span> <span class="token hvariable">buf</span><span class="token punctuation">{</span> <span class="token hvariable">bufL</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token hvariable">bufR</span><span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">}</span> <span class="token hvariable">new_len</span> <span class="token punctuation">(</span><span class="token hvariable">xs</span><span class="token operator">:</span><span class="token hvariable">xss</span><span class="token punctuation">)</span>

  <span class="token comment">-- find the end-of-line character, if there is one</span>
  <span class="token hvariable">findEOL</span> <span class="token hvariable">r</span> <span class="token hvariable">w</span> <span class="token hvariable">raw</span>
        <span class="token operator">|</span> <span class="token hvariable">r</span> <span class="token operator">==</span> <span class="token hvariable">w</span> <span class="token operator">=</span> <span class="token builtin">return</span> <span class="token hvariable">w</span>
        <span class="token operator">|</span> <span class="token builtin">otherwise</span> <span class="token operator">=</span>  <span class="token keyword">do</span>
            <span class="token hvariable">c</span> <span class="token operator">&lt;-</span> <span class="token hvariable">readWord8Buf</span> <span class="token hvariable">raw</span> <span class="token hvariable">r</span>
            <span class="token keyword">if</span> <span class="token hvariable">c</span> <span class="token operator">==</span> <span class="token builtin">fromIntegral</span> <span class="token punctuation">(</span><span class="token builtin">ord</span> <span class="token char string">'\n'</span><span class="token punctuation">)</span>
                <span class="token keyword">then</span> <span class="token builtin">return</span> <span class="token hvariable">r</span> <span class="token comment">-- NB. not r+1: don't include the '\n'</span>
                <span class="token keyword">else</span> <span class="token hvariable">findEOL</span> <span class="token punctuation">(</span><span class="token hvariable">r</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token hvariable">w</span> <span class="token hvariable">raw</span>

<span class="token hvariable">mkPS</span> <span class="token operator">::</span> <span class="token constant">RawBuffer</span> <span class="token constant">Word8</span> <span class="token operator">-></span> <span class="token constant">Int</span> <span class="token operator">-></span> <span class="token constant">Int</span> <span class="token operator">-></span> <span class="token constant">IO</span> <span class="token constant">ByteString</span>
<span class="token hvariable">mkPS</span> <span class="token hvariable">buf</span> <span class="token hvariable">start</span> <span class="token hvariable">end</span> <span class="token operator">=</span>
 <span class="token hvariable">create</span> <span class="token hvariable">len</span> <span class="token operator">$</span> <span class="token operator">\</span><span class="token hvariable">p</span> <span class="token operator">-></span>
   <span class="token hvariable">withRawBuffer</span> <span class="token hvariable">buf</span> <span class="token operator">$</span> <span class="token operator">\</span><span class="token hvariable">pbuf</span> <span class="token operator">-></span> <span class="token keyword">do</span>
   <span class="token hvariable">copyBytes</span> <span class="token hvariable">p</span> <span class="token punctuation">(</span><span class="token hvariable">pbuf</span> <span class="token operator">`plusPtr`</span> <span class="token hvariable">start</span><span class="token punctuation">)</span> <span class="token hvariable">len</span>
 <span class="token keyword">where</span>
   <span class="token hvariable">len</span> <span class="token operator">=</span> <span class="token hvariable">end</span> <span class="token operator">-</span> <span class="token hvariable">start</span>

----------------------------------------------------