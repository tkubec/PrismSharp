# Author: Robert J. Alexander
global GameObject, Tree, Learn
record Question(question, yes, no)
procedure main()
   GameObject := "animal"
   Tree := Question("Does it live in water", "goldfish", "canary")
   Get()                                  # Recall prior knowledge
   Game()                                 # Play a game
   return
end
#  Game() -- Conducts a game.
#
procedure Game()
   while Confirm("Are you thinking of ", Article(GameObject), " ",
      GameObject) do Ask(Tree)
   write("Thanks for a great game.")
   if \Learn &Confirm("Want to save knowledge learned this session")
   then Save()
   return
end
#  Confirm() -- Handles yes/no questions and answers.
#
procedure Confirm(q[])
   local answer, s
   static ok
   initial {
      ok := table()
      every ok["y" | "yes" | "yeah" | "uh huh"] := "yes"
      every ok["n" | "no"  | "nope" | "uh uh" ] := "no"
      }
   while /answer do {
      every writes(!q)
      write("?")
      case s := read() | exit(1) of {
         #  Commands recognized at a yes/no prompt.
         #
         "save":    Save()
         "get":     Get()
         "list":    List()
         "dump":    Output(Tree)
         default:   {
            (answer := \ok[map(s, &ucase, &lcase)]) |
               write("This is a \"yes\" or \"no\" question.")
            }
         }
      }
   return answer == "yes"
end
#  Ask() -- Navigates through the barrage of questions leading to a
#  guess.
#
procedure Ask(node)
   local guess, question
   case type(node) of {
      "string":        {
         if not Confirm("It must be ", Article(node), " ", node, ", right") then {
            Learn := "yes"
            write("What were you thinking of?")
            guess := read() | exit(1)
            write("What question would distinguish ", Article(guess), " ",
               guess, " from ", Article(node), " ", node, "?")
            question := read() | exit(1)
            if question[-1] == "?" then question[-1] := ""
            question[1] := map(question[1], &lcase, &ucase)
            if Confirm("For ", Article(guess), " ", guess, ", what would the answer be")
            then return Question(question, guess, node)
         else return Question(question, node, guess)
         }
      }
      "Question":  {
         if Confirm(node.question) then node.yes := Ask(node.yes)
         else node.no := Ask(node.no)
         }
      }
end
#  Article() -- Come up with the appropriate indefinite article.
#
procedure Article(word)
   return if any('aeiouAEIOU', word) then "an" else "a"
end
#  Save() -- Store our acquired knowledge in a disk file name
#  based on the GameObject.
#
procedure Save()
   local f
   f := open(GameObject || "s", "w")
   Output(Tree, f)
   close(f)
   return
end
#  Output() -- Recursive procedure used to output the knowledge tree.
#
procedure Output(node, f, sense)
   static indent
   initial indent := 0
   /f := &output
   /sense := " "
   case type(node) of {
      "string":        write(f, repl(" ", indent), sense, "A: ", node)
      "Question":  {
         write(f, repl(" ", indent), sense, "Q: ", node.question)
         indent +:= 1
         Output(node.yes, f, "y")
         Output(node.no, f, "n")
         indent -:= 1
         }
      }
   return
end
#  Get() -- Read in a knowledge base from a file.
#
procedure Get()
   local f
   f := open(GameObject || "s", "r") | fail
   Tree := Input(f)
   close(f)
   return
end
#  Input() -- Recursive procedure used to input the knowledge tree.
#
procedure Input(f)
   local nodetype, s
   read(f) ? (tab(upto(~' \t')) & =("y" | "n" | "") &
      nodetype := move(1) & move(2) & s := tab(0))
   return if nodetype == "Q" then Question(s, Input(f), Input(f)) else s
end
#  List() -- Lists the objects in the knowledge base.
#
$define Length           78
procedure List()
   local lst, line, item
   lst := Show(Tree, [ ])
   line := ""
   every item := !sort(lst) do {
      if *line + *item > Length then {
         write(trim(line))
         line := ""
         }
      line ||:= item || ", "
      }
   write(line[1:-2])
   return
end
#
#  Show() -- Recursive procedure used to navigate the knowledge tree.
#
procedure Show(node, lst)
   if type(node) == "Question" then {
      lst := Show(node.yes, lst)
      lst := Show(node.no, lst)
      }
   else put(lst, node)
   return lst
end
----------------------------------------------------
<span class="token comment"># Author: Robert J. Alexander</span>
<span class="token keyword">global</span> GameObject<span class="token punctuation">,</span> Tree<span class="token punctuation">,</span> Learn
<span class="token keyword">record</span> <span class="token function">Question</span><span class="token punctuation">(</span>question<span class="token punctuation">,</span> yes<span class="token punctuation">,</span> no<span class="token punctuation">)</span>
<span class="token keyword">procedure</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   GameObject <span class="token operator">:=</span> <span class="token string">"animal"</span>
   Tree <span class="token operator">:=</span> <span class="token function">Question</span><span class="token punctuation">(</span><span class="token string">"Does it live in water"</span><span class="token punctuation">,</span> <span class="token string">"goldfish"</span><span class="token punctuation">,</span> <span class="token string">"canary"</span><span class="token punctuation">)</span>
   <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                  <span class="token comment"># Recall prior knowledge</span>
   <span class="token function">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                 <span class="token comment"># Play a game</span>
   <span class="token keyword">return</span>
<span class="token keyword">end</span>
<span class="token comment">#  Game() -- Conducts a game.</span>
<span class="token comment">#</span>
<span class="token keyword">procedure</span> <span class="token function">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">while</span> <span class="token function">Confirm</span><span class="token punctuation">(</span><span class="token string">"Are you thinking of "</span><span class="token punctuation">,</span> <span class="token function">Article</span><span class="token punctuation">(</span>GameObject<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span>
      GameObject<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token function">Ask</span><span class="token punctuation">(</span>Tree<span class="token punctuation">)</span>
   <span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Thanks for a great game."</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> <span class="token operator">\</span>Learn <span class="token operator">&amp;</span><span class="token function">Confirm</span><span class="token punctuation">(</span><span class="token string">"Want to save knowledge learned this session"</span><span class="token punctuation">)</span>
   <span class="token keyword">then</span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span>
<span class="token keyword">end</span>
<span class="token comment">#  Confirm() -- Handles yes/no questions and answers.</span>
<span class="token comment">#</span>
<span class="token keyword">procedure</span> <span class="token function">Confirm</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
   <span class="token keyword">local</span> answer<span class="token punctuation">,</span> s
   <span class="token keyword">static</span> ok
   <span class="token keyword">initial</span> <span class="token punctuation">{</span>
      ok <span class="token operator">:=</span> <span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">every</span> ok<span class="token punctuation">[</span><span class="token string">"y"</span> <span class="token operator">|</span> <span class="token string">"yes"</span> <span class="token operator">|</span> <span class="token string">"yeah"</span> <span class="token operator">|</span> <span class="token string">"uh huh"</span><span class="token punctuation">]</span> <span class="token operator">:=</span> <span class="token string">"yes"</span>
      <span class="token keyword">every</span> ok<span class="token punctuation">[</span><span class="token string">"n"</span> <span class="token operator">|</span> <span class="token string">"no"</span>  <span class="token operator">|</span> <span class="token string">"nope"</span> <span class="token operator">|</span> <span class="token string">"uh uh"</span> <span class="token punctuation">]</span> <span class="token operator">:=</span> <span class="token string">"no"</span>
      <span class="token punctuation">}</span>
   <span class="token keyword">while</span> <span class="token operator">/</span>answer <span class="token keyword">do</span> <span class="token punctuation">{</span>
      <span class="token keyword">every</span> <span class="token function">writes</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">)</span>
      <span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span>
      <span class="token keyword">case</span> s <span class="token operator">:=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">of</span> <span class="token punctuation">{</span>
         <span class="token comment">#  Commands recognized at a yes/no prompt.</span>
         <span class="token comment">#</span>
         <span class="token string">"save"</span><span class="token operator">:</span>    <span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
         <span class="token string">"get"</span><span class="token operator">:</span>     <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
         <span class="token string">"list"</span><span class="token operator">:</span>    <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
         <span class="token string">"dump"</span><span class="token operator">:</span>    <span class="token function">Output</span><span class="token punctuation">(</span>Tree<span class="token punctuation">)</span>
         <span class="token keyword">default</span><span class="token operator">:</span>   <span class="token punctuation">{</span>
            <span class="token punctuation">(</span>answer <span class="token operator">:=</span> <span class="token operator">\</span>ok<span class="token punctuation">[</span><span class="token function">map</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token builtin-keyword variable">&amp;ucase</span><span class="token punctuation">,</span> <span class="token builtin-keyword variable">&amp;lcase</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">|</span>
               <span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"This is a \"yes\" or \"no\" question."</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
   <span class="token keyword">return</span> answer <span class="token operator">==</span> <span class="token string">"yes"</span>
<span class="token keyword">end</span>
<span class="token comment">#  Ask() -- Navigates through the barrage of questions leading to a</span>
<span class="token comment">#  guess.</span>
<span class="token comment">#</span>
<span class="token keyword">procedure</span> <span class="token function">Ask</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
   <span class="token keyword">local</span> guess<span class="token punctuation">,</span> question
   <span class="token keyword">case</span> <span class="token function">type</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token keyword">of</span> <span class="token punctuation">{</span>
      <span class="token string">"string"</span><span class="token operator">:</span>        <span class="token punctuation">{</span>
         <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token function">Confirm</span><span class="token punctuation">(</span><span class="token string">"It must be "</span><span class="token punctuation">,</span> <span class="token function">Article</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> node<span class="token punctuation">,</span> <span class="token string">", right"</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token punctuation">{</span>
            Learn <span class="token operator">:=</span> <span class="token string">"yes"</span>
            <span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"What were you thinking of?"</span><span class="token punctuation">)</span>
            guess <span class="token operator">:=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"What question would distinguish "</span><span class="token punctuation">,</span> <span class="token function">Article</span><span class="token punctuation">(</span>guess<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span>
               guess<span class="token punctuation">,</span> <span class="token string">" from "</span><span class="token punctuation">,</span> <span class="token function">Article</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> node<span class="token punctuation">,</span> <span class="token string">"?"</span><span class="token punctuation">)</span>
            question <span class="token operator">:=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> question<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"?"</span> <span class="token keyword">then</span> question<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:=</span> <span class="token string">""</span>
            question<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:=</span> <span class="token function">map</span><span class="token punctuation">(</span>question<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin-keyword variable">&amp;lcase</span><span class="token punctuation">,</span> <span class="token builtin-keyword variable">&amp;ucase</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token function">Confirm</span><span class="token punctuation">(</span><span class="token string">"For "</span><span class="token punctuation">,</span> <span class="token function">Article</span><span class="token punctuation">(</span>guess<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> guess<span class="token punctuation">,</span> <span class="token string">", what would the answer be"</span><span class="token punctuation">)</span>
            <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token function">Question</span><span class="token punctuation">(</span>question<span class="token punctuation">,</span> guess<span class="token punctuation">,</span> node<span class="token punctuation">)</span>
         <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">Question</span><span class="token punctuation">(</span>question<span class="token punctuation">,</span> node<span class="token punctuation">,</span> guess<span class="token punctuation">)</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token string">"Question"</span><span class="token operator">:</span>  <span class="token punctuation">{</span>
         <span class="token keyword">if</span> <span class="token function">Confirm</span><span class="token punctuation">(</span>node<span class="token operator">.</span>question<span class="token punctuation">)</span> <span class="token keyword">then</span> node<span class="token operator">.</span>yes <span class="token operator">:=</span> <span class="token function">Ask</span><span class="token punctuation">(</span>node<span class="token operator">.</span>yes<span class="token punctuation">)</span>
         <span class="token keyword">else</span> node<span class="token operator">.</span>no <span class="token operator">:=</span> <span class="token function">Ask</span><span class="token punctuation">(</span>node<span class="token operator">.</span>no<span class="token punctuation">)</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
<span class="token keyword">end</span>
<span class="token comment">#  Article() -- Come up with the appropriate indefinite article.</span>
<span class="token comment">#</span>
<span class="token keyword">procedure</span> <span class="token function">Article</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>
   <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token function">any</span><span class="token punctuation">(</span><span class="token string">'aeiouAEIOU'</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token string">"an"</span> <span class="token keyword">else</span> <span class="token string">"a"</span>
<span class="token keyword">end</span>
<span class="token comment">#  Save() -- Store our acquired knowledge in a disk file name</span>
<span class="token comment">#  based on the GameObject.</span>
<span class="token comment">#</span>
<span class="token keyword">procedure</span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">local</span> f
   f <span class="token operator">:=</span> <span class="token function">open</span><span class="token punctuation">(</span>GameObject <span class="token operator">||</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>
   <span class="token function">Output</span><span class="token punctuation">(</span>Tree<span class="token punctuation">,</span> f<span class="token punctuation">)</span>
   <span class="token function">close</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
   <span class="token keyword">return</span>
<span class="token keyword">end</span>
<span class="token comment">#  Output() -- Recursive procedure used to output the knowledge tree.</span>
<span class="token comment">#</span>
<span class="token keyword">procedure</span> <span class="token function">Output</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> f<span class="token punctuation">,</span> sense<span class="token punctuation">)</span>
   <span class="token keyword">static</span> indent
   <span class="token keyword">initial</span> indent <span class="token operator">:=</span> <span class="token number">0</span>
   <span class="token operator">/</span>f <span class="token operator">:=</span> <span class="token builtin-keyword variable">&amp;output</span>
   <span class="token operator">/</span>sense <span class="token operator">:=</span> <span class="token string">" "</span>
   <span class="token keyword">case</span> <span class="token function">type</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token keyword">of</span> <span class="token punctuation">{</span>
      <span class="token string">"string"</span><span class="token operator">:</span>        <span class="token function">write</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token function">repl</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> indent<span class="token punctuation">)</span><span class="token punctuation">,</span> sense<span class="token punctuation">,</span> <span class="token string">"A: "</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span>
      <span class="token string">"Question"</span><span class="token operator">:</span>  <span class="token punctuation">{</span>
         <span class="token function">write</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token function">repl</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> indent<span class="token punctuation">)</span><span class="token punctuation">,</span> sense<span class="token punctuation">,</span> <span class="token string">"Q: "</span><span class="token punctuation">,</span> node<span class="token operator">.</span>question<span class="token punctuation">)</span>
         indent <span class="token operator">+:=</span> <span class="token number">1</span>
         <span class="token function">Output</span><span class="token punctuation">(</span>node<span class="token operator">.</span>yes<span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">)</span>
         <span class="token function">Output</span><span class="token punctuation">(</span>node<span class="token operator">.</span>no<span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token string">"n"</span><span class="token punctuation">)</span>
         indent <span class="token operator">-:=</span> <span class="token number">1</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
   <span class="token keyword">return</span>
<span class="token keyword">end</span>
<span class="token comment">#  Get() -- Read in a knowledge base from a file.</span>
<span class="token comment">#</span>
<span class="token keyword">procedure</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">local</span> f
   f <span class="token operator">:=</span> <span class="token function">open</span><span class="token punctuation">(</span>GameObject <span class="token operator">||</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">fail</span>
   Tree <span class="token operator">:=</span> <span class="token function">Input</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
   <span class="token function">close</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
   <span class="token keyword">return</span>
<span class="token keyword">end</span>
<span class="token comment">#  Input() -- Recursive procedure used to input the knowledge tree.</span>
<span class="token comment">#</span>
<span class="token keyword">procedure</span> <span class="token function">Input</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
   <span class="token keyword">local</span> nodetype<span class="token punctuation">,</span> s
   <span class="token function">read</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token function">tab</span><span class="token punctuation">(</span><span class="token function">upto</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string">' \t'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"y"</span> <span class="token operator">|</span> <span class="token string">"n"</span> <span class="token operator">|</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>
      nodetype <span class="token operator">:=</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> s <span class="token operator">:=</span> <span class="token function">tab</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> <span class="token keyword">if</span> nodetype <span class="token operator">==</span> <span class="token string">"Q"</span> <span class="token keyword">then</span> <span class="token function">Question</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token function">Input</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Input</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">else</span> s
<span class="token keyword">end</span>
<span class="token comment">#  List() -- Lists the objects in the knowledge base.</span>
<span class="token comment">#</span>
<span class="token directive builtin">$define</span> Length           <span class="token number">78</span>
<span class="token keyword">procedure</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">local</span> lst<span class="token punctuation">,</span> line<span class="token punctuation">,</span> item
   lst <span class="token operator">:=</span> <span class="token function">Show</span><span class="token punctuation">(</span>Tree<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
   line <span class="token operator">:=</span> <span class="token string">""</span>
   <span class="token keyword">every</span> item <span class="token operator">:=</span> <span class="token operator">!</span><span class="token function">sort</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token operator">*</span>line <span class="token operator">+</span> <span class="token operator">*</span>item <span class="token operator">></span> Length <span class="token keyword">then</span> <span class="token punctuation">{</span>
         <span class="token function">write</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span>
         line <span class="token operator">:=</span> <span class="token string">""</span>
         <span class="token punctuation">}</span>
      line <span class="token operator">||:=</span> item <span class="token operator">||</span> <span class="token string">", "</span>
      <span class="token punctuation">}</span>
   <span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span>
<span class="token keyword">end</span>
<span class="token comment">#</span>
<span class="token comment">#  Show() -- Recursive procedure used to navigate the knowledge tree.</span>
<span class="token comment">#</span>
<span class="token keyword">procedure</span> <span class="token function">Show</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> lst<span class="token punctuation">)</span>
   <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"Question"</span> <span class="token keyword">then</span> <span class="token punctuation">{</span>
      lst <span class="token operator">:=</span> <span class="token function">Show</span><span class="token punctuation">(</span>node<span class="token operator">.</span>yes<span class="token punctuation">,</span> lst<span class="token punctuation">)</span>
      lst <span class="token operator">:=</span> <span class="token function">Show</span><span class="token punctuation">(</span>node<span class="token operator">.</span>no<span class="token punctuation">,</span> lst<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
   <span class="token keyword">else</span> <span class="token function">put</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> node<span class="token punctuation">)</span>
   <span class="token keyword">return</span> lst
<span class="token keyword">end</span>

----------------------------------------------------