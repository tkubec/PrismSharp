function pop (const h : heap) : (heap * heap_element * nat) is
	begin
		const result : heap_element = get_top (h) ;
		var s : nat := size(h) ;
		const last : heap_element = get_force(s, h) ;
		remove s from map h ;
		h[1n] := last ;
		s := size(h) ;
		var i : nat := 0n ;
		var largest : nat := 1n ;
		var left : nat := 0n ;
		var right : nat := 0n ;
		var c : nat := 0n ;
		while (largest =/= i) block {
			c := c + 1n ;
			i := largest ;
			left := 2n * i ;
			right := left + 1n ;
			if (left <= s) then begin
				if (heap_element_lt(get_force(left , h) , get_force(i , h))) then begin
					largest := left ;
					const tmp : heap_element = get_force(i , h) ;
					h[i] := get_force(left , h) ;
					h[left] := tmp ;
				end else skip ;
			end else if (right <= s) then begin
				if (heap_element_lt(get_force(right , h) , get_force(i , h))) then begin
					largest := right ;
					const tmp : heap_element = get_force(i , h) ;
					h[i] := get_force(right , h) ;
					h[left] := tmp ;
				end else skip ;
			end else skip ;
		}
	end with (h , result , c)
----------------------------------------------------
<span class="token keyword">function</span> <span class="token function">pop</span> <span class="token punctuation">(</span><span class="token keyword">const</span> h <span class="token punctuation">:</span> <span class="token class-name">heap</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">(</span>heap <span class="token operator">*</span> heap_element <span class="token operator">*</span> <span class="token builtin">nat</span><span class="token punctuation">)</span></span> <span class="token keyword">is</span>
	<span class="token keyword">begin</span>
		<span class="token keyword">const</span> result <span class="token punctuation">:</span> <span class="token class-name">heap_element</span> <span class="token operator">=</span> <span class="token function">get_top</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">;</span>
		<span class="token keyword">var</span> s <span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin">nat</span></span> <span class="token operator">:=</span> <span class="token function">size</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">;</span>
		<span class="token keyword">const</span> last <span class="token punctuation">:</span> <span class="token class-name">heap_element</span> <span class="token operator">=</span> <span class="token function">get_force</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token punctuation">;</span>
		<span class="token keyword">remove</span> s <span class="token keyword">from</span> <span class="token builtin">map</span> h <span class="token punctuation">;</span>
		h<span class="token punctuation">[</span><span class="token number">1n</span><span class="token punctuation">]</span> <span class="token operator">:=</span> last <span class="token punctuation">;</span>
		s <span class="token operator">:=</span> <span class="token function">size</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">;</span>
		<span class="token keyword">var</span> i <span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin">nat</span></span> <span class="token operator">:=</span> <span class="token number">0n</span> <span class="token punctuation">;</span>
		<span class="token keyword">var</span> largest <span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin">nat</span></span> <span class="token operator">:=</span> <span class="token number">1n</span> <span class="token punctuation">;</span>
		<span class="token keyword">var</span> left <span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin">nat</span></span> <span class="token operator">:=</span> <span class="token number">0n</span> <span class="token punctuation">;</span>
		<span class="token keyword">var</span> right <span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin">nat</span></span> <span class="token operator">:=</span> <span class="token number">0n</span> <span class="token punctuation">;</span>
		<span class="token keyword">var</span> c <span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin">nat</span></span> <span class="token operator">:=</span> <span class="token number">0n</span> <span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>largest <span class="token operator">=/=</span> i<span class="token punctuation">)</span> <span class="token keyword">block</span> <span class="token punctuation">{</span>
			c <span class="token operator">:=</span> c <span class="token operator">+</span> <span class="token number">1n</span> <span class="token punctuation">;</span>
			i <span class="token operator">:=</span> largest <span class="token punctuation">;</span>
			left <span class="token operator">:=</span> <span class="token number">2n</span> <span class="token operator">*</span> i <span class="token punctuation">;</span>
			right <span class="token operator">:=</span> left <span class="token operator">+</span> <span class="token number">1n</span> <span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> s<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">begin</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">heap_element_lt</span><span class="token punctuation">(</span><span class="token function">get_force</span><span class="token punctuation">(</span>left <span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token function">get_force</span><span class="token punctuation">(</span>i <span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">begin</span>
					largest <span class="token operator">:=</span> left <span class="token punctuation">;</span>
					<span class="token keyword">const</span> tmp <span class="token punctuation">:</span> <span class="token class-name">heap_element</span> <span class="token operator">=</span> <span class="token function">get_force</span><span class="token punctuation">(</span>i <span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token punctuation">;</span>
					h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:=</span> <span class="token function">get_force</span><span class="token punctuation">(</span>left <span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token punctuation">;</span>
					h<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">:=</span> tmp <span class="token punctuation">;</span>
				<span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">skip</span> <span class="token punctuation">;</span>
			<span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;=</span> s<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">begin</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">heap_element_lt</span><span class="token punctuation">(</span><span class="token function">get_force</span><span class="token punctuation">(</span>right <span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token function">get_force</span><span class="token punctuation">(</span>i <span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">begin</span>
					largest <span class="token operator">:=</span> right <span class="token punctuation">;</span>
					<span class="token keyword">const</span> tmp <span class="token punctuation">:</span> <span class="token class-name">heap_element</span> <span class="token operator">=</span> <span class="token function">get_force</span><span class="token punctuation">(</span>i <span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token punctuation">;</span>
					h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:=</span> <span class="token function">get_force</span><span class="token punctuation">(</span>right <span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token punctuation">;</span>
					h<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">:=</span> tmp <span class="token punctuation">;</span>
				<span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">skip</span> <span class="token punctuation">;</span>
			<span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">skip</span> <span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token keyword">end</span> <span class="token keyword">with</span> <span class="token punctuation">(</span>h <span class="token punctuation">,</span> result <span class="token punctuation">,</span> c<span class="token punctuation">)</span>

----------------------------------------------------