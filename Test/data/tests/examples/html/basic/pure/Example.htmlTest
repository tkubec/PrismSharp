queens n       = catch reverse (search n 1 []) with
  search n i p = throw p if i>n;
               = void [search n (i+1) ((i,j):p) | j = 1..n; safe (i,j) p];
  safe (i,j) p = ~any (check (i,j)) p;
  check (i1,j1) (i2,j2)
               = i1==i2 || j1==j2 || i1+j1==i2+j2 || i1-j1==i2-j2;
end;
----------------------------------------------------
queens n       <span class="token operator">=</span> <span class="token keyword">catch</span> <span class="token function">reverse</span> <span class="token punctuation">(</span>search n <span class="token number">1</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">with</span>
  search n i p <span class="token operator">=</span> <span class="token keyword">throw</span> p <span class="token keyword">if</span> i<span class="token operator">></span>n<span class="token punctuation">;</span>
               <span class="token operator">=</span> <span class="token function">void</span> <span class="token punctuation">[</span>search n <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">,</span>j<span class="token punctuation">)</span><span class="token operator">:</span>p<span class="token punctuation">)</span> <span class="token operator">|</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">..</span>n<span class="token punctuation">;</span> safe <span class="token punctuation">(</span>i<span class="token operator">,</span>j<span class="token punctuation">)</span> p<span class="token punctuation">]</span><span class="token punctuation">;</span>
  safe <span class="token punctuation">(</span>i<span class="token operator">,</span>j<span class="token punctuation">)</span> p <span class="token operator">=</span> <span class="token operator">~</span><span class="token function">any</span> <span class="token punctuation">(</span>check <span class="token punctuation">(</span>i<span class="token operator">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> p<span class="token punctuation">;</span>
  check <span class="token punctuation">(</span>i1<span class="token operator">,</span>j1<span class="token punctuation">)</span> <span class="token punctuation">(</span>i2<span class="token operator">,</span>j2<span class="token punctuation">)</span>
               <span class="token operator">=</span> i1<span class="token operator">==</span>i2 <span class="token operator">||</span> j1<span class="token operator">==</span>j2 <span class="token operator">||</span> i1<span class="token operator">+</span>j1<span class="token operator">==</span>i2<span class="token operator">+</span>j2 <span class="token operator">||</span> i1<span class="token operator">-</span>j1<span class="token operator">==</span>i2<span class="token operator">-</span>j2<span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span>

----------------------------------------------------