let x = a | b;
let y = c || d;
let add_one = |x: i32| -> i32 { 1i + x };
let printer = || { println!("x is: {}", x); };
----------------------------------------------------
<span class="token keyword">let</span> x <span class="token operator">=</span> a <span class="token operator">|</span> b<span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> c <span class="token operator">||</span> d<span class="token punctuation">;</span>
<span class="token keyword">let</span> add_one <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">{</span> <span class="token number">1i</span> <span class="token operator">+</span> x <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> printer <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"x is: {}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

----------------------------------------------------