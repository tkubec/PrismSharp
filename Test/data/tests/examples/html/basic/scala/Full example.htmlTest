// Contributed by John Williams
package examples

object lazyLib {

  /** Delay the evaluation of an expression until it is needed. */
  def delay[A](value: => A): Susp[A] = new SuspImpl[A](value)

  /** Get the value of a delayed expression. */
  implicit def force[A](s: Susp[A]): A = s()

  /**
   * Data type of suspended computations. (The name froms from ML.)
   */
  abstract class Susp[+A] extends Function0[A]

  /**
   * Implementation of suspended computations, separated from the
   * abstract class so that the type parameter can be invariant.
   */
  class SuspImpl[A](lazyValue: => A) extends Susp[A] {
    private var maybeValue: Option[A] = None

    override def apply() = maybeValue match {
      case None =>
        val value = lazyValue
        maybeValue = Some(value)
        value
	  case Some(value) =>
        value
    }

    override def toString() = maybeValue match {
      case None => "Susp(?)"
      case Some(value) => "Susp(" + value + ")"
    }
  }
}

object lazyEvaluation {
  import lazyLib._

  def main(args: Array[String]) = {
    val s: Susp[Int] = delay { println("evaluating..."); 3 }

    println("s     = " + s)       // show that s is unevaluated
    println("s()   = " + s())     // evaluate s
    println("s     = " + s)       // show that the value is saved
    println("2 + s = " + (2 + s)) // implicit call to force()

    val sl = delay { Some(3) }
    val sl1: Susp[Some[Int]] = sl
    val sl2: Susp[Option[Int]] = sl1   // the type is covariant

    println("sl2   = " + sl2)
    println("sl2() = " + sl2())
    println("sl2   = " + sl2)
  }
}
----------------------------------------------------
<span class="token comment">// Contributed by John Williams</span>
<span class="token keyword">package</span> <span class="token namespace">examples</span>

<span class="token keyword">object</span> lazyLib <span class="token punctuation">{</span>

  <span class="token comment">/** Delay the evaluation of an expression until it is needed. */</span>
  <span class="token keyword">def</span> delay<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">)</span><span class="token operator">:</span> Susp<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> SuspImpl<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>

  <span class="token comment">/** Get the value of a delayed expression. */</span>
  <span class="token keyword">implicit</span> <span class="token keyword">def</span> force<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>s<span class="token operator">:</span> Susp<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> A <span class="token operator">=</span> s<span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">/**
   * Data type of suspended computations. (The name froms from ML.)
   */</span>
  <span class="token keyword">abstract</span> <span class="token keyword">class</span> Susp<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span> <span class="token keyword">extends</span> Function0<span class="token punctuation">[</span>A<span class="token punctuation">]</span>

  <span class="token comment">/**
   * Implementation of suspended computations, separated from the
   * abstract class so that the type parameter can be invariant.
   */</span>
  <span class="token keyword">class</span> SuspImpl<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>lazyValue<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">)</span> <span class="token keyword">extends</span> Susp<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">var</span> maybeValue<span class="token operator">:</span> Option<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> None

    <span class="token keyword">override</span> <span class="token keyword">def</span> apply<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> maybeValue <span class="token keyword">match</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> None <span class="token keyword">=></span>
        <span class="token keyword">val</span> value <span class="token operator">=</span> lazyValue
        maybeValue <span class="token operator">=</span> Some<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        value
	  <span class="token keyword">case</span> Some<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">=></span>
        value
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">def</span> toString<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> maybeValue <span class="token keyword">match</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> None <span class="token keyword">=></span> <span class="token string">"Susp(?)"</span>
      <span class="token keyword">case</span> Some<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token string">"Susp("</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">")"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">object</span> lazyEvaluation <span class="token punctuation">{</span>
  <span class="token keyword">import</span> <span class="token namespace">lazyLib<span class="token punctuation">.</span></span>_

  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> s<span class="token operator">:</span> Susp<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> delay <span class="token punctuation">{</span> println<span class="token punctuation">(</span><span class="token string">"evaluating..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">3</span> <span class="token punctuation">}</span>

    println<span class="token punctuation">(</span><span class="token string">"s     = "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span>       <span class="token comment">// show that s is unevaluated</span>
    println<span class="token punctuation">(</span><span class="token string">"s()   = "</span> <span class="token operator">+</span> s<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">// evaluate s</span>
    println<span class="token punctuation">(</span><span class="token string">"s     = "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span>       <span class="token comment">// show that the value is saved</span>
    println<span class="token punctuation">(</span><span class="token string">"2 + s = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// implicit call to force()</span>

    <span class="token keyword">val</span> sl <span class="token operator">=</span> delay <span class="token punctuation">{</span> Some<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token keyword">val</span> sl1<span class="token operator">:</span> Susp<span class="token punctuation">[</span>Some<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> sl
    <span class="token keyword">val</span> sl2<span class="token operator">:</span> Susp<span class="token punctuation">[</span>Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> sl1   <span class="token comment">// the type is covariant</span>

    println<span class="token punctuation">(</span><span class="token string">"sl2   = "</span> <span class="token operator">+</span> sl2<span class="token punctuation">)</span>
    println<span class="token punctuation">(</span><span class="token string">"sl2() = "</span> <span class="token operator">+</span> sl2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    println<span class="token punctuation">(</span><span class="token string">"sl2   = "</span> <span class="token operator">+</span> sl2<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

----------------------------------------------------