pragma solidity >=0.4.22 <0.7.0;

/// @title Voting with delegation.
contract Ballot {
	// This declares a new complex type which will
	// be used for variables later.
	// It will represent a single voter.
	struct Voter {
		uint weight; // weight is accumulated by delegation
		bool voted;  // if true, that person already voted
		address delegate; // person delegated to
		uint vote;   // index of the voted proposal
	}

	// This is a type for a single proposal.
	struct Proposal {
		bytes32 name;   // short name (up to 32 bytes)
		uint voteCount; // number of accumulated votes
	}

	address public chairperson;

	// This declares a state variable that
	// stores a `Voter` struct for each possible address.
	mapping(address => Voter) public voters;

	// A dynamically-sized array of `Proposal` structs.
	Proposal[] public proposals;

	/// Create a new ballot to choose one of `proposalNames`.
	constructor(bytes32[] memory proposalNames) public {
		chairperson = msg.sender;
		voters[chairperson].weight = 1;

		// For each of the provided proposal names,
		// create a new proposal object and add it
		// to the end of the array.
		for (uint i = 0; i < proposalNames.length; i++) {
			// `Proposal({...})` creates a temporary
			// Proposal object and `proposals.push(...)`
			// appends it to the end of `proposals`.
			proposals.push(Proposal({
					name: proposalNames[i],
					voteCount: 0
			}));
		}
	}

	// Give `voter` the right to vote on this ballot.
	// May only be called by `chairperson`.
	function giveRightToVote(address voter) public {
		// If the first argument of `require` evaluates
		// to `false`, execution terminates and all
		// changes to the state and to Ether balances
		// are reverted.
		// This used to consume all gas in old EVM versions, but
		// not anymore.
		// It is often a good idea to use `require` to check if
		// functions are called correctly.
		// As a second argument, you can also provide an
		// explanation about what went wrong.
		require(
			msg.sender == chairperson,
			"Only chairperson can give right to vote."
		);
		require(
			!voters[voter].voted,
			"The voter already voted."
		);
		require(voters[voter].weight == 0);
		voters[voter].weight = 1;
	}

	/// Delegate your vote to the voter `to`.
	function delegate(address to) public {
		// assigns reference
		Voter storage sender = voters[msg.sender];
		require(!sender.voted, "You already voted.");

		require(to != msg.sender, "Self-delegation is disallowed.");

		// Forward the delegation as long as
		// `to` also delegated.
		// In general, such loops are very dangerous,
		// because if they run too long, they might
		// need more gas than is available in a block.
		// In this case, the delegation will not be executed,
		// but in other situations, such loops might
		// cause a contract to get "stuck" completely.
		while (voters[to].delegate != address(0)) {
			to = voters[to].delegate;

			// We found a loop in the delegation, not allowed.
			require(to != msg.sender, "Found loop in delegation.");
		}

		// Since `sender` is a reference, this
		// modifies `voters[msg.sender].voted`
		sender.voted = true;
		sender.delegate = to;
		Voter storage delegate_ = voters[to];
		if (delegate_.voted) {
			// If the delegate already voted,
			// directly add to the number of votes
			proposals[delegate_.vote].voteCount += sender.weight;
		} else {
			// If the delegate did not vote yet,
			// add to her weight.
			delegate_.weight += sender.weight;
		}
	}

	/// Give your vote (including votes delegated to you)
	/// to proposal `proposals[proposal].name`.
	function vote(uint proposal) public {
		Voter storage sender = voters[msg.sender];
		require(sender.weight != 0, "Has no right to vote");
		require(!sender.voted, "Already voted.");
		sender.voted = true;
		sender.vote = proposal;

		// If `proposal` is out of the range of the array,
		// this will throw automatically and revert all
		// changes.
		proposals[proposal].voteCount += sender.weight;
	}

	/// @dev Computes the winning proposal taking all
	/// previous votes into account.
	function winningProposal() public view
			returns (uint winningProposal_)
	{
		uint winningVoteCount = 0;
		for (uint p = 0; p < proposals.length; p++) {
			if (proposals[p].voteCount > winningVoteCount) {
				winningVoteCount = proposals[p].voteCount;
				winningProposal_ = p;
			}
		}
	}

	// Calls winningProposal() function to get the index
	// of the winner contained in the proposals array and then
	// returns the name of the winner
	function winnerName() public view
			returns (bytes32 winnerName_)
	{
		winnerName_ = proposals[winningProposal()].name;
	}
}
----------------------------------------------------
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">>=</span><span class="token version number">0.4.22</span> <span class="token operator">&lt;</span><span class="token version number">0.7.0</span><span class="token punctuation">;</span>

<span class="token comment">/// @title Voting with delegation.</span>
<span class="token keyword">contract</span> <span class="token class-name">Ballot</span> <span class="token punctuation">{</span>
	<span class="token comment">// This declares a new complex type which will</span>
	<span class="token comment">// be used for variables later.</span>
	<span class="token comment">// It will represent a single voter.</span>
	<span class="token keyword">struct</span> <span class="token class-name">Voter</span> <span class="token punctuation">{</span>
		<span class="token builtin">uint</span> weight<span class="token punctuation">;</span> <span class="token comment">// weight is accumulated by delegation</span>
		<span class="token builtin">bool</span> voted<span class="token punctuation">;</span>  <span class="token comment">// if true, that person already voted</span>
		<span class="token builtin">address</span> delegate<span class="token punctuation">;</span> <span class="token comment">// person delegated to</span>
		<span class="token builtin">uint</span> vote<span class="token punctuation">;</span>   <span class="token comment">// index of the voted proposal</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// This is a type for a single proposal.</span>
	<span class="token keyword">struct</span> <span class="token class-name">Proposal</span> <span class="token punctuation">{</span>
		<span class="token builtin">bytes32</span> name<span class="token punctuation">;</span>   <span class="token comment">// short name (up to 32 bytes)</span>
		<span class="token builtin">uint</span> voteCount<span class="token punctuation">;</span> <span class="token comment">// number of accumulated votes</span>
	<span class="token punctuation">}</span>

	<span class="token builtin">address</span> <span class="token keyword">public</span> chairperson<span class="token punctuation">;</span>

	<span class="token comment">// This declares a state variable that</span>
	<span class="token comment">// stores a `Voter` struct for each possible address.</span>
	<span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> Voter<span class="token punctuation">)</span> <span class="token keyword">public</span> voters<span class="token punctuation">;</span>

	<span class="token comment">// A dynamically-sized array of `Proposal` structs.</span>
	Proposal<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> proposals<span class="token punctuation">;</span>

	<span class="token comment">/// Create a new ballot to choose one of `proposalNames`.</span>
	<span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> proposalNames<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
		chairperson <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>
		voters<span class="token punctuation">[</span>chairperson<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

		<span class="token comment">// For each of the provided proposal names,</span>
		<span class="token comment">// create a new proposal object and add it</span>
		<span class="token comment">// to the end of the array.</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> proposalNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// `Proposal({...})` creates a temporary</span>
			<span class="token comment">// Proposal object and `proposals.push(...)`</span>
			<span class="token comment">// appends it to the end of `proposals`.</span>
			proposals<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Proposal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
					name<span class="token punctuation">:</span> proposalNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
					voteCount<span class="token punctuation">:</span> <span class="token number">0</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Give `voter` the right to vote on this ballot.</span>
	<span class="token comment">// May only be called by `chairperson`.</span>
	<span class="token keyword">function</span> <span class="token function">giveRightToVote</span><span class="token punctuation">(</span><span class="token builtin">address</span> voter<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
		<span class="token comment">// If the first argument of `require` evaluates</span>
		<span class="token comment">// to `false`, execution terminates and all</span>
		<span class="token comment">// changes to the state and to Ether balances</span>
		<span class="token comment">// are reverted.</span>
		<span class="token comment">// This used to consume all gas in old EVM versions, but</span>
		<span class="token comment">// not anymore.</span>
		<span class="token comment">// It is often a good idea to use `require` to check if</span>
		<span class="token comment">// functions are called correctly.</span>
		<span class="token comment">// As a second argument, you can also provide an</span>
		<span class="token comment">// explanation about what went wrong.</span>
		<span class="token keyword">require</span><span class="token punctuation">(</span>
			msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> chairperson<span class="token punctuation">,</span>
			<span class="token string">"Only chairperson can give right to vote."</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">require</span><span class="token punctuation">(</span>
			<span class="token operator">!</span>voters<span class="token punctuation">[</span>voter<span class="token punctuation">]</span><span class="token punctuation">.</span>voted<span class="token punctuation">,</span>
			<span class="token string">"The voter already voted."</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">require</span><span class="token punctuation">(</span>voters<span class="token punctuation">[</span>voter<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		voters<span class="token punctuation">[</span>voter<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">/// Delegate your vote to the voter `to`.</span>
	<span class="token keyword">function</span> <span class="token function">delegate</span><span class="token punctuation">(</span><span class="token builtin">address</span> to<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
		<span class="token comment">// assigns reference</span>
		Voter <span class="token keyword">storage</span> sender <span class="token operator">=</span> voters<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">require</span><span class="token punctuation">(</span><span class="token operator">!</span>sender<span class="token punctuation">.</span>voted<span class="token punctuation">,</span> <span class="token string">"You already voted."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">require</span><span class="token punctuation">(</span>to <span class="token operator">!=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> <span class="token string">"Self-delegation is disallowed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Forward the delegation as long as</span>
		<span class="token comment">// `to` also delegated.</span>
		<span class="token comment">// In general, such loops are very dangerous,</span>
		<span class="token comment">// because if they run too long, they might</span>
		<span class="token comment">// need more gas than is available in a block.</span>
		<span class="token comment">// In this case, the delegation will not be executed,</span>
		<span class="token comment">// but in other situations, such loops might</span>
		<span class="token comment">// cause a contract to get "stuck" completely.</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>voters<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">.</span>delegate <span class="token operator">!=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			to <span class="token operator">=</span> voters<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">.</span>delegate<span class="token punctuation">;</span>

			<span class="token comment">// We found a loop in the delegation, not allowed.</span>
			<span class="token keyword">require</span><span class="token punctuation">(</span>to <span class="token operator">!=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> <span class="token string">"Found loop in delegation."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// Since `sender` is a reference, this</span>
		<span class="token comment">// modifies `voters[msg.sender].voted`</span>
		sender<span class="token punctuation">.</span>voted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		sender<span class="token punctuation">.</span>delegate <span class="token operator">=</span> to<span class="token punctuation">;</span>
		Voter <span class="token keyword">storage</span> delegate_ <span class="token operator">=</span> voters<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>delegate_<span class="token punctuation">.</span>voted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// If the delegate already voted,</span>
			<span class="token comment">// directly add to the number of votes</span>
			proposals<span class="token punctuation">[</span>delegate_<span class="token punctuation">.</span>vote<span class="token punctuation">]</span><span class="token punctuation">.</span>voteCount <span class="token operator">+=</span> sender<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// If the delegate did not vote yet,</span>
			<span class="token comment">// add to her weight.</span>
			delegate_<span class="token punctuation">.</span>weight <span class="token operator">+=</span> sender<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">/// Give your vote (including votes delegated to you)</span>
	<span class="token comment">/// to proposal `proposals[proposal].name`.</span>
	<span class="token keyword">function</span> <span class="token function">vote</span><span class="token punctuation">(</span><span class="token builtin">uint</span> proposal<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
		Voter <span class="token keyword">storage</span> sender <span class="token operator">=</span> voters<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">require</span><span class="token punctuation">(</span>sender<span class="token punctuation">.</span>weight <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Has no right to vote"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">require</span><span class="token punctuation">(</span><span class="token operator">!</span>sender<span class="token punctuation">.</span>voted<span class="token punctuation">,</span> <span class="token string">"Already voted."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		sender<span class="token punctuation">.</span>voted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		sender<span class="token punctuation">.</span>vote <span class="token operator">=</span> proposal<span class="token punctuation">;</span>

		<span class="token comment">// If `proposal` is out of the range of the array,</span>
		<span class="token comment">// this will throw automatically and revert all</span>
		<span class="token comment">// changes.</span>
		proposals<span class="token punctuation">[</span>proposal<span class="token punctuation">]</span><span class="token punctuation">.</span>voteCount <span class="token operator">+=</span> sender<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">/// @dev Computes the winning proposal taking all</span>
	<span class="token comment">/// previous votes into account.</span>
	<span class="token keyword">function</span> <span class="token function">winningProposal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span>
			<span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> winningProposal_<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token builtin">uint</span> winningVoteCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> proposals<span class="token punctuation">.</span>length<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>proposals<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>voteCount <span class="token operator">></span> winningVoteCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				winningVoteCount <span class="token operator">=</span> proposals<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>voteCount<span class="token punctuation">;</span>
				winningProposal_ <span class="token operator">=</span> p<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Calls winningProposal() function to get the index</span>
	<span class="token comment">// of the winner contained in the proposals array and then</span>
	<span class="token comment">// returns the name of the winner</span>
	<span class="token keyword">function</span> <span class="token function">winnerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span>
			<span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes32</span> winnerName_<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		winnerName_ <span class="token operator">=</span> proposals<span class="token punctuation">[</span><span class="token function">winningProposal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

----------------------------------------------------