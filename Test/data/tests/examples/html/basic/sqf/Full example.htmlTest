#include "script_component.hpp"
/*
 * Author: BaerMitUmlaut
 * Handles any audible, visual and physical effects of fatigue.
 *
 * Arguments:
 * 0: Unit <OBJECT>
 * 1: Fatigue <NUMBER>
 * 2: Speed <NUMBER>
 * 3: Overexhausted <BOOL>
 *
 * Return Value:
 * None
 *
 * Example:
 * [_player, 0.5, 3.3, true] call ace_advanced_fatigue_fnc_handleEffects
 *
 * Public: No
 */
params ["_unit", "_fatigue", "_speed", "_overexhausted"];

#ifdef DEBUG_MODE_FULL
	systemChat str _fatigue;
	systemChat str vectorMagnitude velocity _unit;
#endif

// - Audible effects ----------------------------------------------------------
GVAR(lastBreath) = GVAR(lastBreath) + 1;
if (_fatigue > 0.4 && {GVAR(lastBreath) > (_fatigue * -10 + 9)} && {!underwater _unit}) then {
	switch (true) do {
		case (_fatigue < 0.6): {
			playSound (QGVAR(breathLow) + str(floor random 6));
		};
		case (_fatigue < 0.85): {
			playSound (QGVAR(breathMid) + str(floor random 6));
		};
		default {
			playSound (QGVAR(breathMax) + str(floor random 6));
		};
	};
	GVAR(lastBreath) = 0;
};

// - Visual effects -----------------------------------------------------------
GVAR(ppeBlackoutLast) = GVAR(ppeBlackoutLast) + 1;
if (GVAR(ppeBlackoutLast) == 1) then {
	GVAR(ppeBlackout) ppEffectAdjust [1,1,0,[0,0,0,1],[0,0,0,0],[1,1,1,1],[10,10,0,0,0,0.1,0.5]];
	GVAR(ppeBlackout) ppEffectCommit 1;
} else {
	if (_fatigue > 0.85) then {
		if (GVAR(ppeBlackoutLast) > (100 - _fatigue * 100) / 3) then {
			GVAR(ppeBlackout) ppEffectAdjust [1,1,0,[0,0,0,1],[0,0,0,0],[1,1,1,1],[2,2,0,0,0,0.1,0.5]];
			GVAR(ppeBlackout) ppEffectCommit 1;
			GVAR(ppeBlackoutLast) = 0;
		};
	};
};

// - Physical effects ---------------------------------------------------------
if (GVAR(isSwimming)) exitWith {
	if (GVAR(setAnimExclusions) isEqualTo []) then {
		_unit setAnimSpeedCoef linearConversion [0.7, 0.9, _fatigue, 1, 0.5, true];
	};
	if ((isSprintAllowed _unit) && {_fatigue > 0.7}) then {
		[_unit, "blockSprint", QUOTE(ADDON), true] call EFUNC(common,statusEffect_set);
	} else {
		if ((!isSprintAllowed _unit) && {_fatigue < 0.7}) then {
			[_unit, "blockSprint", QUOTE(ADDON), false] call EFUNC(common,statusEffect_set);
		};
	};
};
if ((getAnimSpeedCoef _unit) != 1) then {
	if (GVAR(setAnimExclusions) isEqualTo []) then {
		TRACE_1("reset",getAnimSpeedCoef _unit);
		_unit setAnimSpeedCoef 1;
	};
};

if (_overexhausted) then {
	[_unit, "forceWalk", QUOTE(ADDON), true] call EFUNC(common,statusEffect_set);
} else {
	if (isForcedWalk _unit && {_fatigue < 0.7}) then {
		[_unit, "forceWalk", QUOTE(ADDON), false] call EFUNC(common,statusEffect_set);
	} else {
		if ((isSprintAllowed _unit) && {_fatigue > 0.7}) then {
			[_unit, "blockSprint", QUOTE(ADDON), true] call EFUNC(common,statusEffect_set);
		} else {
			if ((!isSprintAllowed _unit) && {_fatigue < 0.6}) then {
				[_unit, "blockSprint", QUOTE(ADDON), false] call EFUNC(common,statusEffect_set);
			};
		};
	};
};

_unit setVariable [QGVAR(aimFatigue), _fatigue];

private _aimCoef = [missionNamespace, "ACE_setCustomAimCoef", "max"] call EFUNC(common,arithmeticGetResult);
_unit setCustomAimCoef _aimCoef;
----------------------------------------------------
<span class="token macro property"><span class="token directive keyword">#include</span> "script_component.hpp"</span>
<span class="token comment">/*
 * Author: BaerMitUmlaut
 * Handles any audible, visual and physical effects of fatigue.
 *
 * Arguments:
 * 0: Unit &lt;OBJECT>
 * 1: Fatigue &lt;NUMBER>
 * 2: Speed &lt;NUMBER>
 * 3: Overexhausted &lt;BOOL>
 *
 * Return Value:
 * None
 *
 * Example:
 * [_player, 0.5, 3.3, true] call ace_advanced_fatigue_fnc_handleEffects
 *
 * Public: No
 */</span>
<span class="token function">params</span> <span class="token punctuation">[</span><span class="token string">"_unit"</span><span class="token punctuation">,</span> <span class="token string">"_fatigue"</span><span class="token punctuation">,</span> <span class="token string">"_speed"</span><span class="token punctuation">,</span> <span class="token string">"_overexhausted"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive keyword">#ifdef</span> DEBUG_MODE_FULL</span>
	<span class="token function">systemChat</span> <span class="token function">str</span> _fatigue<span class="token punctuation">;</span>
	<span class="token function">systemChat</span> <span class="token function">str</span> <span class="token function">vectorMagnitude</span> <span class="token function">velocity</span> _unit<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive keyword">#endif</span></span>

<span class="token comment">// - Audible effects ----------------------------------------------------------</span>
GVAR<span class="token punctuation">(</span>lastBreath<span class="token punctuation">)</span> <span class="token operator">=</span> GVAR<span class="token punctuation">(</span>lastBreath<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>_fatigue <span class="token operator">></span> <span class="token number">0.4</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span>GVAR<span class="token punctuation">(</span>lastBreath<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>_fatigue <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span><span class="token operator">!</span><span class="token function">underwater</span> _unit<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token punctuation">(</span>_fatigue <span class="token operator">&lt;</span> <span class="token number">0.6</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
			<span class="token function">playSound</span> <span class="token punctuation">(</span>QGVAR<span class="token punctuation">(</span>breathLow<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span><span class="token function">floor</span> <span class="token function">random</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token punctuation">(</span>_fatigue <span class="token operator">&lt;</span> <span class="token number">0.85</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
			<span class="token function">playSound</span> <span class="token punctuation">(</span>QGVAR<span class="token punctuation">(</span>breathMid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span><span class="token function">floor</span> <span class="token function">random</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token keyword">default</span> <span class="token punctuation">{</span>
			<span class="token function">playSound</span> <span class="token punctuation">(</span>QGVAR<span class="token punctuation">(</span>breathMax<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span><span class="token function">floor</span> <span class="token function">random</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	GVAR<span class="token punctuation">(</span>lastBreath<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// - Visual effects -----------------------------------------------------------</span>
GVAR<span class="token punctuation">(</span>ppeBlackoutLast<span class="token punctuation">)</span> <span class="token operator">=</span> GVAR<span class="token punctuation">(</span>ppeBlackoutLast<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>GVAR<span class="token punctuation">(</span>ppeBlackoutLast<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token punctuation">{</span>
	GVAR<span class="token punctuation">(</span>ppeBlackout<span class="token punctuation">)</span> <span class="token function">ppEffectAdjust</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	GVAR<span class="token punctuation">(</span>ppeBlackout<span class="token punctuation">)</span> <span class="token function">ppEffectCommit</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>_fatigue <span class="token operator">></span> <span class="token number">0.85</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>GVAR<span class="token punctuation">(</span>ppeBlackoutLast<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> _fatigue <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token punctuation">{</span>
			GVAR<span class="token punctuation">(</span>ppeBlackout<span class="token punctuation">)</span> <span class="token function">ppEffectAdjust</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			GVAR<span class="token punctuation">(</span>ppeBlackout<span class="token punctuation">)</span> <span class="token function">ppEffectCommit</span> <span class="token number">1</span><span class="token punctuation">;</span>
			GVAR<span class="token punctuation">(</span>ppeBlackoutLast<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// - Physical effects ---------------------------------------------------------</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>GVAR<span class="token punctuation">(</span>isSwimming<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">exitWith</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>GVAR<span class="token punctuation">(</span>setAnimExclusions<span class="token punctuation">)</span> <span class="token function">isEqualTo</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token punctuation">{</span>
		_unit <span class="token function">setAnimSpeedCoef</span> <span class="token function">linearConversion</span> <span class="token punctuation">[</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> _fatigue<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isSprintAllowed</span> _unit<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span>_fatigue <span class="token operator">></span> <span class="token number">0.7</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token punctuation">{</span>
		<span class="token punctuation">[</span>_unit<span class="token punctuation">,</span> <span class="token string">"blockSprint"</span><span class="token punctuation">,</span> QUOTE<span class="token punctuation">(</span>ADDON<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token keyword">call</span> EFUNC<span class="token punctuation">(</span>common<span class="token punctuation">,</span>statusEffect_set<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSprintAllowed</span> _unit<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span>_fatigue <span class="token operator">&lt;</span> <span class="token number">0.7</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token punctuation">{</span>
			<span class="token punctuation">[</span>_unit<span class="token punctuation">,</span> <span class="token string">"blockSprint"</span><span class="token punctuation">,</span> QUOTE<span class="token punctuation">(</span>ADDON<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span> <span class="token keyword">call</span> EFUNC<span class="token punctuation">(</span>common<span class="token punctuation">,</span>statusEffect_set<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">getAnimSpeedCoef</span> _unit<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>GVAR<span class="token punctuation">(</span>setAnimExclusions<span class="token punctuation">)</span> <span class="token function">isEqualTo</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token punctuation">{</span>
		TRACE_1<span class="token punctuation">(</span><span class="token string">"reset"</span><span class="token punctuation">,</span><span class="token function">getAnimSpeedCoef</span> _unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
		_unit <span class="token function">setAnimSpeedCoef</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>_overexhausted<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token punctuation">{</span>
	<span class="token punctuation">[</span>_unit<span class="token punctuation">,</span> <span class="token string">"forceWalk"</span><span class="token punctuation">,</span> QUOTE<span class="token punctuation">(</span>ADDON<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token keyword">call</span> EFUNC<span class="token punctuation">(</span>common<span class="token punctuation">,</span>statusEffect_set<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isForcedWalk</span> _unit <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span>_fatigue <span class="token operator">&lt;</span> <span class="token number">0.7</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token punctuation">{</span>
		<span class="token punctuation">[</span>_unit<span class="token punctuation">,</span> <span class="token string">"forceWalk"</span><span class="token punctuation">,</span> QUOTE<span class="token punctuation">(</span>ADDON<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span> <span class="token keyword">call</span> EFUNC<span class="token punctuation">(</span>common<span class="token punctuation">,</span>statusEffect_set<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isSprintAllowed</span> _unit<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span>_fatigue <span class="token operator">></span> <span class="token number">0.7</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token punctuation">{</span>
			<span class="token punctuation">[</span>_unit<span class="token punctuation">,</span> <span class="token string">"blockSprint"</span><span class="token punctuation">,</span> QUOTE<span class="token punctuation">(</span>ADDON<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token keyword">call</span> EFUNC<span class="token punctuation">(</span>common<span class="token punctuation">,</span>statusEffect_set<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSprintAllowed</span> _unit<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span>_fatigue <span class="token operator">&lt;</span> <span class="token number">0.6</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token punctuation">{</span>
				<span class="token punctuation">[</span>_unit<span class="token punctuation">,</span> <span class="token string">"blockSprint"</span><span class="token punctuation">,</span> QUOTE<span class="token punctuation">(</span>ADDON<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span> <span class="token keyword">call</span> EFUNC<span class="token punctuation">(</span>common<span class="token punctuation">,</span>statusEffect_set<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

_unit <span class="token function">setVariable</span> <span class="token punctuation">[</span>QGVAR<span class="token punctuation">(</span>aimFatigue<span class="token punctuation">)</span><span class="token punctuation">,</span> _fatigue<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> _aimCoef <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">missionNamespace</span><span class="token punctuation">,</span> <span class="token string">"ACE_setCustomAimCoef"</span><span class="token punctuation">,</span> <span class="token string">"max"</span><span class="token punctuation">]</span> <span class="token keyword">call</span> EFUNC<span class="token punctuation">(</span>common<span class="token punctuation">,</span>arithmeticGetResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
_unit <span class="token function">setCustomAimCoef</span> _aimCoef<span class="token punctuation">;</span>

----------------------------------------------------