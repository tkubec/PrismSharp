//an overloaded function
def adder(a int, b int) => a + b
def adder(a int, b float) => adder(a, b as int)
def adder(a int) => adder(a, 10)

//a default value
def powerPlus(a int, raiseTo = 2, c int) => a ** raiseTo + c

//call our function with a default value
res1 = powerPlus(4, 10)//second argument defaults to '2'
res2 = powerPlus(4, 3, 10)//second argument provided

//calling a function with named parameters:
def powerAdder(a int, raiseATo = 2, b int, raiseBTo = 2) => a**raiseATo + b**raiseBTo
res3 = powerAdder(2, 4, raiseATo=3)//equivalent to: powerAdder(2, 3, 4, 2)

//varargs:
def sum(elms int...) int {
  res = 0
  for(elm in elms){
    res += elm
  }
  res
}

//call our function with a vararg
thesum = sum(1, 2, 3, 4, 5)

//partially defined typedef
typedef NameMap<X> = java.util.ArrayList<java.util.HashMap<String, java.util.HashSet<X>>>

//using typedefs...
nm NameMap<String>= new NameMap<String>()

@Annotation
class MyClass(a int, b int, c String){
  override toString() => 'MyClass({a}, {b}, "{c}")'
}

mc1 = MyClass(12, 14, "hi there")
mc2 = mc1@ //copy mc1

assert mc1 == mc2//same values!
assert mc1 &<> mc2//different objects!

mc3 = mc1@(a = 100)//copy mc1 but overwrite value of a
assert 'MyClass(100, 14, "hi there")' == mc3.toString()

mc4 = mc1@(<a, b>)//copy mc1 but exclude a and b
assert 'MyClass(0, 0, "hi there")' == mc3.toString()
----------------------------------------------------
[
	["comment", "//an overloaded function"],

	["keyword", "def"],
	["function", "adder"],
	["punctuation", "("],
	"a ",
	["keyword", "int"],
	["punctuation", ","],
	" b ",
	["keyword", "int"],
	["punctuation", ")"],
	["operator", "=>"],
	" a ",
	["operator", "+"],
	" b\n",

	["keyword", "def"],
	["function", "adder"],
	["punctuation", "("],
	"a ",
	["keyword", "int"],
	["punctuation", ","],
	" b ",
	["keyword", "float"],
	["punctuation", ")"],
	["operator", "=>"],
	" adder",
	["punctuation", "("],
	"a",
	["punctuation", ","],
	" b ",
	["operator", "as"],
	["keyword", "int"],
	["punctuation", ")"],

	["keyword", "def"],
	["function", "adder"],
	["punctuation", "("],
	"a ",
	["keyword", "int"],
	["punctuation", ")"],
	["operator", "=>"],
	" adder",
	["punctuation", "("],
	"a",
	["punctuation", ","],
	["number", "10"],
	["punctuation", ")"],

	["comment", "//a default value"],

	["keyword", "def"],
	["function", "powerPlus"],
	["punctuation", "("],
	"a ",
	["keyword", "int"],
	["punctuation", ","],
	" raiseTo ",
	["operator", "="],
	["number", "2"],
	["punctuation", ","],
	" c ",
	["keyword", "int"],
	["punctuation", ")"],
	["operator", "=>"],
	" a ",
	["operator", "*"],
	["operator", "*"],
	" raiseTo ",
	["operator", "+"],
	" c\n\n",

	["comment", "//call our function with a default value"],

	"\nres1 ",
	["operator", "="],
	" powerPlus",
	["punctuation", "("],
	["number", "4"],
	["punctuation", ","],
	["number", "10"],
	["punctuation", ")"],
	["comment", "//second argument defaults to '2'"],

	"\nres2 ",
	["operator", "="],
	" powerPlus",
	["punctuation", "("],
	["number", "4"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", ","],
	["number", "10"],
	["punctuation", ")"],
	["comment", "//second argument provided"],

	["comment", "//calling a function with named parameters:"],

	["keyword", "def"],
	["function", "powerAdder"],
	["punctuation", "("],
	"a ",
	["keyword", "int"],
	["punctuation", ","],
	" raiseATo ",
	["operator", "="],
	["number", "2"],
	["punctuation", ","],
	" b ",
	["keyword", "int"],
	["punctuation", ","],
	" raiseBTo ",
	["operator", "="],
	["number", "2"],
	["punctuation", ")"],
	["operator", "=>"],
	" a",
	["operator", "*"],
	["operator", "*"],
	"raiseATo ",
	["operator", "+"],
	" b",
	["operator", "*"],
	["operator", "*"],
	"raiseBTo\nres3 ",
	["operator", "="],
	" powerAdder",
	["punctuation", "("],
	["number", "2"],
	["punctuation", ","],
	["number", "4"],
	["punctuation", ","],
	" raiseATo",
	["operator", "="],
	["number", "3"],
	["punctuation", ")"],
	["comment", "//equivalent to: powerAdder(2, 3, 4, 2)"],

	["comment", "//varargs:"],

	["keyword", "def"],
	["function", "sum"],
	["punctuation", "("],
	"elms ",
	["keyword", "int"],
	["punctuation", "."],
	["punctuation", "."],
	["punctuation", "."],
	["punctuation", ")"],
	["keyword", "int"],
	["punctuation", "{"],

	"\n  res ",
	["operator", "="],
	["number", "0"],

	["keyword", "for"],
	["punctuation", "("],
	"elm ",
	["keyword", "in"],
	" elms",
	["punctuation", ")"],
	["punctuation", "{"],

	"\n    res ",
	["operator", "+="],
	" elm\n  ",

	["punctuation", "}"],

	"\n  res\n",

	["punctuation", "}"],

	["comment", "//call our function with a vararg"],

	"\nthesum ",
	["operator", "="],
	" sum",
	["punctuation", "("],
	["number", "1"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", ","],
	["number", "4"],
	["punctuation", ","],
	["number", "5"],
	["punctuation", ")"],

	["comment", "//partially defined typedef"],

	["keyword", "typedef"],
	" NameMap",
	["operator", "<"],
	"X",
	["operator", ">"],
	["operator", "="],
	" java",
	["punctuation", "."],
	"util",
	["punctuation", "."],
	"ArrayList",
	["operator", "<"],
	"java",
	["punctuation", "."],
	"util",
	["punctuation", "."],
	"HashMap",
	["operator", "<"],
	"String",
	["punctuation", ","],
	" java",
	["punctuation", "."],
	"util",
	["punctuation", "."],
	"HashSet",
	["operator", "<"],
	"X",
	["operator", ">"],
	["operator", ">"],
	["operator", ">"],

	["comment", "//using typedefs..."],

	"\nnm NameMap",
	["operator", "<"],
	"String",
	["operator", ">="],
	["keyword", "new"],
	" NameMap",
	["operator", "<"],
	"String",
	["operator", ">"],
	["punctuation", "("],
	["punctuation", ")"],

	["annotation", "@Annotation"],

	["keyword", "class"],
	" MyClass",
	["punctuation", "("],
	"a ",
	["keyword", "int"],
	["punctuation", ","],
	" b ",
	["keyword", "int"],
	["punctuation", ","],
	" c String",
	["punctuation", ")"],
	["punctuation", "{"],

	["keyword", "override"],
	" toString",
	["punctuation", "("],
	["punctuation", ")"],
	["operator", "=>"],
	["string-literal", [
		["string", "'MyClass("],
		["interpolation", [
			["punctuation", "{"],
			"a",
			["punctuation", "}"]
		]],
		["string", ", "],
		["interpolation", [
			["punctuation", "{"],
			"b",
			["punctuation", "}"]
		]],
		["string", ", \""],
		["interpolation", [
			["punctuation", "{"],
			"c",
			["punctuation", "}"]
		]],
		["string", "\")'"]
	]],

	["punctuation", "}"],

	"\n\nmc1 ",
	["operator", "="],
	" MyClass",
	["punctuation", "("],
	["number", "12"],
	["punctuation", ","],
	["number", "14"],
	["punctuation", ","],
	["string-literal", [
		["string", "\"hi there\""]
	]],
	["punctuation", ")"],

	"\nmc2 ",
	["operator", "="],
	" mc1",
	["annotation", "@"],
	["comment", "//copy mc1"],

	["keyword", "assert"],
	" mc1 ",
	["operator", "=="],
	" mc2",
	["comment", "//same values!"],

	["keyword", "assert"],
	" mc1 ",
	["operator", "&<>"],
	" mc2",
	["comment", "//different objects!"],

	"\n\nmc3 ",
	["operator", "="],
	" mc1",
	["annotation", "@"],
	["punctuation", "("],
	"a ",
	["operator", "="],
	["number", "100"],
	["punctuation", ")"],
	["comment", "//copy mc1 but overwrite value of a"],

	["keyword", "assert"],
	["string-literal", [
		["string", "'MyClass(100, 14, \"hi there\")'"]
	]],
	["operator", "=="],
	" mc3",
	["punctuation", "."],
	"toString",
	["punctuation", "("],
	["punctuation", ")"],

	"\n\nmc4 ",
	["operator", "="],
	" mc1",
	["annotation", "@"],
	["punctuation", "("],
	["operator", "<"],
	"a",
	["punctuation", ","],
	" b",
	["operator", ">"],
	["punctuation", ")"],
	["comment", "//copy mc1 but exclude a and b"],

	["keyword", "assert"],
	["string-literal", [
		["string", "'MyClass(0, 0, \"hi there\")'"]
	]],
	["operator", "=="],
	" mc3",
	["punctuation", "."],
	"toString",
	["punctuation", "("],
	["punctuation", ")"]
]

----------------------------------------------------