# Example from http://learnxinyminutes.com/docs/elixir/

# Single line comments start with a number symbol.

# There's no multi-line comment,
# but you can stack multiple comments.

# To use the elixir shell use the `iex` command.
# Compile your modules with the `elixirc` command.

# Both should be in your path if you installed elixir correctly.

## ---------------------------
## -- Basic types
## ---------------------------

# There are numbers
3    # integer
0x1F # integer
3.0  # float

# Atoms, that are literals, a constant with name. They start with `:`.
:hello # atom

# Tuples that are stored contiguously in memory.
{1,2,3} # tuple

# We can access a tuple element with the `elem` function:
elem({1, 2, 3}, 0) #=> 1

# Lists that are implemented as linked lists.
[1,2,3] # list

# We can access the head and tail of a list as follows:
[head | tail] = [1,2,3]
head #=> 1
tail #=> [2,3]

# In elixir, just like in Erlang, the `=` denotes pattern matching and
# not an assignment.
#
# This means that the left-hand side (pattern) is matched against a
# right-hand side.
#
# This is how the above example of accessing the head and tail of a list works.

# A pattern match will error when the sides don't match, in this example
# the tuples have different sizes.
# {a, b, c} = {1, 2} #=> ** (MatchError) no match of right hand side value: {1,2}

# There are also binaries
<<1,2,3>> # binary

# Strings and char lists
"hello" # string
'hello' # char list

# Multi-line strings
"""
I'm a multi-line
string.
"""
#=> "I'm a multi-line\nstring.\n"

# Strings are all encoded in UTF-8:
"héllò" #=> "héllò"

# Strings are really just binaries, and char lists are just lists.
<<?a, ?b, ?c>> #=> "abc"
[?a, ?b, ?c]   #=> 'abc'

# `?a` in elixir returns the ASCII integer for the letter `a`
?a #=> 97

# To concatenate lists use `++`, for binaries use `<>`
[1,2,3] ++ [4,5]     #=> [1,2,3,4,5]
'hello ' ++ 'world'  #=> 'hello world'

<<1,2,3>> <> <<4,5>> #=> <<1,2,3,4,5>>
"hello " <> "world"  #=> "hello world"

# Ranges are represented as `start..end` (both inclusive)
1..10 #=> 1..10
lower..upper = 1..10 # Can use pattern matching on ranges as well
[lower, upper] #=> [1, 10]

## ---------------------------
## -- Operators
## ---------------------------

# Some math
1 + 1  #=> 2
10 - 5 #=> 5
5 * 2  #=> 10
10 / 2 #=> 5.0

# In elixir the operator `/` always returns a float.

# To do integer division use `div`
div(10, 2) #=> 5

# To get the division remainder use `rem`
rem(10, 3) #=> 1

# There are also boolean operators: `or`, `and` and `not`.
# These operators expect a boolean as their first argument.
true and true #=> true
false or true #=> true
# 1 and true    #=> ** (ArgumentError) argument error

# Elixir also provides `||`, `&&` and `!` which accept arguments of any type.
# All values except `false` and `nil` will evaluate to true.
1 || true  #=> 1
false && 1 #=> false
nil && 20  #=> nil
!true #=> false

# For comparisons we have: `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<` and `>`
1 == 1 #=> true
1 != 1 #=> false
1 < 2  #=> true

# `===` and `!==` are more strict when comparing integers and floats:
1 == 1.0  #=> true
1 === 1.0 #=> false

# We can also compare two different data types:
1 < :hello #=> true

# The overall sorting order is defined below:
# number < atom < reference < functions < port < pid < tuple < list < bit string

# To quote Joe Armstrong on this: "The actual order is not important,
# but that a total ordering is well defined is important."

## ---------------------------
## -- Control Flow
## ---------------------------

# `if` expression
if false do
  "This will never be seen"
else
  "This will"
end

# There's also `unless`
unless true do
  "This will never be seen"
else
  "This will"
end

# Remember pattern matching? Many control-flow structures in elixir rely on it.

# `case` allows us to compare a value against many patterns:
case {:one, :two} do
  {:four, :five} ->
    "This won't match"
  {:one, x} ->
    "This will match and bind `x` to `:two`"
  _ ->
    "This will match any value"
end

# It's common to bind the value to `_` if we don't need it.
# For example, if only the head of a list matters to us:
[head | _] = [1,2,3]
head #=> 1

# For better readability we can do the following:
[head | _tail] = [:a, :b, :c]
head #=> :a

# `cond` lets us check for many conditions at the same time.
# Use `cond` instead of nesting many `if` expressions.
cond do
  1 + 1 == 3 ->
    "I will never be seen"
  2 * 5 == 12 ->
    "Me neither"
  1 + 2 == 3 ->
    "But I will"
end

# It is common to set the last condition equal to `true`, which will always match.
cond do
  1 + 1 == 3 ->
    "I will never be seen"
  2 * 5 == 12 ->
    "Me neither"
  true ->
    "But I will (this is essentially an else)"
end

# `try/catch` is used to catch values that are thrown, it also supports an
# `after` clause that is invoked whether or not a value is caught.
try do
  throw(:hello)
catch
  message -> "Got #{message}."
after
  IO.puts("I'm the after clause.")
end
#=> I'm the after clause
# "Got :hello"

## ---------------------------
## -- Modules and Functions
## ---------------------------

# Anonymous functions (notice the dot)
square = fn(x) -> x * x end
square.(5) #=> 25

# They also accept many clauses and guards.
# Guards let you fine tune pattern matching,
# they are indicated by the `when` keyword:
f = fn
  x, y when x > 0 -> x + y
  x, y -> x * y
end

f.(1, 3)  #=> 4
f.(-1, 3) #=> -3

# Elixir also provides many built-in functions.
# These are available in the current scope.
is_number(10)    #=> true
is_list("hello") #=> false
elem({1,2,3}, 0) #=> 1

# You can group several functions into a module. Inside a module use `def`
# to define your functions.
defmodule Math do
  def sum(a, b) do
    a + b
  end

  def square(x) do
    x * x
  end
end

Math.sum(1, 2)  #=> 3
Math.square(3) #=> 9

# To compile our simple Math module save it as `math.ex` and use `elixirc`
# in your terminal: elixirc math.ex

# Inside a module we can define functions with `def` and private functions with `defp`.
# A function defined with `def` is available to be invoked from other modules,
# a private function can only be invoked locally.
defmodule PrivateMath do
  def sum(a, b) do
    do_sum(a, b)
  end

  defp do_sum(a, b) do
    a + b
  end
end

PrivateMath.sum(1, 2)    #=> 3
# PrivateMath.do_sum(1, 2) #=> ** (UndefinedFunctionError)

# Function declarations also support guards and multiple clauses:
defmodule Geometry do
  def area({:rectangle, w, h}) do
    w * h
  end

  def area({:circle, r}) when is_number(r) do
    3.14 * r * r
  end
end

Geometry.area({:rectangle, 2, 3}) #=> 6
Geometry.area({:circle, 3})       #=> 28.25999999999999801048
# Geometry.area({:circle, "not_a_number"})
#=> ** (FunctionClauseError) no function clause matching in Geometry.area/1

# Due to immutability, recursion is a big part of elixir
defmodule Recursion do
  def sum_list([head | tail], acc) do
    sum_list(tail, acc + head)
  end

  def sum_list([], acc) do
    acc
  end
end

Recursion.sum_list([1,2,3], 0) #=> 6

# Elixir modules support attributes, there are built-in attributes and you
# may also add custom ones.
defmodule MyMod do
  @moduledoc """
  This is a built-in attribute on a example module.
  """

  @my_data 100 # This is a custom attribute.
  IO.inspect(@my_data) #=> 100
end

## ---------------------------
## -- Structs and Exceptions
## ---------------------------

# Structs are extensions on top of maps that bring default values,
# compile-time guarantees and polymorphism into Elixir.
defmodule Person do
  defstruct name: nil, age: 0, height: 0
end

joe_info = %Person{ name: "Joe", age: 30, height: 180 }
#=> %Person{age: 30, height: 180, name: "Joe"}

# Access the value of name
joe_info.name #=> "Joe"

# Update the value of age
older_joe_info = %{ joe_info | age: 31 }
#=> %Person{age: 31, height: 180, name: "Joe"}

# The `try` block with the `rescue` keyword is used to handle exceptions
try do
  raise "some error"
rescue
  RuntimeError -> "rescued a runtime error"
  _error -> "this will rescue any error"
end

# All exceptions have a message
try do
  raise "some error"
rescue
  x in [RuntimeError] ->
    x.message
end

## ---------------------------
## -- Concurrency
## ---------------------------

# Elixir relies on the actor model for concurrency. All we need to write
# concurrent programs in elixir are three primitives: spawning processes,
# sending messages and receiving messages.

# To start a new process we use the `spawn` function, which takes a function
# as argument.
f = fn -> 2 * 2 end #=> #Function<erl_eval.20.80484245>
spawn(f) #=> #PID<0.40.0>

# `spawn` returns a pid (process identifier), you can use this pid to send
# messages to the process. To do message passing we use the `send` operator.
# For all of this to be useful we need to be able to receive messages. This is
# achieved with the `receive` mechanism:
defmodule Geometry do
  def area_loop do
    receive do
      {:rectangle, w, h} ->
        IO.puts("Area = #{w * h}")
        area_loop()
      {:circle, r} ->
        IO.puts("Area = #{3.14 * r * r}")
        area_loop()
    end
  end
end

# Compile the module and create a process that evaluates `area_loop` in the shell
pid = spawn(fn -> Geometry.area_loop() end) #=> #PID<0.40.0>

# Send a message to `pid` that will match a pattern in the receive statement
send pid, {:rectangle, 2, 3}
#=> Area = 6
#   {:rectangle,2,3}

send pid, {:circle, 2}
#=> Area = 12.56000000000000049738
#   {:circle,2}

# The shell is also a process, you can use `self` to get the current pid
self() #=> #PID<0.27.0>
----------------------------------------------------
[
	["comment", "# Example from http://learnxinyminutes.com/docs/elixir/"],

	["comment", "# Single line comments start with a number symbol."],

	["comment", "# There's no multi-line comment,"],
	["comment", "# but you can stack multiple comments."],

	["comment", "# To use the elixir shell use the `iex` command."],
	["comment", "# Compile your modules with the `elixirc` command."],

	["comment", "# Both should be in your path if you installed elixir correctly."],

	["comment", "## ---------------------------"],
	["comment", "## -- Basic types"],
	["comment", "## ---------------------------"],

	["comment", "# There are numbers"],
	["number", "3"], ["comment", "# integer"],
	["number", "0x1F"], ["comment", "# integer"],
	["number", "3.0"], ["comment", "# float"],

	["comment", "# Atoms, that are literals, a constant with name. They start with `:`."],
	["atom", ":hello"], ["comment", "# atom"],

	["comment", "# Tuples that are stored contiguously in memory."],

	["punctuation", "{"],
	["number", "1"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", "}"],
	["comment", "# tuple"],

	["comment", "# We can access a tuple element with the `elem` function:"],

	["function", "elem"],
	["punctuation", "("],
	["punctuation", "{"],
	["number", "1"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", "}"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ")"],
	["comment", "#=> 1"],

	["comment", "# Lists that are implemented as linked lists."],

	["punctuation", "["],
	["number", "1"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", "]"],
	["comment", "# list"],

	["comment", "# We can access the head and tail of a list as follows:"],

	["punctuation", "["],
	"head ",
	["operator", "|"],
	" tail",
	["punctuation", "]"],
	["operator", "="],
	["punctuation", "["],
	["number", "1"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", "]"],

	"\nhead ",
	["comment", "#=> 1"],

	"\ntail ",
	["comment", "#=> [2,3]"],

	["comment", "# In elixir, just like in Erlang, the `=` denotes pattern matching and"],
	["comment", "# not an assignment."],
	["comment", "#"],
	["comment", "# This means that the left-hand side (pattern) is matched against a"],
	["comment", "# right-hand side."],
	["comment", "#"],
	["comment", "# This is how the above example of accessing the head and tail of a list works."],

	["comment", "# A pattern match will error when the sides don't match, in this example"],
	["comment", "# the tuples have different sizes."],
	["comment", "# {a, b, c} = {1, 2} #=> ** (MatchError) no match of right hand side value: {1,2}"],

	["comment", "# There are also binaries"],

	["punctuation", "<<"],
	["number", "1"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", ">>"],
	["comment", "# binary"],

	["comment", "# Strings and char lists"],
	["string", ["\"hello\""]], ["comment", "# string"],
	["string", ["'hello'"]], ["comment", "# char list"],

	["comment", "# Multi-line strings"],
	["string", ["\"\"\"\nI'm a multi-line\nstring.\n\"\"\""]],
	["comment", "#=> \"I'm a multi-line\\nstring.\\n\""],

	["comment", "# Strings are all encoded in UTF-8:"],
	["string", ["\"héllò\""]], ["comment", "#=> \"héllò\""],

	["comment", "# Strings are really just binaries, and char lists are just lists."],

	["punctuation", "<<"],
	"?a",
	["punctuation", ","],
	" ?b",
	["punctuation", ","],
	" ?c",
	["punctuation", ">>"],
	["comment", "#=> \"abc\""],

	["punctuation", "["],
	"?a",
	["punctuation", ","],
	" ?b",
	["punctuation", ","],
	" ?c",
	["punctuation", "]"],
	["comment", "#=> 'abc'"],

	["comment", "# `?a` in elixir returns the ASCII integer for the letter `a`"],
	"\n?a ", ["comment", "#=> 97"],

	["comment", "# To concatenate lists use `++`, for binaries use `<>`"],

	["punctuation", "["],
	["number", "1"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", "]"],
	["operator", "++"],
	["punctuation", "["],
	["number", "4"],
	["punctuation", ","],
	["number", "5"],
	["punctuation", "]"],
	["comment", "#=> [1,2,3,4,5]"],

	["string", ["'hello '"]],
	["operator", "++"],
	["string", ["'world'"]],
	["comment", "#=> 'hello world'"],

	["punctuation", "<<"],
	["number", "1"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", ">>"],
	["operator", "<>"],
	["punctuation", "<<"],
	["number", "4"],
	["punctuation", ","],
	["number", "5"],
	["punctuation", ">>"],
	["comment", "#=> <<1,2,3,4,5>>"],

	["string", ["\"hello \""]],
	["operator", "<>"],
	["string", ["\"world\""]],
	["comment", "#=> \"hello world\""],

	["comment", "# Ranges are represented as `start..end` (both inclusive)"],

	["number", "1"],
	["operator", ".."],
	["number", "10"],
	["comment", "#=> 1..10"],

	"\nlower",
	["operator", ".."],
	"upper ",
	["operator", "="],
	["number", "1"],
	["operator", ".."],
	["number", "10"],
	["comment", "# Can use pattern matching on ranges as well"],

	["punctuation", "["],
	"lower",
	["punctuation", ","],
	" upper",
	["punctuation", "]"],
	["comment", "#=> [1, 10]"],

	["comment", "## ---------------------------"],
	["comment", "## -- Operators"],
	["comment", "## ---------------------------"],

	["comment", "# Some math"],
	["number", "1"], ["operator", "+"], ["number", "1"], ["comment", "#=> 2"],
	["number", "10"], ["operator", "-"], ["number", "5"], ["comment", "#=> 5"],
	["number", "5"], ["operator", "*"], ["number", "2"], ["comment", "#=> 10"],
	["number", "10"], ["operator", "/"], ["number", "2"], ["comment", "#=> 5.0"],

	["comment", "# In elixir the operator `/` always returns a float."],

	["comment", "# To do integer division use `div`"],

	["function", "div"],
	["punctuation", "("],
	["number", "10"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ")"],
	["comment", "#=> 5"],

	["comment", "# To get the division remainder use `rem`"],

	["function", "rem"],
	["punctuation", "("],
	["number", "10"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", ")"],
	["comment", "#=> 1"],

	["comment", "# There are also boolean operators: `or`, `and` and `not`."],

	["comment", "# These operators expect a boolean as their first argument."],

	["boolean", "true"],
	["keyword", "and"],
	["boolean", "true"],
	["comment", "#=> true"],

	["boolean", "false"],
	["keyword", "or"],
	["boolean", "true"],
	["comment", "#=> true"],

	["comment", "# 1 and true    #=> ** (ArgumentError) argument error"],

	["comment", "# Elixir also provides `||`, `&&` and `!` which accept arguments of any type."],

	["comment", "# All values except `false` and `nil` will evaluate to true."],

	["number", "1"],
	["operator", "||"],
	["boolean", "true"],
	["comment", "#=> 1"],

	["boolean", "false"],
	["operator", "&&"],
	["number", "1"],
	["comment", "#=> false"],

	["boolean", "nil"],
	["operator", "&&"],
	["number", "20"],
	["comment", "#=> nil"],

	["operator", "!"],
	["boolean", "true"],
	["comment", "#=> false"],

	["comment", "# For comparisons we have: `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<` and `>`"],

	["number", "1"],
	["operator", "=="],
	["number", "1"],
	["comment", "#=> true"],

	["number", "1"],
	["operator", "!="],
	["number", "1"],
	["comment", "#=> false"],

	["number", "1"],
	["operator", "<"],
	["number", "2"],
	["comment", "#=> true"],

	["comment", "# `===` and `!==` are more strict when comparing integers and floats:"],

	["number", "1"],
	["operator", "=="],
	["number", "1.0"],
	["comment", "#=> true"],

	["number", "1"],
	["operator", "==="],
	["number", "1.0"],
	["comment", "#=> false"],

	["comment", "# We can also compare two different data types:"],

	["number", "1"],
	["operator", "<"],
	["atom", ":hello"],
	["comment", "#=> true"],

	["comment", "# The overall sorting order is defined below:"],
	["comment", "# number < atom < reference < functions < port < pid < tuple < list < bit string"],

	["comment", "# To quote Joe Armstrong on this: \"The actual order is not important,"],
	["comment", "# but that a total ordering is well defined is important.\""],

	["comment", "## ---------------------------"],
	["comment", "## -- Control Flow"],
	["comment", "## ---------------------------"],

	["comment", "# `if` expression"],
	["keyword", "if"], ["boolean", "false"], ["keyword", "do"],
	["string", ["\"This will never be seen\""]],
	["keyword", "else"],
	["string", ["\"This will\""]],
	["keyword", "end"],

	["comment", "# There's also `unless`"],
	["keyword", "unless"], ["boolean", "true"], ["keyword", "do"],
	["string", ["\"This will never be seen\""]],
	["keyword", "else"],
	["string", ["\"This will\""]],
	["keyword", "end"],

	["comment", "# Remember pattern matching? Many control-flow structures in elixir rely on it."],

	["comment", "# `case` allows us to compare a value against many patterns:"],

	["keyword", "case"],
	["punctuation", "{"],
	["atom", ":one"],
	["punctuation", ","],
	["atom", ":two"],
	["punctuation", "}"],
	["keyword", "do"],

	["punctuation", "{"],
	["atom", ":four"],
	["punctuation", ","],
	["atom", ":five"],
	["punctuation", "}"],
	["operator", "->"],

	["string", ["\"This won't match\""]],

	["punctuation", "{"],
	["atom", ":one"],
	["punctuation", ","],
	" x",
	["punctuation", "}"],
	["operator", "->"],

	["string", ["\"This will match and bind `x` to `:two`\""]],

	"\n  _ ",
	["operator", "->"],

	["string", ["\"This will match any value\""]],

	["keyword", "end"],

	["comment", "# It's common to bind the value to `_` if we don't need it."],

	["comment", "# For example, if only the head of a list matters to us:"],

	["punctuation", "["],
	"head ",
	["operator", "|"],
	" _",
	["punctuation", "]"],
	["operator", "="],
	["punctuation", "["],
	["number", "1"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", "]"],

	"\nhead ",
	["comment", "#=> 1"],

	["comment", "# For better readability we can do the following:"],

	["punctuation", "["],
	"head ",
	["operator", "|"],
	" _tail",
	["punctuation", "]"],
	["operator", "="],
	["punctuation", "["],
	["atom", ":a"],
	["punctuation", ","],
	["atom", ":b"],
	["punctuation", ","],
	["atom", ":c"],
	["punctuation", "]"],

	"\nhead ",
	["comment", "#=> :a"],

	["comment", "# `cond` lets us check for many conditions at the same time."],

	["comment", "# Use `cond` instead of nesting many `if` expressions."],

	["keyword", "cond"],
	["keyword", "do"],

	["number", "1"],
	["operator", "+"],
	["number", "1"],
	["operator", "=="],
	["number", "3"],
	["operator", "->"],

	["string", ["\"I will never be seen\""]],

	["number", "2"],
	["operator", "*"],
	["number", "5"],
	["operator", "=="],
	["number", "12"],
	["operator", "->"],

	["string", ["\"Me neither\""]],

	["number", "1"],
	["operator", "+"],
	["number", "2"],
	["operator", "=="],
	["number", "3"],
	["operator", "->"],

	["string", ["\"But I will\""]],

	["keyword", "end"],

	["comment", "# It is common to set the last condition equal to `true`, which will always match."],

	["keyword", "cond"],
	["keyword", "do"],

	["number", "1"],
	["operator", "+"],
	["number", "1"],
	["operator", "=="],
	["number", "3"],
	["operator", "->"],

	["string", ["\"I will never be seen\""]],

	["number", "2"],
	["operator", "*"],
	["number", "5"],
	["operator", "=="],
	["number", "12"],
	["operator", "->"],

	["string", ["\"Me neither\""]],

	["boolean", "true"],
	["operator", "->"],

	["string", ["\"But I will (this is essentially an else)\""]],

	["keyword", "end"],

	["comment", "# `try/catch` is used to catch values that are thrown, it also supports an"],

	["comment", "# `after` clause that is invoked whether or not a value is caught."],

	["keyword", "try"],
	["keyword", "do"],

	["function", "throw"],
	["punctuation", "("],
	["atom", ":hello"],
	["punctuation", ")"],

	["keyword", "catch"],

	"\n  message ",
	["operator", "->"],
	["string", [
		"\"Got ",
		["interpolation", [
			["delimiter", "#{"],
			"message",
			["delimiter", "}"]
		]],
		".\""
	]],

	["keyword", "after"],

	["module", "IO"],
	["punctuation", "."],
	["function", "puts"],
	["punctuation", "("],
	["string", ["\"I'm the after clause.\""]],
	["punctuation", ")"],

	["keyword", "end"],

	["comment", "#=> I'm the after clause"],

	["comment", "# \"Got :hello\""],

	["comment", "## ---------------------------"],
	["comment", "## -- Modules and Functions"],
	["comment", "## ---------------------------"],

	["comment", "# Anonymous functions (notice the dot)"],

	"\nsquare ",
	["operator", "="],
	["function", "fn"],
	["punctuation", "("],
	"x",
	["punctuation", ")"],
	["operator", "->"],
	" x ",
	["operator", "*"],
	" x ",
	["keyword", "end"],

	["function", "square"],
	["punctuation", "."],
	["punctuation", "("],
	["number", "5"],
	["punctuation", ")"],
	["comment", "#=> 25"],

	["comment", "# They also accept many clauses and guards."],

	["comment", "# Guards let you fine tune pattern matching,"],

	["comment", "# they are indicated by the `when` keyword:"],

	"\nf ",
	["operator", "="],
	["keyword", "fn"],

	"\n  x",
	["punctuation", ","],
	" y ",
	["keyword", "when"],
	" x ",
	["operator", ">"],
	["number", "0"],
	["operator", "->"],
	" x ",
	["operator", "+"],
	" y\n  x",
	["punctuation", ","],
	" y ",
	["operator", "->"],
	" x ",
	["operator", "*"],
	" y\n",

	["keyword", "end"],

	["function", "f"],
	["punctuation", "."],
	["punctuation", "("],
	["number", "1"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", ")"],
	["comment", "#=> 4"],

	["function", "f"],
	["punctuation", "."],
	["punctuation", "("],
	["operator", "-"],
	["number", "1"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", ")"],
	["comment", "#=> -3"],

	["comment", "# Elixir also provides many built-in functions."],

	["comment", "# These are available in the current scope."],

	["function", "is_number"],
	["punctuation", "("],
	["number", "10"],
	["punctuation", ")"],
	["comment", "#=> true"],

	["function", "is_list"],
	["punctuation", "("],
	["string", ["\"hello\""]],
	["punctuation", ")"],
	["comment", "#=> false"],

	["function", "elem"],
	["punctuation", "("],
	["punctuation", "{"],
	["number", "1"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", "}"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ")"],
	["comment", "#=> 1"],

	["comment", "# You can group several functions into a module. Inside a module use `def`"],

	["comment", "# to define your functions."],

	["keyword", "defmodule"],
	["module", "Math"],
	["keyword", "do"],

	["keyword", "def"],
	["function", "sum"],
	["punctuation", "("],
	"a",
	["punctuation", ","],
	" b",
	["punctuation", ")"],
	["keyword", "do"],

	"\n    a ",
	["operator", "+"],
	" b\n  ",

	["keyword", "end"],

	["keyword", "def"],
	["function", "square"],
	["punctuation", "("],
	"x",
	["punctuation", ")"],
	["keyword", "do"],

	"\n    x ",
	["operator", "*"],
	" x\n  ",

	["keyword", "end"],

	["keyword", "end"],

	["module", "Math"],
	["punctuation", "."],
	["function", "sum"],
	["punctuation", "("],
	["number", "1"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ")"],
	["comment", "#=> 3"],

	["module", "Math"],
	["punctuation", "."],
	["function", "square"],
	["punctuation", "("],
	["number", "3"],
	["punctuation", ")"],
	["comment", "#=> 9"],

	["comment", "# To compile our simple Math module save it as `math.ex` and use `elixirc`"],
	["comment", "# in your terminal: elixirc math.ex"],

	["comment", "# Inside a module we can define functions with `def` and private functions with `defp`."],

	["comment", "# A function defined with `def` is available to be invoked from other modules,"],

	["comment", "# a private function can only be invoked locally."],

	["keyword", "defmodule"],
	["module", "PrivateMath"],
	["keyword", "do"],

	["keyword", "def"],
	["function", "sum"],
	["punctuation", "("],
	"a",
	["punctuation", ","],
	" b",
	["punctuation", ")"],
	["keyword", "do"],

	["function", "do_sum"],
	["punctuation", "("],
	"a",
	["punctuation", ","],
	" b",
	["punctuation", ")"],

	["keyword", "end"],

	["keyword", "defp"],
	["function", "do_sum"],
	["punctuation", "("],
	"a",
	["punctuation", ","],
	" b",
	["punctuation", ")"],
	["keyword", "do"],

	"\n    a ",
	["operator", "+"],
	" b\n  ",

	["keyword", "end"],

	["keyword", "end"],

	["module", "PrivateMath"],
	["punctuation", "."],
	["function", "sum"],
	["punctuation", "("],
	["number", "1"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ")"],
	["comment", "#=> 3"],

	["comment", "# PrivateMath.do_sum(1, 2) #=> ** (UndefinedFunctionError)"],

	["comment", "# Function declarations also support guards and multiple clauses:"],

	["keyword", "defmodule"],
	["module", "Geometry"],
	["keyword", "do"],

	["keyword", "def"],
	["function", "area"],
	["punctuation", "("],
	["punctuation", "{"],
	["atom", ":rectangle"],
	["punctuation", ","],
	" w",
	["punctuation", ","],
	" h",
	["punctuation", "}"],
	["punctuation", ")"],
	["keyword", "do"],

	"\n    w ",
	["operator", "*"],
	" h\n  ",

	["keyword", "end"],

	["keyword", "def"],
	["function", "area"],
	["punctuation", "("],
	["punctuation", "{"],
	["atom", ":circle"],
	["punctuation", ","],
	" r",
	["punctuation", "}"],
	["punctuation", ")"],
	["keyword", "when"],
	["function", "is_number"],
	["punctuation", "("],
	"r",
	["punctuation", ")"],
	["keyword", "do"],

	["number", "3.14"],
	["operator", "*"],
	" r ",
	["operator", "*"],
	" r\n  ",

	["keyword", "end"],

	["keyword", "end"],

	["module", "Geometry"],
	["punctuation", "."],
	["function", "area"],
	["punctuation", "("],
	["punctuation", "{"],
	["atom", ":rectangle"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", "}"],
	["punctuation", ")"],
	["comment", "#=> 6"],

	["module", "Geometry"],
	["punctuation", "."],
	["function", "area"],
	["punctuation", "("],
	["punctuation", "{"],
	["atom", ":circle"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", "}"],
	["punctuation", ")"],
	["comment", "#=> 28.25999999999999801048"],

	["comment", "# Geometry.area({:circle, \"not_a_number\"})"],

	["comment", "#=> ** (FunctionClauseError) no function clause matching in Geometry.area/1"],

	["comment", "# Due to immutability, recursion is a big part of elixir"],

	["keyword", "defmodule"],
	["module", "Recursion"],
	["keyword", "do"],

	["keyword", "def"],
	["function", "sum_list"],
	["punctuation", "("],
	["punctuation", "["],
	"head ",
	["operator", "|"],
	" tail",
	["punctuation", "]"],
	["punctuation", ","],
	" acc",
	["punctuation", ")"],
	["keyword", "do"],

	["function", "sum_list"],
	["punctuation", "("],
	"tail",
	["punctuation", ","],
	" acc ",
	["operator", "+"],
	" head",
	["punctuation", ")"],

	["keyword", "end"],

	["keyword", "def"],
	["function", "sum_list"],
	["punctuation", "("],
	["punctuation", "["],
	["punctuation", "]"],
	["punctuation", ","],
	" acc",
	["punctuation", ")"],
	["keyword", "do"],

	"\n    acc\n  ",

	["keyword", "end"],

	["keyword", "end"],

	["module", "Recursion"],
	["punctuation", "."],
	["function", "sum_list"],
	["punctuation", "("],
	["punctuation", "["],
	["number", "1"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", "]"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ")"],
	["comment", "#=> 6"],

	["comment", "# Elixir modules support attributes, there are built-in attributes and you"],
	["comment", "# may also add custom ones."],
	["keyword", "defmodule"], ["module", "MyMod"], ["keyword", "do"],
	["doc", [
		["attribute", "@moduledoc"],
		["string", "\"\"\"\n  This is a built-in attribute on a example module.\n  \"\"\""]
	]],

	["attribute", "@my_data"],
	["number", "100"],
	["comment", "# This is a custom attribute."],

	["module", "IO"],
	["punctuation", "."],
	["function", "inspect"],
	["punctuation", "("],
	["attribute", "@my_data"],
	["punctuation", ")"],
	["comment", "#=> 100"],

	["keyword", "end"],

	["comment", "## ---------------------------"],
	["comment", "## -- Structs and Exceptions"],
	["comment", "## ---------------------------"],

	["comment", "# Structs are extensions on top of maps that bring default values,"],

	["comment", "# compile-time guarantees and polymorphism into Elixir."],

	["keyword", "defmodule"],
	["module", "Person"],
	["keyword", "do"],

	["keyword", "defstruct"],
	["attr-name", "name:"],
	["boolean", "nil"],
	["punctuation", ","],
	["attr-name", "age:"],
	["number", "0"],
	["punctuation", ","],
	["attr-name", "height:"],
	["number", "0"],

	["keyword", "end"],

	"\n\njoe_info ",
	["operator", "="],
	["punctuation", "%"],
	["module", "Person"],
	["punctuation", "{"],
	["attr-name", "name:"],
	["string", ["\"Joe\""]],
	["punctuation", ","],
	["attr-name", "age:"],
	["number", "30"],
	["punctuation", ","],
	["attr-name", "height:"],
	["number", "180"],
	["punctuation", "}"],

	["comment", "#=> %Person{age: 30, height: 180, name: \"Joe\"}"],

	["comment", "# Access the value of name"],
	"\njoe_info", ["punctuation", "."], "name ", ["comment", "#=> \"Joe\""],

	["comment", "# Update the value of age"],

	"\nolder_joe_info ",
	["operator", "="],
	["punctuation", "%"],
	["punctuation", "{"],
	" joe_info ",
	["operator", "|"],
	["attr-name", "age:"],
	["number", "31"],
	["punctuation", "}"],

	["comment", "#=> %Person{age: 31, height: 180, name: \"Joe\"}"],

	["comment", "# The `try` block with the `rescue` keyword is used to handle exceptions"],
	["keyword", "try"],
	["keyword", "do"],
	["keyword", "raise"],
	["string", ["\"some error\""]],
	["keyword", "rescue"],
	["module", "RuntimeError"],
	["operator", "->"],
	["string", ["\"rescued a runtime error\""]],
	"\n  _error ",
	["operator", "->"],
	["string", ["\"this will rescue any error\""]],
	["keyword", "end"],

	["comment", "# All exceptions have a message"],

	["keyword", "try"],
	["keyword", "do"],

	["keyword", "raise"],
	["string", ["\"some error\""]],

	["keyword", "rescue"],

	"\n  x ",
	["operator", "in"],
	["punctuation", "["],
	["module", "RuntimeError"],
	["punctuation", "]"],
	["operator", "->"],

	"\n    x",
	["punctuation", "."],
	"message\n",

	["keyword", "end"],

	["comment", "## ---------------------------"],
	["comment", "## -- Concurrency"],
	["comment", "## ---------------------------"],

	["comment", "# Elixir relies on the actor model for concurrency. All we need to write"],
	["comment", "# concurrent programs in elixir are three primitives: spawning processes,"],
	["comment", "# sending messages and receiving messages."],

	["comment", "# To start a new process we use the `spawn` function, which takes a function"],

	["comment", "# as argument."],

	"\nf ",
	["operator", "="],
	["keyword", "fn"],
	["operator", "->"],
	["number", "2"],
	["operator", "*"],
	["number", "2"],
	["keyword", "end"],
	["comment", "#=> #Function<erl_eval.20.80484245>"],

	["function", "spawn"],
	["punctuation", "("],
	"f",
	["punctuation", ")"],
	["comment", "#=> #PID<0.40.0>"],

	["comment", "# `spawn` returns a pid (process identifier), you can use this pid to send"],

	["comment", "# messages to the process. To do message passing we use the `send` operator."],

	["comment", "# For all of this to be useful we need to be able to receive messages. This is"],

	["comment", "# achieved with the `receive` mechanism:"],

	["keyword", "defmodule"],
	["module", "Geometry"],
	["keyword", "do"],

	["keyword", "def"],
	" area_loop ",
	["keyword", "do"],

	"\n    receive ",
	["keyword", "do"],

	["punctuation", "{"],
	["atom", ":rectangle"],
	["punctuation", ","],
	" w",
	["punctuation", ","],
	" h",
	["punctuation", "}"],
	["operator", "->"],

	["module", "IO"],
	["punctuation", "."],
	["function", "puts"],
	["punctuation", "("],
	["string", [
		"\"Area = ",
		["interpolation", [
			["delimiter", "#{"],
			"w ",
			["operator", "*"],
			" h",
			["delimiter", "}"]
		]],
		"\""
	]],
	["punctuation", ")"],

	["function", "area_loop"],
	["punctuation", "("],
	["punctuation", ")"],

	["punctuation", "{"],
	["atom", ":circle"],
	["punctuation", ","],
	" r",
	["punctuation", "}"],
	["operator", "->"],

	["module", "IO"],
	["punctuation", "."],
	["function", "puts"],
	["punctuation", "("],
	["string", [
		"\"Area = ",
		["interpolation", [
			["delimiter", "#{"],
			["number", "3.14"],
			["operator", "*"],
			" r ",
			["operator", "*"],
			" r",
			["delimiter", "}"]
		]],
		"\""
	]],
	["punctuation", ")"],

	["function", "area_loop"],
	["punctuation", "("],
	["punctuation", ")"],

	["keyword", "end"],

	["keyword", "end"],

	["keyword", "end"],

	["comment", "# Compile the module and create a process that evaluates `area_loop` in the shell"],

	"\npid ",
	["operator", "="],
	["function", "spawn"],
	["punctuation", "("],
	["keyword", "fn"],
	["operator", "->"],
	["module", "Geometry"],
	["punctuation", "."],
	["function", "area_loop"],
	["punctuation", "("],
	["punctuation", ")"],
	["keyword", "end"],
	["punctuation", ")"],
	["comment", "#=> #PID<0.40.0>"],

	["comment", "# Send a message to `pid` that will match a pattern in the receive statement"],

	"\nsend pid",
	["punctuation", ","],
	["punctuation", "{"],
	["atom", ":rectangle"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ","],
	["number", "3"],
	["punctuation", "}"],

	["comment", "#=> Area = 6"],

	["comment", "#   {:rectangle,2,3}"],

	"\n\nsend pid",
	["punctuation", ","],
	["punctuation", "{"],
	["atom", ":circle"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", "}"],

	["comment", "#=> Area = 12.56000000000000049738"],

	["comment", "#   {:circle,2}"],

	["comment", "# The shell is also a process, you can use `self` to get the current pid"],

	["function", "self"],
	["punctuation", "("],
	["punctuation", ")"],
	["comment", "#=> #PID<0.27.0>"]
]

----------------------------------------------------