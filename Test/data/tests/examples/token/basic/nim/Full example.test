# Example from http://nim-by-example.github.io/oop_macro/
import macros

macro class*(head: expr, body: stmt): stmt {.immediate.} =
  # The macro is immediate so that it doesn't
  # resolve identifiers passed to it

  var typeName, baseName: NimNode

  if head.kind == nnkIdent:
    # `head` is expression `typeName`
    # echo head.treeRepr
    # --------------------
    # Ident !"Animal"
    typeName = head

  elif head.kind == nnkInfix and $head[0] == "of":
    # `head` is expression `typeName of baseClass`
    # echo head.treeRepr
    # --------------------
    # Infix
    #   Ident !"of"
    #   Ident !"Animal"
    #   Ident !"RootObj"
    typeName = head[1]
    baseName = head[2]

  else:
    quit "Invalid node: " & head.lispRepr

  # echo treeRepr(body)
  # --------------------
  # StmtList
  #   VarSection
  #     IdentDefs
  #       Ident !"name"
  #       Ident !"string"
  #       Empty
  #     IdentDefs
  #       Ident !"age"
  #       Ident !"int"
  #       Empty
  #   MethodDef
  #     Ident !"vocalize"
  #     Empty
  #     Empty
  #     FormalParams
  #       Ident !"string"
  #     Empty
  #     Empty
  #     StmtList
  #       StrLit ...
  #   MethodDef
  #     Ident !"age_human_yrs"
  #     Empty
  #     Empty
  #     FormalParams
  #       Ident !"int"
  #     Empty
  #     Empty
  #     StmtList
  #       DotExpr
  #         Ident !"this"
  #         Ident !"age"

  # create a new stmtList for the result
  result = newStmtList()

  # var declarations will be turned into object fields
  var recList = newNimNode(nnkRecList)

  # Iterate over the statements, adding `this: T`
  # to the parameters of functions
  for node in body.children:
    case node.kind:

      of nnkMethodDef, nnkProcDef:
        # inject `this: T` into the arguments
        let p = copyNimTree(node.params)
        p.insert(1, newIdentDefs(ident"this", typeName))
        node.params = p
        result.add(node)

      of nnkVarSection:
        # variables get turned into fields of the type.
        for n in node.children:
          recList.add(n)

      else:
        result.add(node)

  # The following prints out the AST structure:
  #
  # import macros
  # dumptree:
  #   type X = ref object of Y
  #     z: int
  # --------------------
  # TypeSection
  #   TypeDef
  #     Ident !"X"
  #     Empty
  #     RefTy
  #       ObjectTy
  #         Empty
  #         OfInherit
  #           Ident !"Y"
  #         RecList
  #           IdentDefs
  #             Ident !"z"
  #             Ident !"int"
  #             Empty

  result.insert(0,
    if baseName == nil:
      quote do:
        type `typeName` = ref object of RootObj
    else:
      quote do:
        type `typeName` = ref object of `baseName`
  )
  # Inspect the tree structure:
  #
  # echo result.treeRepr
  # --------------------
  # StmtList
  #   StmtList
  #     TypeSection
  #       TypeDef
  #         Ident !"Animal"
  #         Empty
  #         RefTy
  #           ObjectTy
  #             Empty
  #             OfInherit
  #               Ident !"RootObj"
  #             Empty   <= We want to replace this
  #   MethodDef
  #   ...

  result[0][0][0][2][0][2] = recList

  # Lets inspect the human-readable version of the output
  # echo repr(result)
  # Output:
  #  type
  #    Animal = ref object of RootObj
  #      name: string
  #      age: int
  #
  #  method vocalize(this: Animal): string =
  #    "..."
  #
  #  method age_human_yrs(this: Animal): int =
  #    this.age

# ---

class Animal of RootObj:
  var name: string
  var age: int
  method vocalize: string = "..."
  method age_human_yrs: int = this.age # `this` is injected

class Dog of Animal:
  method vocalize: string = "woof"
  method age_human_yrs: int = this.age * 7

class Cat of Animal:
  method vocalize: string = "meow"

# ---

var animals: seq[Animal] = @[]
animals.add(Dog(name: "Sparky", age: 10))
animals.add(Cat(name: "Mitten", age: 10))

for a in animals:
  echo a.vocalize()
  echo a.age_human_yrs()
----------------------------------------------------
[
	["comment", "# Example from http://nim-by-example.github.io/oop_macro/"],
	["keyword", "import"], " macros\n\n",

	["keyword", "macro"],
	["function", [
		"class",
		["operator", "*"]
	]],
	["punctuation", "("],
	"head",
	["operator", ":"],
	" expr",
	["punctuation", ","],
	" body",
	["operator", ":"],
	" stmt",
	["punctuation", ")"],
	["operator", ":"],
	" stmt ",
	["punctuation", "{."],
	"immediate",
	["punctuation", ".}"],
	["operator", "="],

	["comment", "# The macro is immediate so that it doesn't"],

	["comment", "# resolve identifiers passed to it"],

	["keyword", "var"],
	" typeName",
	["punctuation", ","],
	" baseName",
	["operator", ":"],
	" NimNode\n\n  ",

	["keyword", "if"],
	" head",
	["operator", "."],
	"kind ",
	["operator", "=="],
	" nnkIdent",
	["operator", ":"],

	["comment", "# `head` is expression `typeName`"],

	["comment", "# echo head.treeRepr"],

	["comment", "# --------------------"],

	["comment", "# Ident !\"Animal\""],

	"\n    typeName ",
	["operator", "="],
	" head\n\n  ",

	["keyword", "elif"],
	" head",
	["operator", "."],
	"kind ",
	["operator", "=="],
	" nnkInfix ",
	["operator", "and"],
	["operator", "$"],
	"head",
	["punctuation", "["],
	["number", "0"],
	["punctuation", "]"],
	["operator", "=="],
	["string", "\"of\""],
	["operator", ":"],

	["comment", "# `head` is expression `typeName of baseClass`"],

	["comment", "# echo head.treeRepr"],

	["comment", "# --------------------"],

	["comment", "# Infix"],

	["comment", "#   Ident !\"of\""],

	["comment", "#   Ident !\"Animal\""],

	["comment", "#   Ident !\"RootObj\""],

	"\n    typeName ",
	["operator", "="],
	" head",
	["punctuation", "["],
	["number", "1"],
	["punctuation", "]"],

	"\n    baseName ",
	["operator", "="],
	" head",
	["punctuation", "["],
	["number", "2"],
	["punctuation", "]"],

	["keyword", "else"],
	["operator", ":"],

	"\n    quit ",
	["string", "\"Invalid node: \""],
	["operator", "&"],
	" head",
	["operator", "."],
	"lispRepr\n\n  ",

	["comment", "# echo treeRepr(body)"],
	["comment", "# --------------------"],
	["comment", "# StmtList"],
	["comment", "#   VarSection"],
	["comment", "#     IdentDefs"],
	["comment", "#       Ident !\"name\""],
	["comment", "#       Ident !\"string\""],
	["comment", "#       Empty"],
	["comment", "#     IdentDefs"],
	["comment", "#       Ident !\"age\""],
	["comment", "#       Ident !\"int\""],
	["comment", "#       Empty"],
	["comment", "#   MethodDef"],
	["comment", "#     Ident !\"vocalize\""],
	["comment", "#     Empty"],
	["comment", "#     Empty"],
	["comment", "#     FormalParams"],
	["comment", "#       Ident !\"string\""],
	["comment", "#     Empty"],
	["comment", "#     Empty"],
	["comment", "#     StmtList"],
	["comment", "#       StrLit ..."],
	["comment", "#   MethodDef"],
	["comment", "#     Ident !\"age_human_yrs\""],
	["comment", "#     Empty"],
	["comment", "#     Empty"],
	["comment", "#     FormalParams"],
	["comment", "#       Ident !\"int\""],
	["comment", "#     Empty"],
	["comment", "#     Empty"],
	["comment", "#     StmtList"],
	["comment", "#       DotExpr"],
	["comment", "#         Ident !\"this\""],
	["comment", "#         Ident !\"age\""],

	["comment", "# create a new stmtList for the result"],

	"\n  result ",
	["operator", "="],
	["function", ["newStmtList"]],
	["punctuation", "("],
	["punctuation", ")"],

	["comment", "# var declarations will be turned into object fields"],

	["keyword", "var"],
	" recList ",
	["operator", "="],
	["function", ["newNimNode"]],
	["punctuation", "("],
	"nnkRecList",
	["punctuation", ")"],

	["comment", "# Iterate over the statements, adding `this: T`"],

	["comment", "# to the parameters of functions"],

	["keyword", "for"],
	" node ",
	["operator", "in"],
	" body",
	["operator", "."],
	"children",
	["operator", ":"],

	["keyword", "case"],
	" node",
	["operator", "."],
	"kind",
	["operator", ":"],

	["operator", "of"],
	" nnkMethodDef",
	["punctuation", ","],
	" nnkProcDef",
	["operator", ":"],

	["comment", "# inject `this: T` into the arguments"],

	["keyword", "let"],
	" p ",
	["operator", "="],
	["function", ["copyNimTree"]],
	["punctuation", "("],
	"node",
	["operator", "."],
	"params",
	["punctuation", ")"],

	"\n        p",
	["operator", "."],
	["function", ["insert"]],
	["punctuation", "("],
	["number", "1"],
	["punctuation", ","],
	["function", ["newIdentDefs"]],
	["punctuation", "("],
	["string", "ident\"this\""],
	["punctuation", ","],
	" typeName",
	["punctuation", ")"],
	["punctuation", ")"],

	"\n        node",
	["operator", "."],
	"params ",
	["operator", "="],
	" p\n        result",
	["operator", "."],
	["function", ["add"]],
	["punctuation", "("],
	"node",
	["punctuation", ")"],

	["operator", "of"],
	" nnkVarSection",
	["operator", ":"],

	["comment", "# variables get turned into fields of the type."],

	["keyword", "for"],
	" n ",
	["operator", "in"],
	" node",
	["operator", "."],
	"children",
	["operator", ":"],

	"\n          recList",
	["operator", "."],
	["function", ["add"]],
	["punctuation", "("],
	"n",
	["punctuation", ")"],

	["keyword", "else"],
	["operator", ":"],

	"\n        result",
	["operator", "."],
	["function", ["add"]],
	["punctuation", "("],
	"node",
	["punctuation", ")"],

	["comment", "# The following prints out the AST structure:"],
	["comment", "#"],
	["comment", "# import macros"],
	["comment", "# dumptree:"],
	["comment", "#   type X = ref object of Y"],
	["comment", "#     z: int"],
	["comment", "# --------------------"],
	["comment", "# TypeSection"],
	["comment", "#   TypeDef"],
	["comment", "#     Ident !\"X\""],
	["comment", "#     Empty"],
	["comment", "#     RefTy"],
	["comment", "#       ObjectTy"],
	["comment", "#         Empty"],
	["comment", "#         OfInherit"],
	["comment", "#           Ident !\"Y\""],
	["comment", "#         RecList"],
	["comment", "#           IdentDefs"],
	["comment", "#             Ident !\"z\""],
	["comment", "#             Ident !\"int\""],
	["comment", "#             Empty"],

	"\n\n  result",
	["operator", "."],
	["function", ["insert"]],
	["punctuation", "("],
	["number", "0"],
	["punctuation", ","],

	["keyword", "if"],
	" baseName ",
	["operator", "=="],
	["keyword", "nil"],
	["operator", ":"],

	"\n      quote ",
	["keyword", "do"],
	["operator", ":"],

	["keyword", "type"],
	["identifier", [
		["punctuation", "`"],
		"typeName",
		["punctuation", "`"]
	]],
	["operator", "="],
	["keyword", "ref"],
	["keyword", "object"],
	["operator", "of"],
	" RootObj\n    ",

	["keyword", "else"],
	["operator", ":"],

	"\n      quote ",
	["keyword", "do"],
	["operator", ":"],

	["keyword", "type"],
	["identifier", [
		["punctuation", "`"],
		"typeName",
		["punctuation", "`"]
	]],
	["operator", "="],
	["keyword", "ref"],
	["keyword", "object"],
	["operator", "of"],
	["identifier", [
		["punctuation", "`"],
		"baseName",
		["punctuation", "`"]
	]],

	["punctuation", ")"],

	["comment", "# Inspect the tree structure:"],

	["comment", "#"],

	["comment", "# echo result.treeRepr"],

	["comment", "# --------------------"],

	["comment", "# StmtList"],

	["comment", "#   StmtList"],

	["comment", "#     TypeSection"],

	["comment", "#       TypeDef"],

	["comment", "#         Ident !\"Animal\""],

	["comment", "#         Empty"],

	["comment", "#         RefTy"],

	["comment", "#           ObjectTy"],

	["comment", "#             Empty"],

	["comment", "#             OfInherit"],

	["comment", "#               Ident !\"RootObj\""],

	["comment", "#             Empty   <= We want to replace this"],

	["comment", "#   MethodDef"],

	["comment", "#   ..."],

	"\n\n  result",
	["punctuation", "["],
	["number", "0"],
	["punctuation", "]"],
	["punctuation", "["],
	["number", "0"],
	["punctuation", "]"],
	["punctuation", "["],
	["number", "0"],
	["punctuation", "]"],
	["punctuation", "["],
	["number", "2"],
	["punctuation", "]"],
	["punctuation", "["],
	["number", "0"],
	["punctuation", "]"],
	["punctuation", "["],
	["number", "2"],
	["punctuation", "]"],
	["operator", "="],
	" recList\n\n  ",

	["comment", "# Lets inspect the human-readable version of the output"],
	["comment", "# echo repr(result)"],
	["comment", "# Output:"],
	["comment", "#  type"],
	["comment", "#    Animal = ref object of RootObj"],
	["comment", "#      name: string"],
	["comment", "#      age: int"],
	["comment", "#"],
	["comment", "#  method vocalize(this: Animal): string ="],
	["comment", "#    \"...\""],
	["comment", "#"],
	["comment", "#  method age_human_yrs(this: Animal): int ="],
	["comment", "#    this.age"],

	["comment", "# ---"],

	"\n\nclass Animal ",
	["operator", "of"],
	" RootObj",
	["operator", ":"],

	["keyword", "var"],
	" name",
	["operator", ":"],
	" string\n  ",

	["keyword", "var"],
	" age",
	["operator", ":"],
	" int\n  ",

	["keyword", "method"],
	" vocalize",
	["operator", ":"],
	" string ",
	["operator", "="],
	["string", "\"...\""],

	["keyword", "method"],
	" age_human_yrs",
	["operator", ":"],
	" int ",
	["operator", "="],
	" this",
	["operator", "."],
	"age ",
	["comment", "# `this` is injected"],

	"\n\nclass Dog ",
	["operator", "of"],
	" Animal",
	["operator", ":"],

	["keyword", "method"],
	" vocalize",
	["operator", ":"],
	" string ",
	["operator", "="],
	["string", "\"woof\""],

	["keyword", "method"],
	" age_human_yrs",
	["operator", ":"],
	" int ",
	["operator", "="],
	" this",
	["operator", "."],
	"age ",
	["operator", "*"],
	["number", "7"],

	"\n\nclass Cat ",
	["operator", "of"],
	" Animal",
	["operator", ":"],

	["keyword", "method"],
	" vocalize",
	["operator", ":"],
	" string ",
	["operator", "="],
	["string", "\"meow\""],

	["comment", "# ---"],

	["keyword", "var"],
	" animals",
	["operator", ":"],
	" seq",
	["punctuation", "["],
	"Animal",
	["punctuation", "]"],
	["operator", "="],
	["operator", "@"],
	["punctuation", "["],
	["punctuation", "]"],

	"\nanimals",
	["operator", "."],
	["function", ["add"]],
	["punctuation", "("],
	["function", ["Dog"]],
	["punctuation", "("],
	"name",
	["operator", ":"],
	["string", "\"Sparky\""],
	["punctuation", ","],
	" age",
	["operator", ":"],
	["number", "10"],
	["punctuation", ")"],
	["punctuation", ")"],

	"\nanimals",
	["operator", "."],
	["function", ["add"]],
	["punctuation", "("],
	["function", ["Cat"]],
	["punctuation", "("],
	"name",
	["operator", ":"],
	["string", "\"Mitten\""],
	["punctuation", ","],
	" age",
	["operator", ":"],
	["number", "10"],
	["punctuation", ")"],
	["punctuation", ")"],

	["keyword", "for"],
	" a ",
	["operator", "in"],
	" animals",
	["operator", ":"],

	"\n  echo a",
	["operator", "."],
	["function", ["vocalize"]],
	["punctuation", "("],
	["punctuation", ")"],

	"\n  echo a",
	["operator", "."],
	["function", ["age_human_yrs"]],
	["punctuation", "("],
	["punctuation", ")"]
]

----------------------------------------------------