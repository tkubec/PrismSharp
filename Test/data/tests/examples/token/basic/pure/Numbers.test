%<
int mygcd(int x, int y)
{
  if (y == 0)
    return x;
  else
    return mygcd(y, x%y);
}
%>

%< -*- Fortran90 -*-
function fact(n) result(p)
  integer n, p
  p = 1
  do i = 1, n
     p = p*i
  end do
end function fact
%>

%< -*- C++ -*-

#include <pure/runtime.h>
#include <string>
#include <map>

// An STL map mapping strings to Pure expressions.

using namespace std;
typedef map<string,pure_expr*> exprmap;

// Since we can't directly deal with C++ classes in Pure, provide some C
// functions to create, destroy and manipulate these objects.

extern "C" exprmap *map_create()
{
  return new exprmap;
}

extern "C" void map_add(exprmap *m, const char *key, pure_expr *x)
{
  exprmap::iterator it = m->find(string(key));
  if (it != m->end()) pure_free(it->second);
  (*m)[key] = pure_new(x);
}

extern "C" void map_del(exprmap *m, const char *key)
{
  exprmap::iterator it = m->find(key);
  if (it != m->end()) {
    pure_free(it->second);
    m->erase(it);
  }
}

extern "C" pure_expr *map_get(exprmap *m, const char *key)
{
  exprmap::iterator it = m->find(key);
  return (it != m->end())?it->second:0;
}

extern "C" pure_expr *map_keys(exprmap *m)
{
  size_t i = 0, n = m->size();
  pure_expr **xs = new pure_expr*[n];
  for (exprmap::iterator it = m->begin(); it != m->end(); ++it)
    xs[i++] = pure_string_dup(it->first.c_str());
  pure_expr *x = pure_listv(n, xs);
  delete[] xs;
  return x;
}

extern "C" void map_destroy(exprmap *m)
{
  for (exprmap::iterator it = m->begin(); it != m->end(); ++it)
    pure_free(it->second);
  delete m;
}

%>
----------------------------------------------------
[
	["inline-lang", [
		["delimiter", "%<"],
		"\nint mygcd(int x, int y)\n{\n  if (y == 0)\n    return x;\n  else\n    return mygcd(y, x%y);\n}\n",
		["delimiter", "%>"]
	]],

	["inline-lang", [
		["delimiter", "%< "], ["lang", "-*- Fortran90 -*-"],
		"\nfunction fact(n) result(p)\n  integer n, p\n  p = 1\n  do i = 1, n\n     p = p*i\n  end do\nend function fact\n",
		["delimiter", "%>"]
	]],

	["inline-lang", [
		["delimiter", "%< "], ["lang", "-*- C++ -*-"],

		"\n\n#include <pure/runtime.h>\n#include <string>\n#include <map>\n\n// An STL map mapping strings to Pure expressions.\n\nusing namespace std;\ntypedef map<string,pure_expr*> exprmap;\n\n// Since we can't directly deal with C++ classes in Pure, provide some C\n// functions to create, destroy and manipulate these objects.\n\nextern \"C\" exprmap *map_create()\n{\n  return new exprmap;\n}\n\nextern \"C\" void map_add(exprmap *m, const char *key, pure_expr *x)\n{\n  exprmap::iterator it = m->find(string(key));\n  if (it != m->end()) pure_free(it->second);\n  (*m)[key] = pure_new(x);\n}\n\nextern \"C\" void map_del(exprmap *m, const char *key)\n{\n  exprmap::iterator it = m->find(key);\n  if (it != m->end()) {\n    pure_free(it->second);\n    m->erase(it);\n  }\n}\n\nextern \"C\" pure_expr *map_get(exprmap *m, const char *key)\n{\n  exprmap::iterator it = m->find(key);\n  return (it != m->end())?it->second:0;\n}\n\nextern \"C\" pure_expr *map_keys(exprmap *m)\n{\n  size_t i = 0, n = m->size();\n  pure_expr **xs = new pure_expr*[n];\n  for (exprmap::iterator it = m->begin(); it != m->end(); ++it)\n    xs[i++] = pure_string_dup(it->first.c_str());\n  pure_expr *x = pure_listv(n, xs);\n  delete[] xs;\n  return x;\n}\n\nextern \"C\" void map_destroy(exprmap *m)\n{\n  for (exprmap::iterator it = m->begin(); it != m->end(); ++it)\n    pure_free(it->second);\n  delete m;\n}\n\n",

		["delimiter", "%>"]
	]]
]

----------------------------------------------------