(* source: https://github.com/HarrisonGrodin/ml-numbers/blob/ba35c763092052e391871edf224f17474c6231b1/src/Rational.sml *)

structure Rational :> RATIONAL =
  struct
    type t = int * int  (* (a,b) invariant: a,b coprime; b nonnegative *)

    local
      val rec gcd = fn
        (m,0) => m
      | (m,n) => gcd (n, m mod n)
    in
      infix 8 //
      val op // = fn (x,y) => (
        let
          val gcd = gcd (x,y)
        in
          (x div gcd, y div gcd)
        end
      )
    end

    val show = Fn.id

    val zero = (0,1)
    val one  = (1,1)

    val eq : t * t -> bool = (op =)
    val compare = fn ((a,b),(x,y)) => Int.compare (a * y, b * x)
    val toString = fn (x,y) => Int.toString x ^ " // " ^ Int.toString y
    val percent =
      Fn.curry (Fn.flip (op ^)) "%"
      o Int.toString
      o (fn (a,b) => (100 * a) div b)

    val op + = fn ((a,b),(x,y)) => (a * y + b * x) // (b * y)
    val ~ = fn (a,b) => (~a,b)
    val op - = fn (r1,r2) => r1 + ~r2

    val op * = fn ((a,b),(x,y)) => (a * x) // (b * y)
    val inv = Fn.flip (op //)
    val op / = fn (r1,r2) => r1 * inv r2
  end
----------------------------------------------------
[
	["comment", "(* source: https://github.com/HarrisonGrodin/ml-numbers/blob/ba35c763092052e391871edf224f17474c6231b1/src/Rational.sml *)"],

	["keyword", "structure"],
	["class-name", "Rational"],
	["operator", ":>"],
	" RATIONAL ",
	["operator", "="],

	["keyword", "struct"],

	["keyword", "type"],
	["class-name", "t"],
	["operator", "="],
	" int ",
	["operator", "*"],
	" int  ",
	["comment", "(* (a,b) invariant: a,b coprime; b nonnegative *)"],

	["keyword", "local"],

	["keyword", "val"],
	["keyword", "rec"],
	" gcd ",
	["operator", "="],
	["keyword", "fn"],

	["punctuation", "("],
	"m",
	["punctuation", ","],
	["number", "0"],
	["punctuation", ")"],
	["operator", "=>"],
	" m\n      ",

	["operator", "|"],
	["punctuation", "("],
	"m",
	["punctuation", ","],
	"n",
	["punctuation", ")"],
	["operator", "=>"],
	" gcd ",
	["punctuation", "("],
	"n",
	["punctuation", ","],
	" m mod n",
	["punctuation", ")"],

	["keyword", "in"],

	["keyword", "infix"],
	["number", "8"],
	["operator", "/"],
	["operator", "/"],

	["keyword", "val"],
	["keyword", "op"],
	["operator", "/"],
	["operator", "/"],
	["operator", "="],
	["keyword", "fn"],
	["punctuation", "("],
	"x",
	["punctuation", ","],
	"y",
	["punctuation", ")"],
	["operator", "=>"],
	["punctuation", "("],

	["keyword", "let"],

	["keyword", "val"],
	" gcd ",
	["operator", "="],
	" gcd ",
	["punctuation", "("],
	"x",
	["punctuation", ","],
	"y",
	["punctuation", ")"],

	["keyword", "in"],

	["punctuation", "("],
	"x div gcd",
	["punctuation", ","],
	" y div gcd",
	["punctuation", ")"],

	["keyword", "end"],

	["punctuation", ")"],

	["keyword", "end"],

	["keyword", "val"],
	" show ",
	["operator", "="],
	["keyword", "Fn"],
	["punctuation", "."],
	"id\n\n    ",

	["keyword", "val"],
	" zero ",
	["operator", "="],
	["punctuation", "("],
	["number", "0"],
	["punctuation", ","],
	["number", "1"],
	["punctuation", ")"],

	["keyword", "val"],
	" one  ",
	["operator", "="],
	["punctuation", "("],
	["number", "1"],
	["punctuation", ","],
	["number", "1"],
	["punctuation", ")"],

	["keyword", "val"],
	" eq ",
	["punctuation", ":"],
	["class-name", [
		"t ",
		["operator", "*"],
		" t ",
		["operator", "->"],
		" bool"
	]],
	["operator", "="],
	["punctuation", "("],
	["keyword", "op"],
	["operator", "="],
	["punctuation", ")"],

	["keyword", "val"],
	" compare ",
	["operator", "="],
	["keyword", "fn"],
	["punctuation", "("],
	["punctuation", "("],
	"a",
	["punctuation", ","],
	"b",
	["punctuation", ")"],
	["punctuation", ","],
	["punctuation", "("],
	"x",
	["punctuation", ","],
	"y",
	["punctuation", ")"],
	["punctuation", ")"],
	["operator", "=>"],
	" Int",
	["punctuation", "."],
	"compare ",
	["punctuation", "("],
	"a ",
	["operator", "*"],
	" y",
	["punctuation", ","],
	" b ",
	["operator", "*"],
	" x",
	["punctuation", ")"],

	["keyword", "val"],
	" toString ",
	["operator", "="],
	["keyword", "fn"],
	["punctuation", "("],
	"x",
	["punctuation", ","],
	"y",
	["punctuation", ")"],
	["operator", "=>"],
	" Int",
	["punctuation", "."],
	"toString x ",
	["operator", "^"],
	["string", "\" // \""],
	["operator", "^"],
	" Int",
	["punctuation", "."],
	"toString y\n    ",

	["keyword", "val"],
	" percent ",
	["operator", "="],

	["keyword", "Fn"],
	["punctuation", "."],
	"curry ",
	["punctuation", "("],
	["keyword", "Fn"],
	["punctuation", "."],
	"flip ",
	["punctuation", "("],
	["keyword", "op"],
	["operator", "^"],
	["punctuation", ")"],
	["punctuation", ")"],
	["string", "\"%\""],

	"\n      o Int",
	["punctuation", "."],
	"toString\n      o ",
	["punctuation", "("],
	["keyword", "fn"],
	["punctuation", "("],
	"a",
	["punctuation", ","],
	"b",
	["punctuation", ")"],
	["operator", "=>"],
	["punctuation", "("],
	["number", "100"],
	["operator", "*"],
	" a",
	["punctuation", ")"],
	" div b",
	["punctuation", ")"],

	["keyword", "val"],
	["keyword", "op"],
	["operator", "+"],
	["operator", "="],
	["keyword", "fn"],
	["punctuation", "("],
	["punctuation", "("],
	"a",
	["punctuation", ","],
	"b",
	["punctuation", ")"],
	["punctuation", ","],
	["punctuation", "("],
	"x",
	["punctuation", ","],
	"y",
	["punctuation", ")"],
	["punctuation", ")"],
	["operator", "=>"],
	["punctuation", "("],
	"a ",
	["operator", "*"],
	" y ",
	["operator", "+"],
	" b ",
	["operator", "*"],
	" x",
	["punctuation", ")"],
	["operator", "/"],
	["operator", "/"],
	["punctuation", "("],
	"b ",
	["operator", "*"],
	" y",
	["punctuation", ")"],

	["keyword", "val"],
	["operator", "~"],
	["operator", "="],
	["keyword", "fn"],
	["punctuation", "("],
	"a",
	["punctuation", ","],
	"b",
	["punctuation", ")"],
	["operator", "=>"],
	["punctuation", "("],
	["operator", "~"],
	"a",
	["punctuation", ","],
	"b",
	["punctuation", ")"],

	["keyword", "val"],
	["keyword", "op"],
	["operator", "-"],
	["operator", "="],
	["keyword", "fn"],
	["punctuation", "("],
	"r1",
	["punctuation", ","],
	"r2",
	["punctuation", ")"],
	["operator", "=>"],
	" r1 ",
	["operator", "+"],
	["operator", "~"],
	"r2\n\n    ",

	["keyword", "val"],
	["keyword", "op"],
	["operator", "*"],
	["operator", "="],
	["keyword", "fn"],
	["punctuation", "("],
	["punctuation", "("],
	"a",
	["punctuation", ","],
	"b",
	["punctuation", ")"],
	["punctuation", ","],
	["punctuation", "("],
	"x",
	["punctuation", ","],
	"y",
	["punctuation", ")"],
	["punctuation", ")"],
	["operator", "=>"],
	["punctuation", "("],
	"a ",
	["operator", "*"],
	" x",
	["punctuation", ")"],
	["operator", "/"],
	["operator", "/"],
	["punctuation", "("],
	"b ",
	["operator", "*"],
	" y",
	["punctuation", ")"],

	["keyword", "val"],
	" inv ",
	["operator", "="],
	["keyword", "Fn"],
	["punctuation", "."],
	"flip ",
	["punctuation", "("],
	["keyword", "op"],
	["operator", "/"],
	["operator", "/"],
	["punctuation", ")"],

	["keyword", "val"],
	["keyword", "op"],
	["operator", "/"],
	["operator", "="],
	["keyword", "fn"],
	["punctuation", "("],
	"r1",
	["punctuation", ","],
	"r2",
	["punctuation", ")"],
	["operator", "=>"],
	" r1 ",
	["operator", "*"],
	" inv r2\n  ",

	["keyword", "end"]
]

----------------------------------------------------