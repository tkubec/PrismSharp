pragma solidity >=0.4.22 <0.7.0;

/// @title Voting with delegation.
contract Ballot {
	// This declares a new complex type which will
	// be used for variables later.
	// It will represent a single voter.
	struct Voter {
		uint weight; // weight is accumulated by delegation
		bool voted;  // if true, that person already voted
		address delegate; // person delegated to
		uint vote;   // index of the voted proposal
	}

	// This is a type for a single proposal.
	struct Proposal {
		bytes32 name;   // short name (up to 32 bytes)
		uint voteCount; // number of accumulated votes
	}

	address public chairperson;

	// This declares a state variable that
	// stores a `Voter` struct for each possible address.
	mapping(address => Voter) public voters;

	// A dynamically-sized array of `Proposal` structs.
	Proposal[] public proposals;

	/// Create a new ballot to choose one of `proposalNames`.
	constructor(bytes32[] memory proposalNames) public {
		chairperson = msg.sender;
		voters[chairperson].weight = 1;

		// For each of the provided proposal names,
		// create a new proposal object and add it
		// to the end of the array.
		for (uint i = 0; i < proposalNames.length; i++) {
			// `Proposal({...})` creates a temporary
			// Proposal object and `proposals.push(...)`
			// appends it to the end of `proposals`.
			proposals.push(Proposal({
					name: proposalNames[i],
					voteCount: 0
			}));
		}
	}

	// Give `voter` the right to vote on this ballot.
	// May only be called by `chairperson`.
	function giveRightToVote(address voter) public {
		// If the first argument of `require` evaluates
		// to `false`, execution terminates and all
		// changes to the state and to Ether balances
		// are reverted.
		// This used to consume all gas in old EVM versions, but
		// not anymore.
		// It is often a good idea to use `require` to check if
		// functions are called correctly.
		// As a second argument, you can also provide an
		// explanation about what went wrong.
		require(
			msg.sender == chairperson,
			"Only chairperson can give right to vote."
		);
		require(
			!voters[voter].voted,
			"The voter already voted."
		);
		require(voters[voter].weight == 0);
		voters[voter].weight = 1;
	}

	/// Delegate your vote to the voter `to`.
	function delegate(address to) public {
		// assigns reference
		Voter storage sender = voters[msg.sender];
		require(!sender.voted, "You already voted.");

		require(to != msg.sender, "Self-delegation is disallowed.");

		// Forward the delegation as long as
		// `to` also delegated.
		// In general, such loops are very dangerous,
		// because if they run too long, they might
		// need more gas than is available in a block.
		// In this case, the delegation will not be executed,
		// but in other situations, such loops might
		// cause a contract to get "stuck" completely.
		while (voters[to].delegate != address(0)) {
			to = voters[to].delegate;

			// We found a loop in the delegation, not allowed.
			require(to != msg.sender, "Found loop in delegation.");
		}

		// Since `sender` is a reference, this
		// modifies `voters[msg.sender].voted`
		sender.voted = true;
		sender.delegate = to;
		Voter storage delegate_ = voters[to];
		if (delegate_.voted) {
			// If the delegate already voted,
			// directly add to the number of votes
			proposals[delegate_.vote].voteCount += sender.weight;
		} else {
			// If the delegate did not vote yet,
			// add to her weight.
			delegate_.weight += sender.weight;
		}
	}

	/// Give your vote (including votes delegated to you)
	/// to proposal `proposals[proposal].name`.
	function vote(uint proposal) public {
		Voter storage sender = voters[msg.sender];
		require(sender.weight != 0, "Has no right to vote");
		require(!sender.voted, "Already voted.");
		sender.voted = true;
		sender.vote = proposal;

		// If `proposal` is out of the range of the array,
		// this will throw automatically and revert all
		// changes.
		proposals[proposal].voteCount += sender.weight;
	}

	/// @dev Computes the winning proposal taking all
	/// previous votes into account.
	function winningProposal() public view
			returns (uint winningProposal_)
	{
		uint winningVoteCount = 0;
		for (uint p = 0; p < proposals.length; p++) {
			if (proposals[p].voteCount > winningVoteCount) {
				winningVoteCount = proposals[p].voteCount;
				winningProposal_ = p;
			}
		}
	}

	// Calls winningProposal() function to get the index
	// of the winner contained in the proposals array and then
	// returns the name of the winner
	function winnerName() public view
			returns (bytes32 winnerName_)
	{
		winnerName_ = proposals[winningProposal()].name;
	}
}
----------------------------------------------------
[
	["keyword", "pragma"],
	["keyword", "solidity"],
	["operator", ">="],
	["version", "0.4.22"],
	["operator", "<"],
	["version", "0.7.0"],
	["punctuation", ";"],

	["comment", "/// @title Voting with delegation."],

	["keyword", "contract"],
	["class-name", "Ballot"],
	["punctuation", "{"],

	["comment", "// This declares a new complex type which will"],

	["comment", "// be used for variables later."],

	["comment", "// It will represent a single voter."],

	["keyword", "struct"],
	["class-name", "Voter"],
	["punctuation", "{"],

	["builtin", "uint"],
	" weight",
	["punctuation", ";"],
	["comment", "// weight is accumulated by delegation"],

	["builtin", "bool"],
	" voted",
	["punctuation", ";"],
	["comment", "// if true, that person already voted"],

	["builtin", "address"],
	" delegate",
	["punctuation", ";"],
	["comment", "// person delegated to"],

	["builtin", "uint"],
	" vote",
	["punctuation", ";"],
	["comment", "// index of the voted proposal"],

	["punctuation", "}"],

	["comment", "// This is a type for a single proposal."],

	["keyword", "struct"],
	["class-name", "Proposal"],
	["punctuation", "{"],

	["builtin", "bytes32"],
	" name",
	["punctuation", ";"],
	["comment", "// short name (up to 32 bytes)"],

	["builtin", "uint"],
	" voteCount",
	["punctuation", ";"],
	["comment", "// number of accumulated votes"],

	["punctuation", "}"],

	["builtin", "address"],
	["keyword", "public"],
	" chairperson",
	["punctuation", ";"],

	["comment", "// This declares a state variable that"],

	["comment", "// stores a `Voter` struct for each possible address."],

	["keyword", "mapping"],
	["punctuation", "("],
	["builtin", "address"],
	["operator", "=>"],
	" Voter",
	["punctuation", ")"],
	["keyword", "public"],
	" voters",
	["punctuation", ";"],

	["comment", "// A dynamically-sized array of `Proposal` structs."],

	"\n\tProposal",
	["punctuation", "["],
	["punctuation", "]"],
	["keyword", "public"],
	" proposals",
	["punctuation", ";"],

	["comment", "/// Create a new ballot to choose one of `proposalNames`."],

	["keyword", "constructor"],
	["punctuation", "("],
	["builtin", "bytes32"],
	["punctuation", "["],
	["punctuation", "]"],
	["keyword", "memory"],
	" proposalNames",
	["punctuation", ")"],
	["keyword", "public"],
	["punctuation", "{"],

	"\n\t\tchairperson ",
	["operator", "="],
	" msg",
	["punctuation", "."],
	"sender",
	["punctuation", ";"],

	"\n\t\tvoters",
	["punctuation", "["],
	"chairperson",
	["punctuation", "]"],
	["punctuation", "."],
	"weight ",
	["operator", "="],
	["number", "1"],
	["punctuation", ";"],

	["comment", "// For each of the provided proposal names,"],

	["comment", "// create a new proposal object and add it"],

	["comment", "// to the end of the array."],

	["keyword", "for"],
	["punctuation", "("],
	["builtin", "uint"],
	" i ",
	["operator", "="],
	["number", "0"],
	["punctuation", ";"],
	" i ",
	["operator", "<"],
	" proposalNames",
	["punctuation", "."],
	"length",
	["punctuation", ";"],
	" i",
	["operator", "++"],
	["punctuation", ")"],
	["punctuation", "{"],

	["comment", "// `Proposal({...})` creates a temporary"],

	["comment", "// Proposal object and `proposals.push(...)`"],

	["comment", "// appends it to the end of `proposals`."],

	"\n\t\t\tproposals",
	["punctuation", "."],
	["function", "push"],
	["punctuation", "("],
	["function", "Proposal"],
	["punctuation", "("],
	["punctuation", "{"],

	"\n\t\t\t\t\tname",
	["punctuation", ":"],
	" proposalNames",
	["punctuation", "["],
	"i",
	["punctuation", "]"],
	["punctuation", ","],

	"\n\t\t\t\t\tvoteCount",
	["punctuation", ":"],
	["number", "0"],

	["punctuation", "}"],
	["punctuation", ")"],
	["punctuation", ")"],
	["punctuation", ";"],

	["punctuation", "}"],

	["punctuation", "}"],

	["comment", "// Give `voter` the right to vote on this ballot."],

	["comment", "// May only be called by `chairperson`."],

	["keyword", "function"],
	["function", "giveRightToVote"],
	["punctuation", "("],
	["builtin", "address"],
	" voter",
	["punctuation", ")"],
	["keyword", "public"],
	["punctuation", "{"],

	["comment", "// If the first argument of `require` evaluates"],

	["comment", "// to `false`, execution terminates and all"],

	["comment", "// changes to the state and to Ether balances"],

	["comment", "// are reverted."],

	["comment", "// This used to consume all gas in old EVM versions, but"],

	["comment", "// not anymore."],

	["comment", "// It is often a good idea to use `require` to check if"],

	["comment", "// functions are called correctly."],

	["comment", "// As a second argument, you can also provide an"],

	["comment", "// explanation about what went wrong."],

	["keyword", "require"],
	["punctuation", "("],

	"\n\t\t\tmsg",
	["punctuation", "."],
	"sender ",
	["operator", "=="],
	" chairperson",
	["punctuation", ","],

	["string", "\"Only chairperson can give right to vote.\""],

	["punctuation", ")"],
	["punctuation", ";"],

	["keyword", "require"],
	["punctuation", "("],

	["operator", "!"],
	"voters",
	["punctuation", "["],
	"voter",
	["punctuation", "]"],
	["punctuation", "."],
	"voted",
	["punctuation", ","],

	["string", "\"The voter already voted.\""],

	["punctuation", ")"],
	["punctuation", ";"],

	["keyword", "require"],
	["punctuation", "("],
	"voters",
	["punctuation", "["],
	"voter",
	["punctuation", "]"],
	["punctuation", "."],
	"weight ",
	["operator", "=="],
	["number", "0"],
	["punctuation", ")"],
	["punctuation", ";"],

	"\n\t\tvoters",
	["punctuation", "["],
	"voter",
	["punctuation", "]"],
	["punctuation", "."],
	"weight ",
	["operator", "="],
	["number", "1"],
	["punctuation", ";"],

	["punctuation", "}"],

	["comment", "/// Delegate your vote to the voter `to`."],

	["keyword", "function"],
	["function", "delegate"],
	["punctuation", "("],
	["builtin", "address"],
	" to",
	["punctuation", ")"],
	["keyword", "public"],
	["punctuation", "{"],

	["comment", "// assigns reference"],

	"\n\t\tVoter ",
	["keyword", "storage"],
	" sender ",
	["operator", "="],
	" voters",
	["punctuation", "["],
	"msg",
	["punctuation", "."],
	"sender",
	["punctuation", "]"],
	["punctuation", ";"],

	["keyword", "require"],
	["punctuation", "("],
	["operator", "!"],
	"sender",
	["punctuation", "."],
	"voted",
	["punctuation", ","],
	["string", "\"You already voted.\""],
	["punctuation", ")"],
	["punctuation", ";"],

	["keyword", "require"],
	["punctuation", "("],
	"to ",
	["operator", "!="],
	" msg",
	["punctuation", "."],
	"sender",
	["punctuation", ","],
	["string", "\"Self-delegation is disallowed.\""],
	["punctuation", ")"],
	["punctuation", ";"],

	["comment", "// Forward the delegation as long as"],

	["comment", "// `to` also delegated."],

	["comment", "// In general, such loops are very dangerous,"],

	["comment", "// because if they run too long, they might"],

	["comment", "// need more gas than is available in a block."],

	["comment", "// In this case, the delegation will not be executed,"],

	["comment", "// but in other situations, such loops might"],

	["comment", "// cause a contract to get \"stuck\" completely."],

	["keyword", "while"],
	["punctuation", "("],
	"voters",
	["punctuation", "["],
	"to",
	["punctuation", "]"],
	["punctuation", "."],
	"delegate ",
	["operator", "!="],
	["builtin", "address"],
	["punctuation", "("],
	["number", "0"],
	["punctuation", ")"],
	["punctuation", ")"],
	["punctuation", "{"],

	"\n\t\t\tto ",
	["operator", "="],
	" voters",
	["punctuation", "["],
	"to",
	["punctuation", "]"],
	["punctuation", "."],
	"delegate",
	["punctuation", ";"],

	["comment", "// We found a loop in the delegation, not allowed."],

	["keyword", "require"],
	["punctuation", "("],
	"to ",
	["operator", "!="],
	" msg",
	["punctuation", "."],
	"sender",
	["punctuation", ","],
	["string", "\"Found loop in delegation.\""],
	["punctuation", ")"],
	["punctuation", ";"],

	["punctuation", "}"],

	["comment", "// Since `sender` is a reference, this"],

	["comment", "// modifies `voters[msg.sender].voted`"],

	"\n\t\tsender",
	["punctuation", "."],
	"voted ",
	["operator", "="],
	["boolean", "true"],
	["punctuation", ";"],

	"\n\t\tsender",
	["punctuation", "."],
	"delegate ",
	["operator", "="],
	" to",
	["punctuation", ";"],

	"\n\t\tVoter ",
	["keyword", "storage"],
	" delegate_ ",
	["operator", "="],
	" voters",
	["punctuation", "["],
	"to",
	["punctuation", "]"],
	["punctuation", ";"],

	["keyword", "if"],
	["punctuation", "("],
	"delegate_",
	["punctuation", "."],
	"voted",
	["punctuation", ")"],
	["punctuation", "{"],

	["comment", "// If the delegate already voted,"],

	["comment", "// directly add to the number of votes"],

	"\n\t\t\tproposals",
	["punctuation", "["],
	"delegate_",
	["punctuation", "."],
	"vote",
	["punctuation", "]"],
	["punctuation", "."],
	"voteCount ",
	["operator", "+="],
	" sender",
	["punctuation", "."],
	"weight",
	["punctuation", ";"],

	["punctuation", "}"],
	["keyword", "else"],
	["punctuation", "{"],

	["comment", "// If the delegate did not vote yet,"],

	["comment", "// add to her weight."],

	"\n\t\t\tdelegate_",
	["punctuation", "."],
	"weight ",
	["operator", "+="],
	" sender",
	["punctuation", "."],
	"weight",
	["punctuation", ";"],

	["punctuation", "}"],

	["punctuation", "}"],

	["comment", "/// Give your vote (including votes delegated to you)"],

	["comment", "/// to proposal `proposals[proposal].name`."],

	["keyword", "function"],
	["function", "vote"],
	["punctuation", "("],
	["builtin", "uint"],
	" proposal",
	["punctuation", ")"],
	["keyword", "public"],
	["punctuation", "{"],

	"\n\t\tVoter ",
	["keyword", "storage"],
	" sender ",
	["operator", "="],
	" voters",
	["punctuation", "["],
	"msg",
	["punctuation", "."],
	"sender",
	["punctuation", "]"],
	["punctuation", ";"],

	["keyword", "require"],
	["punctuation", "("],
	"sender",
	["punctuation", "."],
	"weight ",
	["operator", "!="],
	["number", "0"],
	["punctuation", ","],
	["string", "\"Has no right to vote\""],
	["punctuation", ")"],
	["punctuation", ";"],

	["keyword", "require"],
	["punctuation", "("],
	["operator", "!"],
	"sender",
	["punctuation", "."],
	"voted",
	["punctuation", ","],
	["string", "\"Already voted.\""],
	["punctuation", ")"],
	["punctuation", ";"],

	"\n\t\tsender",
	["punctuation", "."],
	"voted ",
	["operator", "="],
	["boolean", "true"],
	["punctuation", ";"],

	"\n\t\tsender",
	["punctuation", "."],
	"vote ",
	["operator", "="],
	" proposal",
	["punctuation", ";"],

	["comment", "// If `proposal` is out of the range of the array,"],

	["comment", "// this will throw automatically and revert all"],

	["comment", "// changes."],

	"\n\t\tproposals",
	["punctuation", "["],
	"proposal",
	["punctuation", "]"],
	["punctuation", "."],
	"voteCount ",
	["operator", "+="],
	" sender",
	["punctuation", "."],
	"weight",
	["punctuation", ";"],

	["punctuation", "}"],

	["comment", "/// @dev Computes the winning proposal taking all"],

	["comment", "/// previous votes into account."],

	["keyword", "function"],
	["function", "winningProposal"],
	["punctuation", "("],
	["punctuation", ")"],
	["keyword", "public"],
	["keyword", "view"],

	["keyword", "returns"],
	["punctuation", "("],
	["builtin", "uint"],
	" winningProposal_",
	["punctuation", ")"],

	["punctuation", "{"],

	["builtin", "uint"],
	" winningVoteCount ",
	["operator", "="],
	["number", "0"],
	["punctuation", ";"],

	["keyword", "for"],
	["punctuation", "("],
	["builtin", "uint"],
	" p ",
	["operator", "="],
	["number", "0"],
	["punctuation", ";"],
	" p ",
	["operator", "<"],
	" proposals",
	["punctuation", "."],
	"length",
	["punctuation", ";"],
	" p",
	["operator", "++"],
	["punctuation", ")"],
	["punctuation", "{"],

	["keyword", "if"],
	["punctuation", "("],
	"proposals",
	["punctuation", "["],
	"p",
	["punctuation", "]"],
	["punctuation", "."],
	"voteCount ",
	["operator", ">"],
	" winningVoteCount",
	["punctuation", ")"],
	["punctuation", "{"],

	"\n\t\t\t\twinningVoteCount ",
	["operator", "="],
	" proposals",
	["punctuation", "["],
	"p",
	["punctuation", "]"],
	["punctuation", "."],
	"voteCount",
	["punctuation", ";"],

	"\n\t\t\t\twinningProposal_ ",
	["operator", "="],
	" p",
	["punctuation", ";"],

	["punctuation", "}"],

	["punctuation", "}"],

	["punctuation", "}"],

	["comment", "// Calls winningProposal() function to get the index"],

	["comment", "// of the winner contained in the proposals array and then"],

	["comment", "// returns the name of the winner"],

	["keyword", "function"],
	["function", "winnerName"],
	["punctuation", "("],
	["punctuation", ")"],
	["keyword", "public"],
	["keyword", "view"],

	["keyword", "returns"],
	["punctuation", "("],
	["builtin", "bytes32"],
	" winnerName_",
	["punctuation", ")"],

	["punctuation", "{"],

	"\n\t\twinnerName_ ",
	["operator", "="],
	" proposals",
	["punctuation", "["],
	["function", "winningProposal"],
	["punctuation", "("],
	["punctuation", ")"],
	["punctuation", "]"],
	["punctuation", "."],
	"name",
	["punctuation", ";"],

	["punctuation", "}"],

	["punctuation", "}"]
]

----------------------------------------------------