#include "script_component.hpp"
/*
 * Author: BaerMitUmlaut
 * Handles any audible, visual and physical effects of fatigue.
 *
 * Arguments:
 * 0: Unit <OBJECT>
 * 1: Fatigue <NUMBER>
 * 2: Speed <NUMBER>
 * 3: Overexhausted <BOOL>
 *
 * Return Value:
 * None
 *
 * Example:
 * [_player, 0.5, 3.3, true] call ace_advanced_fatigue_fnc_handleEffects
 *
 * Public: No
 */
params ["_unit", "_fatigue", "_speed", "_overexhausted"];

#ifdef DEBUG_MODE_FULL
	systemChat str _fatigue;
	systemChat str vectorMagnitude velocity _unit;
#endif

// - Audible effects ----------------------------------------------------------
GVAR(lastBreath) = GVAR(lastBreath) + 1;
if (_fatigue > 0.4 && {GVAR(lastBreath) > (_fatigue * -10 + 9)} && {!underwater _unit}) then {
	switch (true) do {
		case (_fatigue < 0.6): {
			playSound (QGVAR(breathLow) + str(floor random 6));
		};
		case (_fatigue < 0.85): {
			playSound (QGVAR(breathMid) + str(floor random 6));
		};
		default {
			playSound (QGVAR(breathMax) + str(floor random 6));
		};
	};
	GVAR(lastBreath) = 0;
};

// - Visual effects -----------------------------------------------------------
GVAR(ppeBlackoutLast) = GVAR(ppeBlackoutLast) + 1;
if (GVAR(ppeBlackoutLast) == 1) then {
	GVAR(ppeBlackout) ppEffectAdjust [1,1,0,[0,0,0,1],[0,0,0,0],[1,1,1,1],[10,10,0,0,0,0.1,0.5]];
	GVAR(ppeBlackout) ppEffectCommit 1;
} else {
	if (_fatigue > 0.85) then {
		if (GVAR(ppeBlackoutLast) > (100 - _fatigue * 100) / 3) then {
			GVAR(ppeBlackout) ppEffectAdjust [1,1,0,[0,0,0,1],[0,0,0,0],[1,1,1,1],[2,2,0,0,0,0.1,0.5]];
			GVAR(ppeBlackout) ppEffectCommit 1;
			GVAR(ppeBlackoutLast) = 0;
		};
	};
};

// - Physical effects ---------------------------------------------------------
if (GVAR(isSwimming)) exitWith {
	if (GVAR(setAnimExclusions) isEqualTo []) then {
		_unit setAnimSpeedCoef linearConversion [0.7, 0.9, _fatigue, 1, 0.5, true];
	};
	if ((isSprintAllowed _unit) && {_fatigue > 0.7}) then {
		[_unit, "blockSprint", QUOTE(ADDON), true] call EFUNC(common,statusEffect_set);
	} else {
		if ((!isSprintAllowed _unit) && {_fatigue < 0.7}) then {
			[_unit, "blockSprint", QUOTE(ADDON), false] call EFUNC(common,statusEffect_set);
		};
	};
};
if ((getAnimSpeedCoef _unit) != 1) then {
	if (GVAR(setAnimExclusions) isEqualTo []) then {
		TRACE_1("reset",getAnimSpeedCoef _unit);
		_unit setAnimSpeedCoef 1;
	};
};

if (_overexhausted) then {
	[_unit, "forceWalk", QUOTE(ADDON), true] call EFUNC(common,statusEffect_set);
} else {
	if (isForcedWalk _unit && {_fatigue < 0.7}) then {
		[_unit, "forceWalk", QUOTE(ADDON), false] call EFUNC(common,statusEffect_set);
	} else {
		if ((isSprintAllowed _unit) && {_fatigue > 0.7}) then {
			[_unit, "blockSprint", QUOTE(ADDON), true] call EFUNC(common,statusEffect_set);
		} else {
			if ((!isSprintAllowed _unit) && {_fatigue < 0.6}) then {
				[_unit, "blockSprint", QUOTE(ADDON), false] call EFUNC(common,statusEffect_set);
			};
		};
	};
};

_unit setVariable [QGVAR(aimFatigue), _fatigue];

private _aimCoef = [missionNamespace, "ACE_setCustomAimCoef", "max"] call EFUNC(common,arithmeticGetResult);
_unit setCustomAimCoef _aimCoef;
----------------------------------------------------
[
	["macro", [
		["directive", "#include"],
		" \"script_component.hpp\""
	]],

	["comment", "/*\n * Author: BaerMitUmlaut\n * Handles any audible, visual and physical effects of fatigue.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Fatigue <NUMBER>\n * 2: Speed <NUMBER>\n * 3: Overexhausted <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_player, 0.5, 3.3, true] call ace_advanced_fatigue_fnc_handleEffects\n *\n * Public: No\n */"],

	["function", "params"],
	["punctuation", "["],
	["string", "\"_unit\""],
	["punctuation", ","],
	["string", "\"_fatigue\""],
	["punctuation", ","],
	["string", "\"_speed\""],
	["punctuation", ","],
	["string", "\"_overexhausted\""],
	["punctuation", "]"],
	["punctuation", ";"],

	["macro", [
		["directive", "#ifdef"],
		" DEBUG_MODE_FULL"
	]],

	["function", "systemChat"],
	["function", "str"],
	" _fatigue",
	["punctuation", ";"],

	["function", "systemChat"],
	["function", "str"],
	["function", "vectorMagnitude"],
	["function", "velocity"],
	" _unit",
	["punctuation", ";"],

	["macro", [
		["directive", "#endif"]
	]],

	["comment", "// - Audible effects ----------------------------------------------------------"],

	"\nGVAR",
	["punctuation", "("],
	"lastBreath",
	["punctuation", ")"],
	["operator", "="],
	" GVAR",
	["punctuation", "("],
	"lastBreath",
	["punctuation", ")"],
	["operator", "+"],
	["number", "1"],
	["punctuation", ";"],

	["keyword", "if"],
	["punctuation", "("],
	"_fatigue ",
	["operator", ">"],
	["number", "0.4"],
	["operator", "&&"],
	["punctuation", "{"],
	"GVAR",
	["punctuation", "("],
	"lastBreath",
	["punctuation", ")"],
	["operator", ">"],
	["punctuation", "("],
	"_fatigue ",
	["operator", "*"],
	["operator", "-"],
	["number", "10"],
	["operator", "+"],
	["number", "9"],
	["punctuation", ")"],
	["punctuation", "}"],
	["operator", "&&"],
	["punctuation", "{"],
	["operator", "!"],
	["function", "underwater"],
	" _unit",
	["punctuation", "}"],
	["punctuation", ")"],
	["keyword", "then"],
	["punctuation", "{"],

	["keyword", "switch"],
	["punctuation", "("],
	["boolean", "true"],
	["punctuation", ")"],
	["keyword", "do"],
	["punctuation", "{"],

	["keyword", "case"],
	["punctuation", "("],
	"_fatigue ",
	["operator", "<"],
	["number", "0.6"],
	["punctuation", ")"],
	["punctuation", ":"],
	["punctuation", "{"],

	["function", "playSound"],
	["punctuation", "("],
	"QGVAR",
	["punctuation", "("],
	"breathLow",
	["punctuation", ")"],
	["operator", "+"],
	["function", "str"],
	["punctuation", "("],
	["function", "floor"],
	["function", "random"],
	["number", "6"],
	["punctuation", ")"],
	["punctuation", ")"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	["keyword", "case"],
	["punctuation", "("],
	"_fatigue ",
	["operator", "<"],
	["number", "0.85"],
	["punctuation", ")"],
	["punctuation", ":"],
	["punctuation", "{"],

	["function", "playSound"],
	["punctuation", "("],
	"QGVAR",
	["punctuation", "("],
	"breathMid",
	["punctuation", ")"],
	["operator", "+"],
	["function", "str"],
	["punctuation", "("],
	["function", "floor"],
	["function", "random"],
	["number", "6"],
	["punctuation", ")"],
	["punctuation", ")"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	["keyword", "default"],
	["punctuation", "{"],

	["function", "playSound"],
	["punctuation", "("],
	"QGVAR",
	["punctuation", "("],
	"breathMax",
	["punctuation", ")"],
	["operator", "+"],
	["function", "str"],
	["punctuation", "("],
	["function", "floor"],
	["function", "random"],
	["number", "6"],
	["punctuation", ")"],
	["punctuation", ")"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	"\n\tGVAR",
	["punctuation", "("],
	"lastBreath",
	["punctuation", ")"],
	["operator", "="],
	["number", "0"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	["comment", "// - Visual effects -----------------------------------------------------------"],

	"\nGVAR",
	["punctuation", "("],
	"ppeBlackoutLast",
	["punctuation", ")"],
	["operator", "="],
	" GVAR",
	["punctuation", "("],
	"ppeBlackoutLast",
	["punctuation", ")"],
	["operator", "+"],
	["number", "1"],
	["punctuation", ";"],

	["keyword", "if"],
	["punctuation", "("],
	"GVAR",
	["punctuation", "("],
	"ppeBlackoutLast",
	["punctuation", ")"],
	["operator", "=="],
	["number", "1"],
	["punctuation", ")"],
	["keyword", "then"],
	["punctuation", "{"],

	"\n\tGVAR",
	["punctuation", "("],
	"ppeBlackout",
	["punctuation", ")"],
	["function", "ppEffectAdjust"],
	["punctuation", "["],
	["number", "1"],
	["punctuation", ","],
	["number", "1"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ","],
	["punctuation", "["],
	["number", "0"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ","],
	["number", "1"],
	["punctuation", "]"],
	["punctuation", ","],
	["punctuation", "["],
	["number", "0"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", "]"],
	["punctuation", ","],
	["punctuation", "["],
	["number", "1"],
	["punctuation", ","],
	["number", "1"],
	["punctuation", ","],
	["number", "1"],
	["punctuation", ","],
	["number", "1"],
	["punctuation", "]"],
	["punctuation", ","],
	["punctuation", "["],
	["number", "10"],
	["punctuation", ","],
	["number", "10"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ","],
	["number", "0.1"],
	["punctuation", ","],
	["number", "0.5"],
	["punctuation", "]"],
	["punctuation", "]"],
	["punctuation", ";"],

	"\n\tGVAR",
	["punctuation", "("],
	"ppeBlackout",
	["punctuation", ")"],
	["function", "ppEffectCommit"],
	["number", "1"],
	["punctuation", ";"],

	["punctuation", "}"],
	["keyword", "else"],
	["punctuation", "{"],

	["keyword", "if"],
	["punctuation", "("],
	"_fatigue ",
	["operator", ">"],
	["number", "0.85"],
	["punctuation", ")"],
	["keyword", "then"],
	["punctuation", "{"],

	["keyword", "if"],
	["punctuation", "("],
	"GVAR",
	["punctuation", "("],
	"ppeBlackoutLast",
	["punctuation", ")"],
	["operator", ">"],
	["punctuation", "("],
	["number", "100"],
	["operator", "-"],
	" _fatigue ",
	["operator", "*"],
	["number", "100"],
	["punctuation", ")"],
	["operator", "/"],
	["number", "3"],
	["punctuation", ")"],
	["keyword", "then"],
	["punctuation", "{"],

	"\n\t\t\tGVAR",
	["punctuation", "("],
	"ppeBlackout",
	["punctuation", ")"],
	["function", "ppEffectAdjust"],
	["punctuation", "["],
	["number", "1"],
	["punctuation", ","],
	["number", "1"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ","],
	["punctuation", "["],
	["number", "0"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ","],
	["number", "1"],
	["punctuation", "]"],
	["punctuation", ","],
	["punctuation", "["],
	["number", "0"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", "]"],
	["punctuation", ","],
	["punctuation", "["],
	["number", "1"],
	["punctuation", ","],
	["number", "1"],
	["punctuation", ","],
	["number", "1"],
	["punctuation", ","],
	["number", "1"],
	["punctuation", "]"],
	["punctuation", ","],
	["punctuation", "["],
	["number", "2"],
	["punctuation", ","],
	["number", "2"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ","],
	["number", "0"],
	["punctuation", ","],
	["number", "0.1"],
	["punctuation", ","],
	["number", "0.5"],
	["punctuation", "]"],
	["punctuation", "]"],
	["punctuation", ";"],

	"\n\t\t\tGVAR",
	["punctuation", "("],
	"ppeBlackout",
	["punctuation", ")"],
	["function", "ppEffectCommit"],
	["number", "1"],
	["punctuation", ";"],

	"\n\t\t\tGVAR",
	["punctuation", "("],
	"ppeBlackoutLast",
	["punctuation", ")"],
	["operator", "="],
	["number", "0"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	["comment", "// - Physical effects ---------------------------------------------------------"],

	["keyword", "if"],
	["punctuation", "("],
	"GVAR",
	["punctuation", "("],
	"isSwimming",
	["punctuation", ")"],
	["punctuation", ")"],
	["keyword", "exitWith"],
	["punctuation", "{"],

	["keyword", "if"],
	["punctuation", "("],
	"GVAR",
	["punctuation", "("],
	"setAnimExclusions",
	["punctuation", ")"],
	["function", "isEqualTo"],
	["punctuation", "["],
	["punctuation", "]"],
	["punctuation", ")"],
	["keyword", "then"],
	["punctuation", "{"],

	"\n\t\t_unit ",
	["function", "setAnimSpeedCoef"],
	["function", "linearConversion"],
	["punctuation", "["],
	["number", "0.7"],
	["punctuation", ","],
	["number", "0.9"],
	["punctuation", ","],
	" _fatigue",
	["punctuation", ","],
	["number", "1"],
	["punctuation", ","],
	["number", "0.5"],
	["punctuation", ","],
	["boolean", "true"],
	["punctuation", "]"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	["keyword", "if"],
	["punctuation", "("],
	["punctuation", "("],
	["function", "isSprintAllowed"],
	" _unit",
	["punctuation", ")"],
	["operator", "&&"],
	["punctuation", "{"],
	"_fatigue ",
	["operator", ">"],
	["number", "0.7"],
	["punctuation", "}"],
	["punctuation", ")"],
	["keyword", "then"],
	["punctuation", "{"],

	["punctuation", "["],
	"_unit",
	["punctuation", ","],
	["string", "\"blockSprint\""],
	["punctuation", ","],
	" QUOTE",
	["punctuation", "("],
	"ADDON",
	["punctuation", ")"],
	["punctuation", ","],
	["boolean", "true"],
	["punctuation", "]"],
	["keyword", "call"],
	" EFUNC",
	["punctuation", "("],
	"common",
	["punctuation", ","],
	"statusEffect_set",
	["punctuation", ")"],
	["punctuation", ";"],

	["punctuation", "}"],
	["keyword", "else"],
	["punctuation", "{"],

	["keyword", "if"],
	["punctuation", "("],
	["punctuation", "("],
	["operator", "!"],
	["function", "isSprintAllowed"],
	" _unit",
	["punctuation", ")"],
	["operator", "&&"],
	["punctuation", "{"],
	"_fatigue ",
	["operator", "<"],
	["number", "0.7"],
	["punctuation", "}"],
	["punctuation", ")"],
	["keyword", "then"],
	["punctuation", "{"],

	["punctuation", "["],
	"_unit",
	["punctuation", ","],
	["string", "\"blockSprint\""],
	["punctuation", ","],
	" QUOTE",
	["punctuation", "("],
	"ADDON",
	["punctuation", ")"],
	["punctuation", ","],
	["boolean", "false"],
	["punctuation", "]"],
	["keyword", "call"],
	" EFUNC",
	["punctuation", "("],
	"common",
	["punctuation", ","],
	"statusEffect_set",
	["punctuation", ")"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	["keyword", "if"],
	["punctuation", "("],
	["punctuation", "("],
	["function", "getAnimSpeedCoef"],
	" _unit",
	["punctuation", ")"],
	["operator", "!="],
	["number", "1"],
	["punctuation", ")"],
	["keyword", "then"],
	["punctuation", "{"],

	["keyword", "if"],
	["punctuation", "("],
	"GVAR",
	["punctuation", "("],
	"setAnimExclusions",
	["punctuation", ")"],
	["function", "isEqualTo"],
	["punctuation", "["],
	["punctuation", "]"],
	["punctuation", ")"],
	["keyword", "then"],
	["punctuation", "{"],

	"\n\t\tTRACE_1",
	["punctuation", "("],
	["string", "\"reset\""],
	["punctuation", ","],
	["function", "getAnimSpeedCoef"],
	" _unit",
	["punctuation", ")"],
	["punctuation", ";"],

	"\n\t\t_unit ",
	["function", "setAnimSpeedCoef"],
	["number", "1"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	["keyword", "if"],
	["punctuation", "("],
	"_overexhausted",
	["punctuation", ")"],
	["keyword", "then"],
	["punctuation", "{"],

	["punctuation", "["],
	"_unit",
	["punctuation", ","],
	["string", "\"forceWalk\""],
	["punctuation", ","],
	" QUOTE",
	["punctuation", "("],
	"ADDON",
	["punctuation", ")"],
	["punctuation", ","],
	["boolean", "true"],
	["punctuation", "]"],
	["keyword", "call"],
	" EFUNC",
	["punctuation", "("],
	"common",
	["punctuation", ","],
	"statusEffect_set",
	["punctuation", ")"],
	["punctuation", ";"],

	["punctuation", "}"],
	["keyword", "else"],
	["punctuation", "{"],

	["keyword", "if"],
	["punctuation", "("],
	["function", "isForcedWalk"],
	" _unit ",
	["operator", "&&"],
	["punctuation", "{"],
	"_fatigue ",
	["operator", "<"],
	["number", "0.7"],
	["punctuation", "}"],
	["punctuation", ")"],
	["keyword", "then"],
	["punctuation", "{"],

	["punctuation", "["],
	"_unit",
	["punctuation", ","],
	["string", "\"forceWalk\""],
	["punctuation", ","],
	" QUOTE",
	["punctuation", "("],
	"ADDON",
	["punctuation", ")"],
	["punctuation", ","],
	["boolean", "false"],
	["punctuation", "]"],
	["keyword", "call"],
	" EFUNC",
	["punctuation", "("],
	"common",
	["punctuation", ","],
	"statusEffect_set",
	["punctuation", ")"],
	["punctuation", ";"],

	["punctuation", "}"],
	["keyword", "else"],
	["punctuation", "{"],

	["keyword", "if"],
	["punctuation", "("],
	["punctuation", "("],
	["function", "isSprintAllowed"],
	" _unit",
	["punctuation", ")"],
	["operator", "&&"],
	["punctuation", "{"],
	"_fatigue ",
	["operator", ">"],
	["number", "0.7"],
	["punctuation", "}"],
	["punctuation", ")"],
	["keyword", "then"],
	["punctuation", "{"],

	["punctuation", "["],
	"_unit",
	["punctuation", ","],
	["string", "\"blockSprint\""],
	["punctuation", ","],
	" QUOTE",
	["punctuation", "("],
	"ADDON",
	["punctuation", ")"],
	["punctuation", ","],
	["boolean", "true"],
	["punctuation", "]"],
	["keyword", "call"],
	" EFUNC",
	["punctuation", "("],
	"common",
	["punctuation", ","],
	"statusEffect_set",
	["punctuation", ")"],
	["punctuation", ";"],

	["punctuation", "}"],
	["keyword", "else"],
	["punctuation", "{"],

	["keyword", "if"],
	["punctuation", "("],
	["punctuation", "("],
	["operator", "!"],
	["function", "isSprintAllowed"],
	" _unit",
	["punctuation", ")"],
	["operator", "&&"],
	["punctuation", "{"],
	"_fatigue ",
	["operator", "<"],
	["number", "0.6"],
	["punctuation", "}"],
	["punctuation", ")"],
	["keyword", "then"],
	["punctuation", "{"],

	["punctuation", "["],
	"_unit",
	["punctuation", ","],
	["string", "\"blockSprint\""],
	["punctuation", ","],
	" QUOTE",
	["punctuation", "("],
	"ADDON",
	["punctuation", ")"],
	["punctuation", ","],
	["boolean", "false"],
	["punctuation", "]"],
	["keyword", "call"],
	" EFUNC",
	["punctuation", "("],
	"common",
	["punctuation", ","],
	"statusEffect_set",
	["punctuation", ")"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	["punctuation", "}"],
	["punctuation", ";"],

	"\n\n_unit ",
	["function", "setVariable"],
	["punctuation", "["],
	"QGVAR",
	["punctuation", "("],
	"aimFatigue",
	["punctuation", ")"],
	["punctuation", ","],
	" _fatigue",
	["punctuation", "]"],
	["punctuation", ";"],

	["keyword", "private"],
	" _aimCoef ",
	["operator", "="],
	["punctuation", "["],
	["function", "missionNamespace"],
	["punctuation", ","],
	["string", "\"ACE_setCustomAimCoef\""],
	["punctuation", ","],
	["string", "\"max\""],
	["punctuation", "]"],
	["keyword", "call"],
	" EFUNC",
	["punctuation", "("],
	"common",
	["punctuation", ","],
	"arithmeticGetResult",
	["punctuation", ")"],
	["punctuation", ";"],

	"\n_unit ",
	["function", "setCustomAimCoef"],
	" _aimCoef",
	["punctuation", ";"]
]

----------------------------------------------------